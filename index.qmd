---
title: "MOLB 7950: Informatics and Statistics for Molecular Biology"

format:
  html:
    theme:
      light: [cosmo, style/quarto-main.scss]
      dark: [cosmo, style/dark.scss, style/quarto-main.scss]
    mainfont: "Atkinson Hyperlegible"
    code-copy: true
    code-overflow: wrap
    toc: true

---

This page contains an outline of the topics, content, and assignments for the semester. Note that this schedule will be updated as the semester progresses, with all changes documented here.

```{r}
#| label: render_schedule_table
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(fs)
library(glue)
library(gt)
library(here)
library(emo)
library(yaml)

params <- yaml::read_yaml(here("_variables.yml"))

qmd_exists <- function(path) {
  path <- path_ext_set(here(path), ".qmd")
  file_exists(path)
}

sched_tbl <- read_tsv(here("data/syllabus.tsv")) |>
  mutate(
    date = ymd(date),
    class_num = row_number()
  ) |>
  mutate(
    block_num = row_number(),
    block_num = str_pad(block_num, 2, "left", "0"),
    .by = c(block, topic)
  ) |>
  arrange(date) |>
  select(-location) |>
  mutate(
    # set up dates / weeks
    class_num = str_pad(class_num, 2, "left", "0"),
    week = isoweek(date),
    week = week - min(week) + 1,
    week = str_c("Week ", week),
    across(
      c(block, topic, instructor, title),
      ~ replace_na(.x, "-")
    ),

    # set up paths
    common_dir = path("content", str_to_lower(block), str_to_lower(topic)),
    prepare_html = path("prepare", glue("prepare-{class_num}.html")),
    slides_html = path("slides", glue("slides-{class_num}.html")),
    ex_html = path("exercises", glue("ex-{class_num}.html")),
    hw_html = path("problem-sets", glue("ps-{class_num}.html")),
    hw_key_html = path("problem-set-keys", glue("ps-key-{class_num}.html")),

    # set up links
    prepare_link = case_when(
      qmd_exists(prepare_html) == TRUE ~
        glue('[{emo::ji("book")}]({prepare_html})'),
      .default = "."
    ),
    prepare_link = map(prepare_link, gt::md),
    slides_link = case_when(
      qmd_exists(slides_html) == TRUE ~
        glue('[{emo::ji("page")}]({slides_html})'),
      .default = "."
    ),
    slides_link = map(slides_link, gt::md),
    # exercises links
    ex_link = case_when(
      qmd_exists(ex_html) == TRUE ~ glue('[{emo::ji("biceps")}]({ex_html})'),
      .default = "."
    ),
    ex_link = map(ex_link, gt::md),
    # problem sets links
    hw_link = case_when(
      qmd_exists(hw_html) == TRUE ~ glue('[{emo::ji("brain")}]({hw_html})'),
      .default = "."
    ),
    hw_link = map(hw_link, gt::md),
    # problem set keys links
    hw_key_link = case_when(
      qmd_exists(hw_key_html) == TRUE ~
        glue('[{emo::ji("key")}]({hw_key_html})'),
      .default = "."
    ),
    hw_key_link = map(hw_key_link, gt::md)
  )
```

```{r}
#| label: render-table
#| echo: false
#| column: screen-inset-right
gt(
  sched_tbl,
  groupname_col = "week",
  rowname_col = "class_num"
) |>
  tab_header(
    title = md(glue("**MOLB 7950 - {params$course$semester} Schedule**")),
    subtitle = glue(
      "Classes held in-person from {params$course$time} in {params$course$room}"
    )
  ) |>
  fmt_date(
    columns = date,
    date_style = "wd_m_day_year"
  ) |>
  cols_label(
    # class = md("**Class**"),
    date = md("**Date**"),
    # location = md("**Location**"),
    block = md("**Block**"),
    topic = md("**Topic**"),
    title = md("**Title**"),
    instructor = md("**Instructor**"),
    prepare_link = md("**Prepare**"),
    # page_link = md("**Page**"),
    slides_link = md("**Slides**"),
    ex_link = md("**Exercises**"),
    hw_link = md("**HW**"),
    hw_key_link = md("**Key**")
  ) |>
  cols_hide(
    c(ends_with("_html"), ends_with("_dir"), block_num)
  ) |>
  tab_spanner(
    label = md("**Links**"),
    columns = ends_with("_link")
  ) |>
  opt_table_font(
    font = google_font("Atkinson Hyperlegible")
  ) |>
  tab_style(
    style = list(
      cell_text(align = "center")
    ),
    locations = cells_row_groups()
  ) |>
  tab_options(
    table.width = pct(100),
    quarto.use_bootstrap = TRUE
  ) |>
  tab_style(
    style = list(
      cell_fill("grey90")
    ),
    locations = cells_row_groups()
  ) |>
  opt_row_striping() |>
  cols_align(
    align = "center"
  )
```
