---
title: "Exercises 8"
author: "Jay Hesselberth"
date: last-modified
format:
  html:
    toc: true
    toc-depth: 2
    code-fold: true
---

# Putting it all together

For the next two classes we'll combine everything we've learned to process and visualize data from some some biological experiments. These exercises will illustrate a complete analysis pipeline -- from data tidying to manipulation and visualization -- using tools from the tidyverse.

![](../img/tidy-workflow.png)

### Libraries

Load the libraries you need for analysis below.

```{r}
#| message: false
library(tidyverse)
library(here)
library(cowplot)
```

# A quantitative PCR experiment

Here is the experimental setup:

-   Two cell lines (`wt` and `mut`) were treated with a drug that induces interferon expression

-   After specific time points, cells were harvested and actin and interferon mRNA were analyzed by quantitative PCR (with 3 technical replicates), with a control containing no reverse transcriptase.

### Load the data

These data are in two TSV files:

-   `data/qpcr_names.tsv.gz`
-   `data/qpcr_data.tsv.gz`

Load these data sets and inspect.

```{r}
qpcr_names <- read_tsv(here("data/qpcr_names.tsv.gz"))
qpcr_data <- read_tsv(here("data/qpcr_data.tsv.gz"))
```

Note the shape of the data and the names of the rows and columns. Do they remind you of anything?

![](../img/96-well-pcr-plate.png)

### Tidy the data

Given the experimental setup and the shape of the tibbles, you should be able to answer: **Are these data tidy?**

-   What are the variables in the data?
-   Are the variables the column names?

```{r}
qpcr_data_long <-
  pivot_longer(qpcr_data, -row, names_to = "col")

qpcr_names_long <-
  pivot_longer(qpcr_names, -row, names_to = "col") |>
  separate(value, into = c("gt", "time", "gene", "rt", "rep"), sep = "_")
```

### Merge the data

Note the structure of the tidied data. What columns (variables) are shared by both tibbles?

How we can *join* the data from these two tibbles, linking the sample identifiers with their gene expression values?

```{r}
qpcr_tidy <-
  left_join(qpcr_names_long, qpcr_data_long) |>
  # we don't need row & col anymore.
  # the -RT samples are all 0, so we can drop those, too
  filter(rt == "+") |>
  select(-(row:col), -rt)
```

### Summarize the data

Calculate the mean and standard deviation across replicates.

Do this two ways:

1.  Calculate the statistics for each gene separately.

2.  Calculate a ratio of interferon to actin levels for each sample *before* calculating the mean and standard deviation of the ratios.

```{r}
qpcr_summary <-
  group_by(
    qpcr_tidy,
    gt,
    time,
    gene
  ) |>
  summarize(
    qpcr_tidy,
    exp_mean = mean(value),
    exp_sd = sd(value)
  ) |>
  arrange(gt, time, gene)
```

### Plot the data

Now we can plot the summary statistics. We'll use [`ggplot2::geom_pointrange()`](https://ggplot2.tidyverse.org/reference/geom_linerange.html) to represent the mean and standard deviation.

```{r}
```

### Interpret the plot

-   What can you say about the expression of ACTIN and IFN?

-   What can you say about the mutant and wild-type cells?


# A yeast gene expression experiment

Next, we'll examine some gene expression data from the budding yeast *S. cerevisiae*. We'll roughly follow the analysis strategy taken by David Robinson in his blog [*Variance Explained*](http://varianceexplained.org/r/tidy-genomics-broom/).

The [data](http://growthrate.princeton.edu/transcriptome/download.shtml) come from:

> Brauer MJ, Huttenhower C, Airoldi EM, Rosenstein R, Matese JC, Gresham D, Boer VM, Troyanskaya OG, Botstein D. **Coordination of growth rate, cell cycle, stress response, and metabolic activity in yeast.** *Mol Biol Cell.* 2008 [**\[Link**\]](https://pubmed.ncbi.nlm.nih.gov/17959824/)

They used [chemostats](https://dunham.gs.washington.edu/chemostatv2.htm) to control the growth rate of cells under different nutrient-limited conditions.

In this experiment, cells were grown in different media limited for (one of) glucose, uracil, leucine, sulfate, phosphate, or ammonia. Over a series of fixed, equilibrium growth rates (established by the dilution rate of fresh media), cells were harvested and gene expression was measured by genome-wide microarrays.

### Load the data

A raw version of the gene expression data are in:

-   `data/brauer_gene_exp_wide.tsv.gz`

In addition, two tibbles contain related information:

-   `data/yeast_go_terms.tsv.gz`
-   `data/yeast_prot_prop.tsv.gz`

Load each of the above files and inspect.

```{r}
brauer_gene_exp_wide <- read_tsv(here("data/brauer_gene_exp_wide.tsv.gz"))
yeast_go_terms <- read_tsv(here("data/yeast_go_terms.tsv.gz"))
```

### Tidy the data

**Are these data tidy?**

```{r}
brauer_gene_exp_tidy <-
  pivot_longer(
    brauer_gene_exp_wide,
    -systematic_name,
    names_to = "sample",
    values_to = "exp"
  ) |>
  separate(
    sample,
    into = c("nutrient", "rate"),
    sep = 1
  )
```

### Heatmap of gene expression values

Heatmaps are a useful approach to visualize thousands of data points, orgnaized by experimental variables to show patterns in the data.

We'll use the [ComplexHeatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/) package from Bioconductor, which provides a flexible framework for generating heatmaps.

```{r}
library(magick)
brauer_mat_dat <-
  brauer_gene_exp |>
  arrange(systematic_name) |>
  unite("sample", nutrient:rate) |>
  pivot_wider(
    names_from = sample,
    values_from = exp
  )

brauer_mat <-
  select(brauer_mat_dat, -systematic_name) |>
  as.matrix()

rownames(brauer_mat) <- brauer_mat_dat$systematic_name

ComplexHeatmap::Heatmap(
  brauer_mat,
  show_row_names = FALSE,
  cluster_columns = FALSE
)
```

### Expression of select genes associated with nutrient metabolism

Examine genes (`common_name`) that start with LEU, URA, PHO, and SUL.

```{r}
#| fig.alt: "Description of the plot - PLEASE FILL IN"
left_join(brauer_gene_exp, yeast_go_terms) |>
  filter(str_detect(common_name, "LEU")) |>
  ggplot(
    aes(
      x = rate,
      y = exp,
      color = nutrient
    )
  ) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~common_name) +
  theme_cowplot() +
  scale_color_OkabeIto()
```
