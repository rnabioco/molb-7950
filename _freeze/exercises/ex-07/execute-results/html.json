{
  "hash": "ce0183f083c4d616c49677536f34812f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp - Class 7\"\nsubtitle: \"Tidyverse odds & ends\"\nauthor: \"{{< var instructor.block.bootcamp-r >}}\"\n---\n\n## Class 7 outline\n\n* String manipulation with `stringr`\n* Factor operations with `forcats`\n* Join functions with `dplyr`\n* Advanced plotting with `ggplot2`\n\n## Setup\n\n\n::: {.cell}\n\n:::\n\n\n# String operations\n\n## Combining strings with `str_c()`\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n::: {.notes}\n`str_c()` is similar to `paste` and `paste0` but the behavior is more consistent.\n:::\n\n## Detecting patterns with `str_detect()`\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n## Splitting strings with `str_split()` {.smaller}\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Factor operations\n\n## Counting factor levels with `fct_count()`\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n## Reordering factors with `fct_reorder()`\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n## Lumping infrequent levels with `fct_lump()`\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n::: {.aside}\nDo your numbers look different? `sample()` is not reproducible by default.\n:::\n\n## Aside on `sample()` and reproducibility {.smaller}\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n::: {.aside}\nthis also applies to `rnorm()`, `runif()`, and other random number generation functions.\n:::\n\n# Join operations\n\n## Setup\n\nOpen up the [tidyexplain](https://www.garrickadenbuie.com/project/tidyexplain/) page.\n\n## Understanding joins\n\nJoins combine data from two tables based on matching keys.\n\n\n::: {.cell}\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## `left_join()` - keep all rows from left table\n\nMost common join - keeps all observations from the \"primary\" table.\n\n\n::: {.cell}\n\n:::\n\n\n## `inner_join()` - keep only matching rows\n\nOnly keeps rows that exist in both tables.\n\n\n::: {.cell}\n\n:::\n\n\n## `full_join()` - keep all rows from both tables\n\n\n::: {.cell}\n\n:::\n\n\nKeeps everything, filling missing values with `NA`.\n\n# Advanced plotting\n\n## Setup\n\n\n::: {.cell}\n\n:::\n\n\n## scale functions in ggplot2 {.smaller}\n\n- `scale_color_brewer()` and `scale_fill_brewer()` control `color` and `fill` aesthetics.\n- See available [ggplot2 brewer palettes](https://ggplot2.tidyverse.org/reference/scale_brewer.html#palettes)\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n## Combining multiple plots into a figure? {.smaller}\n\nUse the [`{patchwork}` package](https://patchwork.data-imaginist.com/).\n\n\n::: {.cell}\n\n:::\n\n\n## Saving plots\n\nSaves last plot as 5' x 5' file named `plot_final.png` in working directory.\n\nMatches file type to file extension (`*.png`, `*.jpeg`, `*.pdf`).\n\n\n::: {.cell}\n\n:::\n\n\n# Displaying data in tables\n\nWe'll use a couple of approaches to display data in tables instead of graphs, which\ncan be useful for reports or presentations.\n\n## Using `knitr::kable()`\n\n\n::: {.cell}\n\n:::\n\n\n## Using `gt`\n\n\n::: {.cell}\n\n:::\n\n",
    "supporting": [
      "ex-07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}