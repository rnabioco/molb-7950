{
  "hash": "36c978018eacb658719e6f213a159dc2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercises 8: Gene Expression Analysis with Tidyverse\"\nsubtitle: \"Advanced Modeling and Functional Analysis\"\nauthor: \"Your Name\"\ndate: today\nformat:\n  html:\n    code-fold: true\n    toc: true\n    toc-depth: 3\n    number-sections: true\n---\n\n# Overview\n\nIn this problem set, you'll work with the Brauer gene expression dataset to practice comprehensive tidyverse skills including data tidying, transformation, joins, pivoting, string manipulation, and **statistical modeling using broom**. The dataset contains gene expression measurements for yeast genes under different nutrient limitations and growth rates.\n\n## Predictions\n\nBefore we start tidying and analyzing the data, take a moment to predict what you might find.\n\n1. Question: What patterns do you expect to see in gene expression across different nutrients and growth rates?\n2. Hypothesis: Genes involved in nutrient uptake and metabolism will show higher expression under their respective limiting conditions.\n\n\n# Setup and Data Loading\n\n## Load Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\n```\n:::\n\n\n## Load the Data\n\n**Task 1:** Load the raw Brauer gene expression data and examine its structure. What makes this data \"messy\" or untidy?\n\n*Breadcrumbs: Use `read_tsv()` to load the data from the URL. Examine column names and the first few rows. Think about tidy data principles - what issues do you see with the current format?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the Brauer gene expression data\n# URL: \"https://github.com/rnabioco/molb-7950/raw/refs/heads/main/data/bootcamp/brauer_gene_exp_raw.tsv.gz\"\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examine the structure of the data\n```\n:::\n\n\n# Part 1: Data Tidying (tidyr)\n\nWe want to create a table that looks like this:\n\n```\n# A tibble: 199,296 × 4\n   systematic_name nutrient  rate exp_level\n   <chr>           <fct>    <dbl>     <dbl>\n 1 YPR204W         Glucose   0.05      1.17\n 2 YPR204W         Glucose   0.1       1\n 3 YPR204W         Glucose   0.15      0.86\n 4 YPR204W         Glucose   0.2       0.77\n 5 YPR204W         Glucose   0.25      0.53\n 6 YPR204W         Glucose   0.3       0.3\n 7 YPR204W         Ammonia   0.05      2.79\n 8 YPR204W         Ammonia   0.1       2\n 9 YPR204W         Ammonia   0.15      0.6\n10 YPR204W         Ammonia   0.2       0.16\n# ℹ 199,286 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n\n## Separate the NAME Column\n\n**Task 2:** The NAME column contains multiple pieces of information separated by \"||\". Split this into meaningful columns.\n\n*Breadcrumbs: Use `separate_wider_delim()` to split the NAME column. You'll want columns for gene name, biological process, molecular function, systematic name, and number. Don't forget to clean up whitespace and handle empty strings.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate the NAME column into meaningful components\n```\n:::\n\n\n## Create a Tidy Dataset\n\n**Task 3:** Transform the wide-format expression data into a long format suitable for analysis.\n\n*Breadcrumbs: First select the relevant columns (systematic_name and the expression columns). Then use `pivot_longer()` to convert expression columns to rows. The column names contain both nutrient type and growth rate information.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform to long format\n```\n:::\n\n\n## Parse Nutrient and Rate Information\n\n**Task 4:** Extract nutrient type and growth rate from the column names in your long dataset.\n\n*Breadcrumbs: The column names follow a pattern like \"G0.05\" where the first character is the nutrient abbreviation and the rest is the growth rate. Use `separate_wider_position()` to split these. Create a lookup table for nutrient abbreviations.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract nutrient and growth rate information\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create nutrient lookup table\n```\n:::\n\n\n# Part 2: Data Transformation (dplyr)\n\n## Filter and Clean\n\n**Task 5:** Remove any rows with missing systematic names and add meaningful nutrient names.\n\n*Breadcrumbs: Use `filter()` to remove empty systematic names. Create a nutrient lookup table and use `left_join()` to add full nutrient names. Convert appropriate columns to factors.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter and clean the data\n```\n:::\n\n\n## Explore Expression Patterns\n\n**Task 6:** Calculate summary statistics for gene expression by nutrient type.\n\n*Breadcrumbs: Use `group_by()` and `summarize()` to calculate mean, median, and standard deviation of expression values for each nutrient. Which nutrients show the highest variability in expression?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate summary statistics by nutrient\n```\n:::\n\n\n## Identify High and Low Expression\n\n**Task 7:** Find genes with extreme expression values under different conditions.\n\n*Breadcrumbs: For each nutrient-rate combination, identify the top 5 highest and lowest expressing genes. Use `slice_max()` and `slice_min()` or ranking functions. What patterns do you notice?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find genes with extreme expression values\n```\n:::\n\n",
    "supporting": [
      "ex-08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}