{
  "hash": "11d9387e15c9be40282685cbbedd4406",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Alternative splicing\"\nauthor: \"{{< var instructor.block.rna >}}\"\n---\n\n\n\n## Overview {.smaller}\n\nIn this lecture, we are going focus on analyzing the regulation of alternative splicing using RNAseq approaches.As we learned last week, `salmon` quantifies a fastq file of sequencing reads against a fasta file of all transcripts present in the sample. At the end of this analysis, we end up with quantifications for each transcript in our fasta file. However, for splicing you may be able to see how this strategy may need to be tweaked. `salmon` gave us transcript-level data, but for looking at splicing, we often want to measure how the inclusion of individual **exons** within transcripts differs between conditions. Thus, transcript-level quantifications are not directly useful here.\n\n> Small aside: Actually, transcript level quantifications could work, because you could ask how the relative abundances of two different transcripts (one that has the exon in question and one that doesn't) vary across conditions. See also `suppa2`.\n\n## Split alignments {.smaller}\n\nWe need exon-level quantifications. So we want to count reads that either support the inclusion or exclusion of an exon.\n\nBelow are examples of some RNAseq reads mapped along a transcript. This transcript contains exons (yellow) and introns (gray). Let's say that there are two isoforms of this gene: one where `exon2` is included and one where it is exlcuded. Reads have been \"aligned\" to this transcript to give a graphical representation of where they came from. You can see that the orange, purple, blue, and teal reads all *support* the inclusion of `exon2`.\n\n![Kim et al, Nat Methods, 2015](/img/block-rna/junc_read.png)\n\n## Split alignments {.smaller}\n\nAnother way to think about this is that the orange, purple, blue, and teal reads came from RNA molecules in which the transcript was included.\n\nWe know this because each of those reads cross a **splice junction** that is either `exon1-exon2` or `exon2-exon3`. These reads tell us, **unambiguously**, that `exon2` was included in the RNA molecule that these reads came from.\n\n![Kim et al, Nat Methods, 2015](/img/block-rna/junc_read.png)\n\n> What does the red read tell us?  What would a read that unambiguously told us that exon2 was *excluded* look like?\n\n## Strategy in action {.smaller}\n\nExample of reads mapped to the area surrounding an alternative exon (the middle exon).  The height of the red and blue area corresponds to the number of read coverage. The red and blue lines connecting exons represent the number of reads that span that junction. So for the blue condition, there are 347 reads (91 + 256) that support the inclusion of this exon, while 81 reads support its exclusion.  In the red condition, this exon is less often excluded as 296 reads (65 + 231) support its inclusion while 130 support its exclusion. *Think about how often an exon was included in a sample as a ratio between the inclusion- and exclusion-supporting reads*.\n\n![](/img/block-rna/sashimi.png){width=50%}\n\n## Workflow {.smaller}\n\nWe will focus on the right side of the flowchart that relies on [`STAR`](https://github.com/alexdobin/STAR), a splice-aware read aligner, and [`rMATS`](https://rnaseq-mats.sourceforge.io/), an alternative splicing analysis tool.\n\n![](/img/block-rna/flowchart.png)\n\n## How STAR works {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\nSTAR begins by finding matches (either unique or nonunique) between a portion of a read and the reference. This matching region of the query is extended along the reference until the two start to disagree. If this match extends all the way through to the end of the read, then the read lies completely within one exon (or intron, or I guess intergenic region if you are bad at making RNAseq libraries) and we are done. If the match ends before the end of the read, the part that has matched so far defines one *seed*.\n\n:::\n::: {.column width=\"50%\"}\n\n![](/img/block-rna/seed1.png)\n\n:::\n:::\n\n\n## How STAR works {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\nSTAR then takes the rest of the query and uses it to find the best match to its sequence in the reference, defining another seed.\n\n:::\n::: {.column width=\"50%\"}\n\n![](/img/block-rna/seed2.png)\n\n:::\n:::\n\n\n## How STAR works {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\nIf, during the extension of a match a small region of mismatch or discontinuity occurs, these can be identified as mutations or indels if high-quality matches between the query and reference resume later in the read.\n\n\n:::\n::: {.column width=\"50%\"}\n\n![](/img/block-rna/indel.png){width=50% height=100%}\n\n:::\n:::\n\n\n## How STAR works {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\nAfter aligning seeds, they can be stitched together. The stitching of seeds with high alignment quality (low number of indels, mismatches) is prefered over the stitching of seeds with low alignment quality (high number of indels, mismatches).\n\n\n:::\n::: {.column width=\"50%\"}\n\n![](/img/block-rna/stitch.png)\n\n:::\n:::\n\n## Running STAR {.smaller}\n\nTo align reads, we first need to create an **index** of the genome (see STAR manual [here](https://physiology.med.cornell.edu/faculty/skrabanek/lab/angsd/lecture_notes/STARmanual.pdf). To do this, `STAR` will require the sequence of the genome (in fasta format), and an annotation that tells it where exons and introns are. It needs the annotation to be able to see if seeds that it stitches together make sense with what we know about exon/intron structures that exist in the transcriptome.  Let's take a look at one of these genome annotation files.\n\n\n## Annotation files {.smaller}\n\nThe most common annotation files are `GTF` and `GFF` files. Here's an example of a `GFF`.\n\n![](/img/block-rna/gff.png)\n\nEach line corresponds to one feature. This is a tab-delimited text file.  There are only a few columns that we care about:\n\n*  Column 1: chromosome\n*  Column 2: source\n*  Column 3: feature type\n*  Column 4: feature start\n*  Column 5: feature end\n*  Column 7: strand (you aren't in DNA land anymore...strand matters)\n\n\n## Annotation files {.smaller}\n\n![](/img/block-rna/gff.png)\n\nColumn 8 contains various information about the feature. Perhaps the most important one tells you about the hierarchy that defines the relationship between features. For example, genes contain *children* transcripts within them, and each transcript contains *children* exons.  Transcripts will therefore belong to *parent* genes and exons will belong to *parent* transcripts. Biologically, this should make sense to you. These relationships are indicated by the **Parent** attribute within column 8.\n\n## Make STAR index {.smaller}\n\nOK now we are ready to make our index.  There relevant options we will need to pay attention to when doing this are shown below:\n\n* **--runMode** genomeGenerate (we are making an index, not aligning reads)\n* **--genomeDir** /path/to/genomeDir (where you want STAR to put this index we are making)\n* **--genomeFastaFiles** /path/to/genomesequence (genome sequence as fasta, either one file or multiple)\n* **--sjdbGTFfile** /path/to/annotations.gff (yes it says gtf, but we are going to use a gff format)\n* **--sjdbOverhang** 100 (100 will usually be a good value here, the recommended value is readLength - 1)\n* **--sjdbGTFtagExonParentTranscript** Parent (we have to specify this because we are using a gff annotation and this is how gff files denote relationships)\n* **--genomeSAindexNbases** 11 (don't worry about this one, we are specifying it because we are using an artificially small genome in this example)\n\n## Make STAR index {.smaller}\n\n>STAR --runMode genomeGenerate\n  --genomeDir {path-to}/mySTARindex\n  --genomeFastaFiles {path-to}/genome.fasta\n  --sjdbGTFfile {path-to}/MOLB7950.gff3\n  --sjdbOverhang 100\n  --sjdbGTFtagExonParentTranscript Parent\n  --genomeSAindexNbases 11\n\n![](/img/block-rna/star_index_out.png)\n\n## STAR: align reads {.smaller}\n\nNow that we have our index we are ready to align our reads.  The options we need to pay attention to here are:\n\n* **--runMode** alignReads (we are aligning this time)\n* **--genomeDir** /path/to/genomeDir (a path to the index we made in the previous step)\n* **--readFilesIn** /path/to/forwardreads /path/to/reversereads (paths to our fastqs, separated by a space)\n* **--readFilesCommand** gunzip -c (our reads our gzipped so we need to tell STAR how to read them)\n* **--outFileNamePrefix** path/to/outputdir (where to put the results)\n* **--outSAMtype** BAM SortedByCoordinate (the format of the alignment output, more on this later)\n\nNow we are ready to align our reads.\n\n## STAR: align reads {.smaller}\n\n> STAR --runMode alignReads\n  --genomeDir  {path-to}/mySTARindex/\n  --readFilesIn {path-to}/MOLB7950_1.fastq.gz {path-to}/MOLB7950_2.fastq.gz\n  --readFilesCommand gunzip -c\n  --outFileNamePrefix {path-to}/myalignments\n  --outSAMtype BAM SortedByCoordinate\n\n![](/img/block-rna/read_align_status.png)\n\n\n## Mapping stats produced by STAR {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\nWell so how did it go? Check the log file. We can see that we put in almost 100k read pairs and 96.7k of these could be uniquely assigned to a single genomic position. 95.6k of these had a splice junction. This is expected for paired end reads against a genome with many introns and short exons.\n\nAs an aside, any read that aligns more times than is allowed by the flag **--outFilterMultimapNmax** is not reported in the alignments. As a default, this value is set to 10. Libraries that are made from low complexity RNA samples and those that deal with repetitive genomic regions can be sensitive to this. Also, if you wanted to, you can use this flag to restrict your alignment file to those that only *uniquely* aligned by setting this value to 1.\n\n:::\n::: {.column width=\"50%\"}\n\n![](/img/block-rna/star_out.png)\n\n:::\n:::\n\n## Investigating alignment files {.smaller}\n\nOur alignment output file is `dummyAligned.sortedByCoord.out.bam`. `BAM` files are binary files and need to be converted to plain text using `samtools view` for us to read it.\n\n> samtools view dummyAligned.sortedByCoord.out.bam > dummyAligned.sam\n\n## Alignments {.smaller}\n\nSAM files can be a little confusing, but it's worth taking the time to get to know them.  The full SAM format specification can be found [here](https://samtools.github.io/hts-specs/SAMv1.pdf).\n\nLet's take a look at our SAM file and see what we see. I'm going to pick 2 lines out.\n\n![](/img/block-rna/sam_example.png)\n\nHere we are looking at 2 lines from this file. These two lines correspond to two paired reads. I know that because the first field in this file is the read ID as it came off the sequencer.  You can see that these two reads have the same ID (it's the thing I grepped for).\n\n## Alignments {.smaller}\n\n![](/img/block-rna/sam_example.png)\n\nThe **second** field is a bitwise flag. It is a sum of integers where each integer tells us something about the read.  Every possible value of this flag is a unique combination of the informative integers. You can see what each of these integers are and what they mean in the [SAM format specification](https://samtools.github.io/hts-specs/SAMv1.pdf). There is also a handy calculator that you can plug your value into and it will tell you what your flag means [here](https://www.samformat.info/sam-format-flag).  If we put our first flag, 163, in there it tell us that this read is:\n\n* The second read in a mate pair (128)\n* On the opposite strand of its mate pair (32)\n* Is mapped and properly paired (2)\n* Is paired (1)\n\nIf you put the flag value for the second read into the calculator, what do you get?\n\n\n## Alignments {.smaller}\n\n![](/img/block-rna/sam_example.png)\n\nThe **third** field is obviously the reference name.  No big mystery there.  This read maps to chromosome 19.\n\nThe **fourth** field is the position on the reference that corresponds to the beginning of the query. This read starts to map to chr19 beginning at position 3371611. As a aside, positions reported in SAM files are 1-based, not 0-based.\n\n## Alignments {.smaller}\n\n![](/img/block-rna/sam_example.png)\n\nThe **sixth** field is called the CIGAR string. This is a string of characters that tells you a little bit about *how* the query aligns to the reference.  Again, details can be found in the [SAM format specification](https://samtools.github.io/hts-specs/SAMv1.pdf). The CIGAR string for the first read can be interpreted as follows:\n\n* The first 67 bases in the query align to the reference.\n* There is then a gap in the reference of 3415 nt.\n* Then the query starts to match again, and does so for the next 84 nt.\n\nThese are paired end 151 nt reads, so it makes sense that 67 + 84 = 151.\n\nIn not so shocking news, the top read's mate (the second read) also has a gap in the reference of 3415 nt. As you might have guessed, these reads are spanning the same intron, which you would expect reads from the same mate pair to do.\n\n## Alignments {.smaller}\n\nThe **ninth** field is the *template length*, abbreviated TLEN. This is the distance, in nt, from the beginning of one read in a pair to the end of it's mate.\n\n![](/img/block-rna/tlen.png)\n\nIf you know a little bit about how RNAseq libraries are made, you might know that transcripts are fragmented, usually to lengths of 200-500 nt. Given that this read is stretching over 3 kb along the reference sequence, it's a good bet that it is spanning an intron that is present in the reference but had been removed in the RNA molecule i.e. it was spliced out!\n\n## Workflow {.smaller}\n\nNow that we have aligned with `STAR`, we can calculate exon inclusion with `rMATS`. As is often the case with bioinformatic tools, `rMATS` is not the only tool that you can use to look at alternative splicing, but it has been around for a while and has been thoroughly tested.\n\n![](/img/block-rna/flowchart.png)\n\n## PSI ($\\psi$) values {.smaller}\n\nIn many scenarios, splicing is quantified using a metric called PSI (Percent Spliced In), often shown as the greek letter $\\psi$, is a metric that asks what fraction of transcripts *contain* the exon or RNA sequence in question. Thus, $\\psi$ values range from 0 (which would indicate that the exon is never included) to 1 (which would indicate that the exon is always included). $\\psi$ can be estimated by counting the number of reads that unambiguously support the inclusion of the exon and the number of reads that unambiguously support exclusion of the exon.\n\nFor skipped \"cassette\" exons, these reads are diagrammed below:\n\n![Shen et al, (2014). PNAS](/img/block-rna/sepsi.jpg)\n\n## PSI ($\\psi$) values {.smaller}\n\nIn this diagram, the exon in gray can either be included or skipped to produced two different transcript isoforms. Reads in red (I for inclusion) unambiguously argue for the inclusion of the exon while reads in green (S for skipping) unambiguously argue for skipping of the exon.  Keep in mind that the reads drawn over splice junctions indicate the the read spans the splice junction.\n\n\n![Shen et al, (2014). PNAS](/img/block-rna/sepsi.jpg)\n\n> Note: Red reads that do not cross a junction but lie totally within the gray exon are often used in splicing analysis, but do not formally unambiguously show exon inclusion. It is safer to rely **only** on splice-junction spanning reads for splicing quantitation. The downside of this is that you will lose read counts that came from non-junction reads. Fewer read counts means less statistical power.\n\n## Types of alternative splicing {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n![Shen et al, (2014). PNAS](/img/block-rna/astypes_1.png)\n\n:::\n::: {.column width=\"50%\"}\nThere are other types of alternative splicing besides skipped exons. In each case, $\\psi$ is defined as the fraction of transcript in which the white sequence is included.\n\nSince we have already determined where in the genome RNAseq reads came from using `STAR`, we will now use `rMATS` to take those locations and combine it with information about the locations of alternative exons to quantify the inclusion of each alternative exon.\n:::\n:::\n\n## Running rMATS {.smaller}\n\nTo quantify alternative splicing, `rMATS` needs two things: the locations of the reads in the genome (bam files) and the locations of alternative exons in the genome (GTF annotation file).\n\n> Note: You may remember that when we ran STAR, we used a different type of genome annotaiton file: GFF. GTFs and GFFs contain essentially the same information and it is possible to interconvert between the two. I chose to introduce you to GFFs because, to my mind, they are more intuitive to and readable by humans. STAR could handle both GTF and GFF formats. rMATS requires GTFs.\n\nHere are the most relevant options when running `rMATS`.  See the documentation [here](https://github.com/Xinglab/rmats-turbo/blob/v4.1.0/README.md).\n\n* **--b1** /path/to/b1.txt (path to a text file that contains paths to all BAM files for samples in condition 1)\n* **--b2** /path/to/b2.txt (path to a text file that contains paths to all BAM files for samples in condition 2)\n* **--gtf** /path/to/gtf (path to the gtf genome annotation)\n* **-t** readtype (single or paired)\n* **--readlength** readlength\n* **--od** /path/to/output (output directory)\n\n## Looking at rMATS output {.smaller}\n\nIn this example, the authors were interested in the splicing regulatory activity of the RNA-binding protein RBFOX2. They sequenced RNA from cells that had been treated with either shRNA against RBFOX2 or a control, non-targeting shRNA. Each condition was performed in quadruplicate, meaning we have 4 replicates for each condition. I downloaded their data, aligned it against the mouse genome using `STAR`, and then quantified alternative splicing using `rMATS`.\n\nWe won't run `rMATS` here because we would need multiple large bam files to do anything meaningful, and honestly, it's just copying things from the documentation and putting them into the command line. What we will do though, is look at the output produced by `rMATS`.\n\n## rMATS output {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\n\nYou can see that there are many files here, and that each type of alternative splicing (A3SS, A5SS, MXE, RI, and SE) has files associated with it. Specifically each event type has 2 files: one that ends in 'JC.txt' and one that ends in 'JCEC.txt'. The 'JC.txt' files only use reads that cross splice junctions to quantify splicing (JC = junction counts) while the 'JCEC.txt' files use both junction reads *and* reads that map to the alternative exon (EC = exon counts). We are going to use the files ending in `*JC.txt`.\n\n:::\n::: {.column width=\"50%\"}\n\n![](/img/block-rna/rmats_dir.png)\n\n:::\n:::\n\n## rMATS output {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\n\nIf we look at `SE.MATS.JC.txt` file the column names are at the top. Let's go through some of the more important columns:\n\n* **ID** A unique identifier for this event.\n* **chr** chromosome\n* **strand** strand  (+ or -)\n* **exonStart_0base** the coordinate of the beginning of the alternative exon (using 0-based coordinates)\n* **exonEnd** the coordinate of the end of the alternative exon\n\n:::\n::: {.column width=\"60%\"}\n\n![](/img/block-rna/rmats_out.png)\n\n\n:::\n:::\n\n\n## rMATS output {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\n\n* **upstreamES** the coordinate of the beginning of the exon immediately upstream of the alternative exon\n* **upstreamEE** the coordinate of the end of the exon immediately upstream of the alternative exon\n* **downstreamES** the coordinate of the beginning of the exon immediately downstream of the alternative exon\n* **downstreamEE** the coordinate of the end of the exon immediately downstream of the alternative exon\n\n\n:::\n::: {.column width=\"60%\"}\n\n![](/img/block-rna/rmats_out.png)\n\n\n:::\n:::\n\n\n## rMATS output {.smaller}\n\nNotice that with these coordinates and the sequence of the genome, you could derive the sequences flanking each of these exons. That could be useful, perhaps, if you wanted to ask if there were short sequences (kmers) enriched near exons whose inclusion was sensitive to RBFOX2 loss versus exons whose inclusion was insensitive.\n\n* **IJC_SAMPLE_X** the number of read counts that support inclusion of the exon is sample X (four numbers, one for each replicate, each separated by a comma)\n* **SJC_SAMPLE_X** same thing, but for read counts that support the exclusion of the exon\n\n## rMATS output {.smaller}\n\nThe numbers from `[S|I]JC_SAMPLE_X ` could be useful for filtering events based on coverage. Say, for example, that we were looking at an event that when we combined IJC and SJC counts for each replicate we got something like 2,4,1,5.  That would mean that in the replicates for this condition, we only had 2, 4, 1, and 5 reads that tell us anything about the status of this exon.  That's pretty low, so I would argue that we really wouldn't want to consider this event at all since we don't have much confidence that we know anything about its inclusion.\n\n* **PValue** The pvalue asking if the PSI values for this event between the two conditions is statistically significantly different\n* **FDR** The p value, after it has been corrected for multiple hypothesis testing. This is the significance value you would want to filter on.\n* **IncLevel1** PSI values for the replicates in condition 1 (in this case, condition 1 is RBFOX shRNA).\n* **IncLevel2** PSI values for the replicates in condition 2 (in this case, condition 2 is Control shRNA).\n* **IncLevelDifference** Difference in PSI values between conditions (Condition 1 - Condition 2).\n\n\n## rMATS output {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npsis <-\n  read_tsv(\n    here(\"data/block-rna/rMATS/SE.MATS.JC.txt.gz\"),\n  ) |>\n  # Select only the columns we care about\n  dplyr::select(\n    c(\n      ID = ID...1,\n      geneSymbol,\n      contains(\"SAMPLE\"),\n      FDR,\n      starts_with(\"Inc\")\n    )\n  )\n\npsis\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12,134 × 11\n      ID geneSymbol IJC_SAMPLE_1   SJC_SAMPLE_1 IJC_SAMPLE_2\n   <dbl> <chr>      <chr>          <chr>        <chr>       \n 1     5 Neil1      12,6,9,5       0,0,0,0      10,8,14,0   \n 2     6 Wrap53     44,34,40,22    3,0,0,0      29,13,19,15 \n 3     9 Zfp28      3,0,0,4        0,0,0,0      2,0,0,0     \n 4    11 Pik3cd     18,5,1,3       0,0,0,0      3,7,10,2    \n 5    17 Cd81       348,210,261,2… 0,0,0,0      231,166,135…\n 6    21 Smarca4    136,107,135,78 0,0,1,0      107,132,95,…\n 7    22 Smarca4    8,0,0,8        148,93,102,… 1,0,0,4     \n 8    26 Map7d1     3,1,11,10      9,3,26,8     8,14,7,23   \n 9    27 Map7d1     3,1,7,7        0,0,2,0      8,16,5,19   \n10    28 Ubxn2a     62,70,49,38    1,4,4,0      51,54,52,20 \n# ℹ 12,124 more rows\n# ℹ 6 more variables: SJC_SAMPLE_2 <chr>, FDR <dbl>,\n#   IncFormLen <dbl>, IncLevel1 <chr>, IncLevel2 <chr>,\n#   IncLevelDifference <dbl>\n```\n\n\n:::\n:::\n\n\nWe will only consider events where there are *at least* 20 informative reads that tell us about the inclusion of the exon `IJC + SJC > 20` in **every replicate**. For example, for event '5' (gene Neil1) above, Sample 1 replicates have 12, 6, 9, and 5 reads while Sample 2 replicates have 10, 8, 14, and 0 reads.  I would want to require that all of 12, 6, 9, 5, 10, 8, 14, and 0 are greater than 20 in order to worry about this event.  Otherwise, I conclude that we don't have enough data to accurately conclude anything about this event.\n\n## tidy rMATS output {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npsis <- psis |>\n  separate_wider_delim(\n    cols = c(IJC_SAMPLE_1, SJC_SAMPLE_1, IJC_SAMPLE_2, SJC_SAMPLE_2),\n    delim = \",\",\n    names_sep = \"\",\n    too_few = \"align_start\"\n  ) |>\n  rename_with(\n    \\(x) {\n      case_when(\n        str_detect(x, \"IJC_SAMPLE_1_(\\\\d+)\") ~\n          str_replace(x, \"IJC_SAMPLE_1_(\\\\d+)\", \"IJC_S1R\\\\1\"),\n        str_detect(x, \"SJC_SAMPLE_1_(\\\\d+)\") ~\n          str_replace(x, \"SJC_SAMPLE_1_(\\\\d+)\", \"SJC_S1R\\\\1\"),\n        str_detect(x, \"IJC_SAMPLE_2_(\\\\d+)\") ~\n          str_replace(x, \"IJC_SAMPLE_2_(\\\\d+)\", \"IJC_S2R\\\\1\"),\n        str_detect(x, \"SJC_SAMPLE_2_(\\\\d+)\") ~\n          str_replace(x, \"SJC_SAMPLE_2_(\\\\d+)\", \"SJC_S2R\\\\1\"),\n        .default = x\n      )\n    }\n  ) |>\n  # Convert to numeric\n  mutate(across(starts_with(c(\"IJC_\", \"SJC_\")), as.numeric))\n\npsis\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12,134 × 23\n      ID geneSymbol IJC_SAMPLE_11 IJC_SAMPLE_12\n   <dbl> <chr>              <dbl>         <dbl>\n 1     5 Neil1                 12             6\n 2     6 Wrap53                44            34\n 3     9 Zfp28                  3             0\n 4    11 Pik3cd                18             5\n 5    17 Cd81                 348           210\n 6    21 Smarca4              136           107\n 7    22 Smarca4                8             0\n 8    26 Map7d1                 3             1\n 9    27 Map7d1                 3             1\n10    28 Ubxn2a                62            70\n# ℹ 12,124 more rows\n# ℹ 19 more variables: IJC_SAMPLE_13 <dbl>,\n#   IJC_SAMPLE_14 <dbl>, SJC_SAMPLE_11 <dbl>,\n#   SJC_SAMPLE_12 <dbl>, SJC_SAMPLE_13 <dbl>,\n#   SJC_SAMPLE_14 <dbl>, IJC_SAMPLE_21 <dbl>,\n#   IJC_SAMPLE_22 <dbl>, IJC_SAMPLE_23 <dbl>,\n#   IJC_SAMPLE_24 <dbl>, SJC_SAMPLE_21 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## filter rMATS output {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npsis_filt <- psis |>\n  mutate(\n    S1R1counts = IJC_SAMPLE_11 + SJC_SAMPLE_11,\n    S1R2counts = IJC_SAMPLE_12 + SJC_SAMPLE_12,\n    S1R3counts = IJC_SAMPLE_13 + SJC_SAMPLE_13,\n    S1R4counts = IJC_SAMPLE_14 + SJC_SAMPLE_14,\n    S2R1counts = IJC_SAMPLE_21 + SJC_SAMPLE_21,\n    S2R2counts = IJC_SAMPLE_22 + SJC_SAMPLE_22,\n    S2R3counts = IJC_SAMPLE_23 + SJC_SAMPLE_23,\n    S2R4counts = IJC_SAMPLE_24 + SJC_SAMPLE_24\n  ) |>\n  filter(if_all(ends_with(\"counts\"), ~ .x >= 20))\n\nhead(psis_filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 31\n     ID geneSymbol IJC_SAMPLE_11 IJC_SAMPLE_12 IJC_SAMPLE_13\n  <dbl> <chr>              <dbl>         <dbl>         <dbl>\n1    17 Cd81                 348           210           261\n2    21 Smarca4              136           107           135\n3    22 Smarca4                8             0             0\n4    28 Ubxn2a                62            70            49\n5    95 Wbp2                 125           105           150\n6    98 Eme1                  50            55            68\n# ℹ 26 more variables: IJC_SAMPLE_14 <dbl>,\n#   SJC_SAMPLE_11 <dbl>, SJC_SAMPLE_12 <dbl>,\n#   SJC_SAMPLE_13 <dbl>, SJC_SAMPLE_14 <dbl>,\n#   IJC_SAMPLE_21 <dbl>, IJC_SAMPLE_22 <dbl>,\n#   IJC_SAMPLE_23 <dbl>, IJC_SAMPLE_24 <dbl>,\n#   SJC_SAMPLE_21 <dbl>, SJC_SAMPLE_22 <dbl>,\n#   SJC_SAMPLE_23 <dbl>, SJC_SAMPLE_24 <dbl>, FDR <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Plot distribution of PSI values {.smaller}\n\nExons whose inclusion is not regulated tend to have PSI values that are either very close to 0 or very close to 1 (i.e. these exons are pretty much always included or always skipped). Exons whose inclusion is regulated tend to have PSI values that are more evenly spread between 0 and 1. Do see this in our data?\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\npsis_filt_psi <- psis_filt |>\n  separate_wider_delim(\n    col = IncLevel1,\n    delim = \",\",\n    names = c(\"PSI_S1R1\", \"PSI_S1R2\", \"PSI_S1R3\", \"PSI_S1R4\")\n  ) |>\n  separate_wider_delim(\n    col = IncLevel2,\n    delim = \",\",\n    names = c(\"PSI_S2R1\", \"PSI_S2R2\", \"PSI_S2R3\", \"PSI_S2R4\")\n  ) |>\n  select(contains(\"PSI\"), FDR) |>\n  mutate(across(starts_with(\"PSI\"), as.numeric))\n\n# Turn data from wide format into long format for plotting purposes\npsis_filt_psi_long <- psis_filt_psi |>\n  pivot_longer(\n    cols = PSI_S1R1:PSI_S2R4,\n    names_to = \"sample\",\n    values_to = \"psi\"\n  ) |>\n  mutate(\n    condition = if_else(str_detect(sample, \"S1\"), \"RBFOX2kd\", \"Controlkd\"),\n    sig = if_else(FDR < 0.05, \"yes\", \"no\")\n  )\n```\n:::\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# Plot\ncolors <- c(\"DarkOrange\", \"DarkViolet\")\n\nggplot(\n  psis_filt_psi_long,\n  aes(\n    x = psi,\n    linetype = condition,\n    color = sig\n  )\n) +\n  geom_density() +\n  theme_cowplot() +\n  facet_wrap(\n    ~sig,\n    scales = \"free_y\",\n    nrow = 2\n  ) +\n  scale_color_manual(values = colors)\n```\n\n::: {.cell-output-display}\n![](slides-25_files/figure-revealjs/plot-psis-2-1.png){width=960}\n:::\n:::\n\n\n## PCA of PSI values {.smaller}\n\nJust as we did with gene expression values, we can monitor the quality of this data using principle components analysis.  We would expect that replicates within a condition would be clustered next to each other in this analysis and that PC1, the principal component along which the majority of the variance lies, would separate the conditions.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# Make a matrix of psi values\npsis_mtx <-\n  select(psis_filt_psi, -FDR) |>\n  drop_na()\n\n# Use prcomp() to derive principle component coordinants of PSI values\npsi_pca <- prcomp(t(psis_mtx))\n\n# Add annotations of the conditions to the samples\npsi_pca_pc <-\n  data.frame(\n    psi_pca$x,\n    sample = colnames(psis_mtx)\n  ) |> \n  mutate(\n    condition = case_when(\n      grepl(\"S1\", sample) ~ \"RBFOX2kd\",\n      .default = \"Controlkd\"\n    )\n  ) \n\n\n# Get the amount of variances contained within PC1 and PC2\npsi.pca.summary <- summary(psi_pca)$importance\npc1var <- round(psi.pca.summary[2, 1] * 100, 1)\npc2var <- round(psi.pca.summary[2, 2] * 100, 1)\n\n# Plot PCA data\nggplot(\n  psi_pca_pc,\n  aes(\n    x = PC1,\n    y = PC2,\n    shape = condition,\n    color = condition\n  )\n) +\n  geom_point(size = 5) +\n  scale_color_manual(values = colors) +\n  labs(\n    x = paste(\"PC1,\", pc1var, \"% explained var.\"),\n    y = paste(\"PC2,\", pc2var, \"% explained var.\")\n  ) +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](slides-25_files/figure-revealjs/pca-psis-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Heatmap of psi events\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# Filter only significant events\npsi_sig <- psis_filt_psi |>\n  filter(FDR < 0.05) |>\n  select(-FDR)\n\n# row scaled heatmap\npheatmap(\n  mat = psi_sig,\n  clustering_method = \"ward.D2\",\n  scale = \"row\",\n  show_rownames = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](slides-25_files/figure-revealjs/heatmap-psis-1.png){width=960}\n:::\n:::\n\n",
    "supporting": [
      "slides-25_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}