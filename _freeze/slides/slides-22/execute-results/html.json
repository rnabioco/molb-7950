{
  "hash": "c88f3b796d92d4026d0141243979b723",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"class 22\"\nsubtitle: \"RNA-sequencing intro\"\nauthor: \"{{< var instructor.block.rna >}}\"\n---\n\n\n\n## Lecture Overview\n\n-   mRNA life cycle\n-   RNA-seq\n-   Alignment\n-   Transcript quantification\n-   DESeq model\n-   Additional statistical considerations\n\n## RNA in the cell\n\n![](/img/block-rna/rrna.png)\n\n## life fo an mRNA\n\nMessenger RNA (mRNA) carries genetic information encoded in DNA required for making proteins.\n\n![](/img/block-rna/RNA_life_cycle.png){width=\"5in\"}\n\n## Steps of RNA regulation {.smaller}\n\n-   **Transcription**: A pre-mRNA still containing intron sequences is transcribed from DNA.\n-   **Capping**: A 7-methyl-guanosine \"cap\" is attached the 5' end of the nascent RNA.\n-   **Splicing**: The excision intronic sequences.\n-   **Cleavage**: The nascent RNA is cleaved from DNA.\n-   **Polyadenylation**: The addition of a polyA tail to the 3' end of the now RNA.\n-   **Export**: The mature mRNA is transported from the nucleus to the cytoplasm.\n-   **Localization**: The mRNA is localized to specific sub-regions or organelles within the cell.\n-   **Translation**: The production of specific protein based on the codons present within the mRNA.\n-   **Decay**: The enzymatic degradation of mRNA molecules.\n\n## RNA-seq {.smaller}\n\nTypically refers to \"long\" RNAs i.e. mRNA and long non-coding RNA (lncRNA). Specifically, we capture the steady-state pool of mature mRNA and to a lesser degree pre-mRNA. Thus, we can easily assess the abundance and isoforms expressed in the sample of interest. Of course, long read RNA sequencing (Nanopore, PacBio) enable better detection of continuity of exons and full-length isoforms.\n\n![](https://raw.githubusercontent.com/Sydney-Informatics-Hub/training-RNAseq-slides/master/01_IntroductionToRNASeq/assets/tracy1.png)\n\n## Selecting RNA populations for sequencing {.smaller}\n\nNeed to determine which population of RNA you are interested in sequencing. The vast majority (\\~80%) of RNA in the cell is from ribosomal RNA. Smaller regulatory non-coding RNA are typically excluded due to size selection (snRNA, snoRNA, tRNA, miRNA).\n\n::::: columns\n::: {.column width=\"50%\"}\n-   **polyA selection**: uses oligo dT to hybridize to poly A tails of mRNA (and many long non-coding RNA)\n\n-   **depletion of rRNA**: uses DNA oligos complementary to portions of rRNA to either remove (purification) or degrade (RNaseH) to avoid rRNA getting into the library.\n\n-   **size selection**: sequence a population of RNAs that have a specific length such as microRNAs, which are \\~21 nt regulatory non-coding RNAs.\n:::\n\n::: {.column width=\"50%\"}\n![](/img/block-rna/polyA_rRNA_size.png)\n:::\n:::::\n\n## Importance of stand-specificity {.smaller}\n\n::::: columns\n::: {.column width=\"60%\"}\n![](/img/block-rna/strandedness.png)\n:::\n\n::: {.column width=\"40%\"}\n...and the genome has complex organization.\n\nstrand-specificity is crucial\n\n![](/img/block-rna/overlapping_genes.png)\n:::\n:::::\n\n## Achieving strand-specificity\n\n![](/img/block-rna/strand_protocol.png)\n\n## RNA-seq read alignment {.smaller}\n\nYou get your data back and align the reads to the genome, right? Nope, we need to deal with reads that will need to be \"split\" - spliced exons - to properly align. There are two strategies to deal with this: **1) Spliced alignments** and **2) Pseudoalignment (transcripts)**.\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/01/RNA-Seq-alignment.png)\n\n## Spliced alignment workflow {.smaller}\n\n::::: columns\n::: {.column width=\"60%\"}\n![](https://github.com/hbctraining/Intro-to-rnaseq-hpc-salmon/blob/master/img/RNAseqWorkflow.png?raw=true){width=\"75%\"}\n:::\n\n::: {.column .nonincremental width=\"40%\"}\nSplice-aware aligners:\n\n-   [HiSat2](http://daehwankimlab.github.io/hisat2/)\n\n-   [Tophat2](http://ccb.jhu.edu/software/tophat/index.shtml)\n\n-   [STAR](https://github.com/alexdobin/STAR) *\\<- use this*\n:::\n:::::\n\n## How does STAR work? {.smaller}\n\n::::: columns\n::: {.column .incremental width=\"50%\"}\n![](/img/block-rna/alignment_STAR_step1.png)\n\n![](/img/block-rna/alignment_STAR_step2.png)\n:::\n\n::: {.column .incremental width=\"50%\"}\n![](/img/block-rna/alignment_STAR_step5.png)\n:::\n:::::\n\n## Pseudoalignment and transcript quantification {.smaller}\n\nOR align/quantify in the same step. Fast and accurate...but you need to provide the transcripts (cannot discover new isoforms).\n\n::::: columns\n::: {.column width=\"50%\"}\n![](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/img/rnaseq_salmon_workflow.png)\n:::\n\n::: {.column .nonincremental width=\"50%\"}\n![](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/img/salmon_workflow_subset.png)\n\nSoftware:\\\n[Salmon](https://combine-lab.github.io/salmon/) *\\<- use this*.\\\n[Kallisto](https://pachterlab.github.io/kallisto/about).\n:::\n:::::\n\n## How does Salmon work? {.smaller}\n\nCreate an index to evaluate the sequences for all possible unique sequences of length k (k-mer) in the transcriptome from known transcripts (splice isoforms for all genes).\n\n::::: columns\n::: {.column width=\"50%\"}\nThe Salmon index has two components:\n\n-   a suffix array (SA) of the reference transcriptome\n-   a hash table to map each transcript in the reference transcriptome to it's location in the SA\n\nThe quasi-mapping approach estimates where the reads best map to on the transcriptome through identifying where informative sequences within the read map to instead of performing base-by-base alignment.\n:::\n\n::: {.column .nonincremental width=\"50%\"}\n![](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/img/salmon_quasialignment.png)\n:::\n:::::\n\n## How does Salmon work? (cont.) {.smaller}\n\n::::: columns\n::: {.column width=\"50%\"}\n1.  The read is scanned from left to right until a k-mer that appears in the hash table is discovered.\n2.  The k-mer is looked up in the hash table and the SA intervals are retrieved, giving all suffixes containing that k-mer\n3.  Similar to STAR, the maximal matching prefix (MMP) is identified by finding the longest read sequence that exactly matches the reference suffixes.\n:::\n\n::: {.column .nonincremental width=\"50%\"}\n![](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/img/salmon_quasialignment.png)\n:::\n:::::\n\n## How does Salmon work? (cont.) {.smaller}\n\n::::: columns\n::: {.column width=\"50%\"}\n4.  We could search for the next MMP at the position following the MMP, but often natural variation or a sequencing error in the read is the cause of the mismatch from the reference, so the beginning the search at this position would likely return the same set of transcripts. Therefore, Salmon identifies the next informative position (NIP), by skipping ahead 1 k-mer.\n5.  This process is repeated until the end of the read.\n6.  The final mappings are generated by determining the set of transcripts appearing in all MMPs for the read. The transcripts, orientation and transcript location are output for each read.\n:::\n\n::: {.column .incremental width=\"50%\"}\n![](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/img/salmon_quasialignment.png)\n\nAfter determining the best mapping for each read/fragment, salmon will generate the final transcript abundance estimates after modeling sample-specific parameters and biases. Note that reads/fragments that map equally well to more than one transcript will have the count divided between all of the mappings; thereby not losing information for the various gene isoforms.\n:::\n:::::\n\n## Accounting for biases\n\nSalmon and Kallisto account for:\n\n-   GC bias\n\n-   positional coverage biases\n\n-   sequence biases at 5' and 3' ends of the fragments\n\n-   fragment length distribution\n\n-   strand-specificity\n\n## Transcript quantification metrics {.smaller}\n\nNeed to deal with systematic differences within/between samples such as:\n\n-   sequencing depth\n-   gene/transcript length\n-   composition\n\n## Sequencing Depth {.smaller}\n\n![](https://hbctraining.github.io/DGE_workshop/img/normalization_methods_depth.png){width=\"50%\"}\n\n## Gene length {.smaller}\n\n![](https://hbctraining.github.io/DGE_workshop/img/normalization_methods_length.png){width=\"50%\"}\n\n## Composition {.smaller}\n\n![](https://hbctraining.github.io/DGE_workshop/img/normalization_methods_composition.png){width=\"50%\"}\n\n## Popular metrics: {.smaller}\n\n::::: columns\n::: {.column width=\"60%\"}\nCPM — (read) Counts Per Million: $$CPM =    \\displaystyle \\frac {\\#\\ reads\\ mapped\\ to\\ gene*10^6}{Total\\ \\#\\ mapped\\ reads}$$\n\n\\[F\\|R\\]PKM — \\[Fragments\\|Reads\\] Per Kilobase per Million: $$FPKM =     \\displaystyle \\frac {\\#\\ fragments\\ mapped\\ to\\ gene*10^6}{Total\\ \\#\\ mapped\\ reads*transcript\\ length}$$\n\nTPM — Transcripts Per Million: $$TPM =  \\displaystyle A* \\frac {1}{\\sum_{}A}$$ $$A = \\displaystyle \\frac {\\#\\ fragments\\ mapped\\ to\\ gene*10^6}{transcript\\ length}$$\n:::\n\n::: {.column width=\"40%\"}\n-   RPKM and FPKM are pretty much the same thing. FPKM is for fragments (paired-ends), not reads (single-end).\n\n-   TPM and \\[F\\|R\\]PKM account for length differences between transcripts.\n\n-   The sum of all \\[F\\|R\\]PKMs may not be the same across samples.\n\n-   TPM normalizes to gene length first and then normalize for sequencing depth. **Thus the sum of all TPMs is the same across samples**. A better measure of relative transcript \"concentration\" in your sample than \\[F\\|R\\]PKM.\n:::\n:::::\n\n## Appropriate use and caveats {.smaller}\n\nCan I compare TPM / \\*PKM / CPM across samples?\n\n> It depends what you mean by “compare”. Because these measures are purely relative, you cannot reliably use a metric like TPM to directly assess differences in transcript abundance across samples. Specifically, changes in the composition (e.g. polyA vs rRNA-depleted) of a sample can lead to changes in TPM, even if transcripts are, in reality, expressed at the same true level across samples. Metrics like this can be useful for “high-level” comparisons (e.g. visualizing samples etc.). However, whenever using a relative metric like this, one should be aware of its relative nature and the potential caveats that go along with interpreting them between samples.\n\n**We do NOT use TPM differences for differential expression.**\n\n[The RNA-seq abundance zoo](http://robpatro.com/blog/?p=235)\n\n[Misuse of RPKM or TPM normalization when comparing across samples and sequencing protocols](https://rnajournal.cshlp.org/content/26/8/903.full)\n\n[RPKM, FPKM and TPM, Clearly Explained!!!](https://www.youtube.com/watch?v=TTUrtCY2k-w)\n\n## Differential expression analysis {.smaller}\n\n::::: columns\n::: {.column width=\"50%\"}\nDO NOT USE TPM (or anything we just talked about) to perform differential expression analysis.\n\nRNA-seq data are discrete non-negative integers (counts per transcripts).\n\nRemember the reads are (pseudo-)aligned and we **COUNT** how many are assigned to a specific transcript in a given sample.\n:::\n\n::: {.column width=\"50%\"}\n![](/img/block-rna/de_workflow_salmon.png)\n:::\n:::::\n\n## Distributions for count data {.smaller}\n\n> Reads are count based and not normally distributed. Two distributions for count based data are poisson (which presumes the variance and mean are equal) or negative binomial (which does not). This is especially a problem when the number of biological replicates are low because it is hard to accurately model variance of count based data if you are looking at only that gene and making the assumptions of normally distributed continuous data (ie a t-test).\n\n## Overdispersion {.smaller}\n\n> **Overdispersion** the variance of counts is generally greater than their mean, especially for genes expressed at a higher level.\n\n::::: columns\n::: {.column width=\"50%\"}\n![](/img/block-rna/nb_mean_var.png)\n:::\n\n::: {.column width=\"50%\"}\nThe total number of reads for each sample tends to be in the millions, while the counts per gene are much lower (many zeros, tens/hundreds) and vary considerably. While the Poisson distribution seems appropriate for sampling out of a large pool with low probability. Poisson does not handle **overdispersion**, enter the Negative Binomial distribution.\n:::\n:::::\n\n## Examine count data {.smaller}\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nd <- read_csv(\n  here(\"data\", \"unfilt_counts.csv.gz\")\n) |>\n  as.matrix()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 57808 Columns: 6\n── Column specification ────────────────────────────────────\nDelimiter: \",\"\ndbl (6): mock_rna_A, mock_rna_B, mock_rna_C, 8430_rna_A,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndf <- tibble(\n  variance = rowVars(d),\n  mean = rowMeans(d)\n)\n\nggplot(df) +\n  geom_point(aes(x = mean, y = variance)) +\n  scale_y_log10(limits = c(1, 1e9)) +\n  scale_x_log10(limits = c(1, 1e9)) +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") +\n  theme_cowplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in scale_y_log10(limits = c(1, 1e+09)): log-10\ntransformation introduced infinite values.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in scale_x_log10(limits = c(1, 1e+09)): log-10\ntransformation introduced infinite values.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 6367 rows containing missing values or values\noutside the scale range (`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-22_files/figure-revealjs/plt-mean-var-1.png){fig-alt='examine counts' width=960}\n:::\n:::\n\n\n-   data points do not fall on the diagonal, *mean* != *var*\n\n-   for highly expressed genes, *var* \\> *mean*\n\n-   lowly expressed genes have more scatter i.e. “heteroscedasticity”.\n\n[Why do we use the negative binomial distribution for analysing RNAseq data?](http://bridgeslab.sph.umich.edu/posts/why-do-we-use-the-negative-binomial-distribution-for-rnaseq)\n\n[Why sequencing data is modeled as a negative binomial](https://bioramble.wordpress.com/2016/01/30/why-sequencing-data-is-modeled-as-negative-binomial/)\n\n## DEseq Model {.smaller}\n\n![](https://hbctraining.github.io/DGE_workshop/img/NB_model_formula.png)\n\nwhere counts $K_{ij}$ for gene `i`, sample `j` are modeled using a negative binomial distribution with fitted mean $\\mu_{ij}$ and a gene-specific dispersion parameter $\\alpha_i$. The fitted mean is composed of a sample-specific size factor $s_{j}$ and a parameter $q_{ij}$ proportional to the expected true concentration of fragments for sample `j`.\n\n## DESeq2 {.smaller}\n\n::::: columns\n::: {.column width=\"50%\"}\n$$\\log_2(q_{ij}) = x_{j.} \\beta_i$$ The coefficients $\\beta_{i}$ give log2 fold changes for gene `i` \\`for each column of the model matrix X. Note that the model can be generalized to use sample- and gene-dependent normalization factors $s_{ij}$.\n:::\n\n::: {.column width=\"50%\"}\n![](https://hbctraining.github.io/DGE_workshop/img/deseq2_workflow_separate.png)\n:::\n:::::\n\n## Scaling between samples {.smaller}\n\n::::: columns\n::: {.column width=\"50%\"}\nThe counts divided by sample-specific size factors determined by median ratio of gene counts relative to geometric mean per gene.\n\n-   Step 1: creates a pseudo-reference sample (row-wise geometric mean)\n\n-   Step 2: calculates ratio of each sample to the reference\n\n-   Step 3: calculate the normalization factor for each sample (size factor)\n:::\n\n::: {.column width=\"50%\"}\n![](https://hbctraining.github.io/DGE_workshop/img/normalization_methods_composition.png)\n:::\n:::::\n\n## estimateSizeFactors {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nd <- read_csv(here(\"data\", \"unfilt_counts.csv.gz\")) |> as.matrix()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 57808 Columns: 6\n── Column specification ────────────────────────────────────\nDelimiter: \",\"\ndbl (6): mock_rna_A, mock_rna_B, mock_rna_C, 8430_rna_A,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nestimateSizeFactorsForMatrix(counts = d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmock_rna_A mock_rna_B mock_rna_C 8430_rna_A 8430_rna_B \n 0.9248615  0.8867074  1.0318455  1.0693342  1.0238999 \n8430_rna_C \n 1.1038130 \n```\n\n\n:::\n:::\n\n\n## Gene-wise dispersion {.smaller}\n\nWe need to generate accurate estimates of within-group variation for each gene...but usually have only 3 replicates making it hard to estimate reliably.\n\nDESeq2 shares information across genes to generate more accurate estimates of variation based on the mean expression level of the gene using a method called ‘shrinkage’. DESeq2 assumes that genes with similar expression levels have similar dispersion.\n\nEstimating the dispersion for each gene separately:\n\nTo model the dispersion based on expression level (mean counts of replicates), the dispersion for each gene is estimated using maximum likelihood estimation. In other words, given the count values of the replicates, the most likely estimate of dispersion is calculated.\n\n[Count normalization](https://hbctraining.github.io/DGE_workshop/lessons/02_DGE_count_normalization.html)\n\n[Comprehensive explanation of DESeq2 steps](https://hbctraining.github.io/DGE_workshop/lessons/04_DGE_DESeq2_analysis.html)\n\n## Design considerations\n\n![](/img/block-rna/auer.jpg)\n\n## Remember ENCODE {.smaller}\n\nA study compared mRNA expression profiles of many human and mouse tissues. One of their key findings:\n\n> GENE EXPRESSION IS MORE SIMILAR AMONG TISSUES WITHIN A SPECIES THAN BETWEEN CORRESPONDING TISSUES OF THE TWO SPECIES\n\n![](https://f1000researchdata.s3.amazonaws.com/manuscripts/7019/9f5f4330-d81d-46b8-9a3f-d8cb7aaf577e_figure1.gif)\n\n## Power: depth vs reps {.smaller}\n\n::::: columns\n::: {.column .nonincremental width=\"50%\"}\nReplicates allow us to:\n\n-   estimate variation for each gene\n-   randomize out unknown covariates\n-   spot outliers\n-   improve precision of expression and fold-change estimates\n\n[RNA-seq power calculation](https://cqs-vumc.shinyapps.io/rnaseqsamplesizeweb/)\n:::\n\n::: {.column width=\"50%\"}\n![](/img/block-rna/de_replicates_img2.png)\n:::\n:::::\n",
    "supporting": [
      "slides-22_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}