{
  "hash": "86104b2b642ca276e9751d85600dad47",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp - Day 5\"\nsubtitle: \"more ggplot2\"\nauthor: \"{{< var instructor.block.bootcamp-r >}}\"\n---\n\n\n\n## Class 4 & 5 outline {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Introduce ggplot2 & today's data sets (Exercise 1)\n- Understand the basics of ggplot2 (Exercise 2, 3)\n- Geom functions (Exercise 4-8)\n- Geom_point properties (Exercise 9)\n- Position adjustments (Exercise 10)\n- Coordinate and Scale Functions (Exercise 11)\n- Zooming into a plot (Exercise 12)\n:::\n\n::: {.column width=\"50%\"}\n- Faceting (Exercise 13)\n- Themes (Exercise 14)\n- Labels & Legends (Exercise 15)\n- Adding lines to plots (Exercise 16)\n- Making multi-panel figures (Exercise 17)\n- Saving a plot (Exercise 18)\n:::\n\n::::\n\n## shape, size, fill, color, and transparency - Exercise 9\n\nR has 25 built in shapes that are identified by numbers.\n\nSome are similar: 0, 15, and 22 are all squares, but interact differently with\n`color` and `fill` aesthetics.\n\nHollow shapes have a border determined by `color`, solid shapes (15-18) are\nfilled with `color`, an the filled shapes (21-24) have `color` border and `fill`\ninside.\n\n![](../img/ggplot2/ggplot-shapes.png)\n\n---\n\nGet a diamonds subset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds_subset <- sample_n(diamonds, 1000)\n```\n:::\n\n\n---\n\nNote that aesthetics can also be defined *within* a geom.\n\nThis is useful if you use two different geoms that share an aesthetic.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(\n    x = carat,\n    y = price\n  )\n) +\n  geom_point(\n    aes(\n      fill = cut,\n      size = depth\n    ),\n    alpha = 0.8,\n    shape = 24,\n    color = \"white\"\n  )\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-3-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Position adjustments - Exercise 10\n\nPosition adjustments determine how to arrange geoms that would otherwise occupy the same space.\n\n![](../img/ggplot2/ggplot-position.png)\n\n---\n\nA stacked bar chart.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds,\n  aes(\n    x = cut,\n    fill = clarity\n  )\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-4-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nDodged bars are easier to read (proportions are clearer)\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds,\n  aes(\n    x = cut,\n    fill = clarity\n  )\n) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-5-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Coordinate and Scale Functions - Exercise 11\n\n* The coordinate system determines how the x and y aesthetics combine to position elements in the plot. The default coordinate system is Cartesian (`coord_cartesian()`), which can be tweaked with `coord_map()`, `coord_fixed()`, `coord_flip()`, and `coord_trans()`, or completely replaced with `coord_polar()`.\n\n* Scales control the details of how data values are translated to visual properties. There are 20+ scale functions. We will look at one; the ggplot2 cheatsheet is your friend for the rest.\n\n---\n\nLogarithmic axes - 1\n\nNote the difference between axis labels in these two examples.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(carat, price)\n) +\n  geom_point() +\n  coord_trans(x = \"log10\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `coord_trans()` was deprecated in ggplot2 4.0.0.\nâ„¹ Please use `coord_transform()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-6-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nLogarithmic axes - 2\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(carat, price)\n) +\n  geom_point() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-7-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nFlipping coordinate system (swapping `x` and `y`)\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds,\n  aes(x = cut)\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-8-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nNow flip the axis.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nggplot(\n  diamonds,\n  aes(x = cut)\n) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-9-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nBrief aside: ggplot can handle on-the-fly data transformations.\n\nHere we log-transform carat and convert USD to CAD.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(\n    x = log10(carat),\n    y = price * 1.32\n  )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-10-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Zooming into a plot - Exercise 12\n\n---\n\nWe might want to change the limits of x or y axes to zoom in.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(carat, price)\n) +\n  geom_point(alpha = 0.5) +\n  xlim(0, 2) +\n  ylim(0, 5000)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 261 rows containing missing values or values\noutside the scale range (`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-11-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Faceting to plot subsets of data into separate panels - Exercise 13\n\n\"Facets\" are a powerful tool to subdivide a plot based on the values of one or more discrete variables.\n\n![](../img/ggplot2/ggplot-facet.png)\n\n---\n\nA density plot we've seen before.\n\n**Which variables can we use to subdivide the data?**\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(\n  diamonds,\n  aes(\n    x = carat,\n    fill = cut\n  )\n) +\n  geom_density(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-12-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nFaceted by `cut`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"12-15\"}\nggplot(\n  diamonds,\n  aes(\n    x = log(price),\n  )\n) +\n  geom_density(\n    fill = \"blue\",\n    color = \"blue\",\n    alpha = 0.2\n  ) +\n  facet_wrap(\n    ~cut,\n    nrow = 1\n  )\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-13-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n. . .\n\n---\n\nLet's also use `facet_grid()` to facet by two variables.\n\nFaceted by `clarity` and `cut`.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"12-14\"}\nggplot(\n  diamonds,\n  aes(\n    x = log(price)\n  )\n) +\n  geom_density(\n    fill = \"blue\",\n    color = \"blue\",\n    alpha = 0.2\n  ) +\n  facet_grid(\n    clarity ~ cut\n  )\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-14-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nScatter plot with facets.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n#|\n#| fig.alt: \"Description of the plot - PLEASE FILL IN\"\nggplot(\n  diamonds,\n  aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = .05) +\n  facet_wrap(\n    ~cut,\n    nrow = 1\n  )\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Themes - Exercise 14\n\nThemes can significantly affect the appearance of your plot. Thanksfully, there are a lot to choose from.\n\n![](../img/ggplot2/ggplot-themes.png)\n\n---\n\nScatter plot with default theme.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-16-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nChange the theme with `theme_bw()`.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\nggplot(\n  diamonds_subset,\n  aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-17-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\n**My go-to is `cowplot::theme_cowplot()`.**\n\nIt implements much of the advice in the \"Dataviz\" book, i.e.. YOUR LABELS ARE TOO\nSMALL.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8) +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-18-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n. . .\n\nWe're not going to cover it, but you can also customize pre-existing themes.\n\n## Labels & Legends - Exercise 15\n\n![](../img/ggplot2/ggplot-labels-legends.png)\n\n---\n\nUse `labs()` to add / change plot labels.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"10-17\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = fct_reorder(cut, log(price)),\n    y = log(price)\n  )\n) +\n  geom_boxplot(fill = \"lightblue\") +\n  labs(\n    x = \"Cut\",\n    y = \"Price (log)\",\n    color = \"Cut\",\n    title = \"Distribution of diamond prices by cut\",\n    subtitle = \"If you liked it then you shoulda put a ring on it\",\n    caption = \"Source: diamonds dataset from ggplot2\"\n  ) +\n  theme_cowplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nIgnoring unknown labels:\nâ€¢ colour : \"Cut\"\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-19-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n# *Additional points*\n\n## How to add a line to a plot? (Exercise 16)\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\np <- ggplot(\n  diamonds_subset,\n  aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8) +\n  theme_cowplot()\n\np + geom_line()\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-20-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nAlso try:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + geom_hline(aes(yintercept = 5000))\np + geom_vline(aes(xintercept = 2))\np + geom_smooth(method = lm)\np + geom_abline(aes(intercept = 0.5, slope = 5000))\n```\n:::\n\n\n## How to combine multiple plots into a figure? (Exercise 17)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n# `plot_grid()` is from `cowplot`\nplot_grid(\n  p,\n  p,\n  p,\n  p,\n  labels = c(\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\"\n  ),\n  nrow = 2\n)\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-22-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nWe have 4 legends - can they be condensed?\n\nYes, but it is not exactly straightforward.\n\n**need to scroll below**\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# fetch the legend for `p1`\nlegend <- get_legend(\n  p + theme(legend.position = \"bottom\")\n)\n\np <- p + theme(legend.position = \"none\")\n\n# first `plot_grid` builds the panels\npanels <- plot_grid(\n  p,\n  p,\n  p,\n  p,\n  labels = c(\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\"\n  ),\n  nrow = 2\n)\n\n# second `plot_grid` adds the legend to the panels\nplot_grid(\n  panels,\n  legend,\n  ncol = 1,\n  rel_heights = c(1, .1)\n)\n```\n\n::: {.cell-output-display}\n![](slides-05_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n## Saving plots (Exercise 18)\n\nSaves last plot as 5' x 5' file named \"plot_final.png\" in working directory.\n\nMatches file type to file extension.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(here(\"img/plot_final.png\"), width = 5, height = 5)\n```\n:::\n\n",
    "supporting": [
      "slides-05_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}