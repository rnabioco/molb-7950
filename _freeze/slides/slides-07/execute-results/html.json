{
  "hash": "27d215d371a8d5a8251c29cb85457fed",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp - Class 7\"\nsubtitle: \"Tidyverse odds & ends\"\nauthor: \"{{< var instructor.block.bootcamp-r >}}\"\n---\n\n## Class 7 outline\n\n* String manipulation with `stringr`\n* Factor operations with `forcats`\n* Join functions with `dplyr`\n* Advanced plotting with `ggplot2`\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\n# overwrite as tibble\npenguins <- as_tibble(penguins)\n```\n:::\n\n\n# String operations\n\n## Combining strings with `str_c()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nstr_c(\"letter: \", letters[1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"letter: a\" \"letter: b\" \"letter: c\" \"letter: d\"\n[5] \"letter: e\"\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\npenguins |>\n  mutate(\n    id = str_c(species, island, sep = \"_\"),\n    label = str_c(species, \" (\", year, \")\")\n  ) |>\n  select(species, island, year, id, label)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   species island     year id               label        \n   <fct>   <fct>     <int> <chr>            <chr>        \n 1 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 2 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 3 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 4 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 5 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 6 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 7 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 8 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n 9 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n10 Adelie  Torgersen  2007 Adelie_Torgersen Adelie (2007)\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n::: {.notes}\n`str_c()` is similar to `paste` and `paste0` but the behavior is more consistent.\n:::\n\n## Detecting patterns with `str_detect()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nstr_detect(\"A\", LETTERS[1:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10] FALSE\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmtcars_tbl <-\n  rownames_to_column(mtcars, \"name\") |>\n  as_tibble()\n\n# find the Mercedes Benz's\nfilter(\n  mtcars_tbl,\n  str_detect(name, \"Merc\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 12\n  name         mpg   cyl  disp    hp  drat    wt  qsec    vs\n  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Merc 240D   24.4     4  147.    62  3.69  3.19  20       1\n2 Merc 230    22.8     4  141.    95  3.92  3.15  22.9     1\n3 Merc 280    19.2     6  168.   123  3.92  3.44  18.3     1\n4 Merc 280C   17.8     6  168.   123  3.92  3.44  18.9     1\n5 Merc 450SE  16.4     8  276.   180  3.07  4.07  17.4     0\n6 Merc 450SL  17.3     8  276.   180  3.07  3.73  17.6     0\n7 Merc 450S…  15.2     8  276.   180  3.07  3.78  18       0\n# ℹ 3 more variables: am <dbl>, gear <dbl>, carb <dbl>\n```\n\n\n:::\n:::\n\n\n## Splitting strings with `str_split()` {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nids <- c(\"x-1\", \"x-2\", \"y-1\", \"y-2\")\nstr_split(ids, \"-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"x\" \"1\"\n\n[[2]]\n[1] \"x\" \"2\"\n\n[[3]]\n[1] \"y\" \"1\"\n\n[[4]]\n[1] \"y\" \"2\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# just the first parts\nstr_split_i(ids, '-', 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x\" \"x\" \"y\" \"y\"\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n# create some sample data\ndf <- tribble(\n  ~ sample_ids,\n  \"gene_1_treatment\",\n  \"gene_2_control\",\n  \"gene_3_treatment\"\n)\n\nmutate(\n  df,\n  split_parts = str_split(sample_ids, \"_\"),\n  gene_part = map_chr(split_parts, ~ .x[1]),\n  number_part = map_chr(split_parts, ~ .x[2]),\n  condition = map_chr(split_parts, ~ .x[3])\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  sample_ids     split_parts gene_part number_part condition\n  <chr>          <list>      <chr>     <chr>       <chr>    \n1 gene_1_treatm… <chr [3]>   gene      1           treatment\n2 gene_2_control <chr [3]>   gene      2           control  \n3 gene_3_treatm… <chr [3]>   gene      3           treatment\n```\n\n\n:::\n:::\n\n\n# Factor operations\n\n## Counting factor levels with `fct_count()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n# equivalent with dplyr\npenguins |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nfct_count(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  f             n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n## Reordering factors with `fct_reorder()`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  penguins,\n  aes(\n    x = species,\n    y = body_mass\n  )\n) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-revealjs/unnamed-chunk-10-1.png){fig-alt='Bar plot showing penguin species counts, ordered by frequency from lowest to highest' width=960}\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  penguins,\n  aes(\n    x = fct_reorder(\n      species,\n      body_mass,\n      .fun = sd,\n      na.rm = TRUE\n    ),\n    y = body_mass\n  )\n) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-revealjs/unnamed-chunk-11-1.png){fig-alt='Bar plot showing penguin species counts, ordered by frequency from lowest to highest' width=960}\n:::\n:::\n\n\n## Lumping infrequent levels with `fct_lump()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n# create some sample data with many levels.\n# how many rows / cols are in this tibble?\nsample_data <-\n  tibble(\n    category = sample(\n      letters[1:10],\n      100,\n      replace = TRUE\n    )\n  )\n```\n:::\n\n\n---\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmutate(\n  sample_data,\n  lumped = fct_lump_n(category, n = 3)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 2\n   category lumped\n   <chr>    <fct> \n 1 f        Other \n 2 a        Other \n 3 h        h     \n 4 b        Other \n 5 a        Other \n 6 c        Other \n 7 d        Other \n 8 b        Other \n 9 a        Other \n10 h        h     \n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmutate(\n  sample_data,\n  lumped = fct_lump_n(category, n = 3)\n) |>\n  count(lumped)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  lumped     n\n  <fct>  <int>\n1 e         14\n2 h         15\n3 i         12\n4 Other     59\n```\n\n\n:::\n:::\n\n\n::: {.aside}\nDo your numbers look different? `sample()` is not reproducible by default.\n:::\n\n## Aside on `sample()` and reproducibility {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n# run this several times\nsample(0:100, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 56 38 86 34 30 48 71 14 42 61\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(0:100, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 44  9 60 59 54 65  5 10  6  4\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n# now make `sample()` reproducible.\n# you have the set the seed each time.\n\nset.seed(42) # set the seed for reproducibility\nsample(0:100, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  48  64  24  73  17 100  46  23  70  88\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(42)\nsample(0:100, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  48  64  24  73  17 100  46  23  70  88\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(0:100, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 36 19 25  2 40 88 26 35  4 83\n```\n\n\n:::\n:::\n\n\n::: {.aside}\nthis also applies to `rnorm()`, `runif()`, and other random number generation functions.\n:::\n\n# Join operations\n\n## Understanding joins\n\nJoins combine data from two tables based on matching keys.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n\n```{.r .cell-code}\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n:::\n\n\n## `left_join()` - keep all rows from left table\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  left_join(\n    band_instruments,\n    by = \"name\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n\n\n:::\n:::\n\n\nMost common join - keeps all observations from the \"primary\" table.\n\n## `inner_join()` - keep only matching rows\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  inner_join(\n    band_instruments,\n    by = \"name\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n\n\n:::\n:::\n\n\nOnly keeps rows that exist in both tables.\n\n## `full_join()` - keep all rows from both tables\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  full_join(\n    band_instruments,\n    by = \"name\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n\n\n:::\n:::\n\n\nKeeps everything, filling missing values with `NA`.\n\n# Advanced plotting\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\nlibrary(patchwork)\n```\n:::\n\n\n## scale functions in ggplot2 {.smaller}\n\n- `scale_color_brewer()` and `scale_fill_brewer()` control `color` and `fill` aesthetics.\n- See available [ggplot2 brewer palettes](https://ggplot2.tidyverse.org/reference/scale_brewer.html#palettes)\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\np1 <- ggplot(\n  mtcars_tbl,\n  aes(\n    x = mpg,\n    y = hp,\n    # why do we `factor` here?\n    color = factor(cyl)\n  )\n) +\n  geom_point(size = 5) +\n  theme_cowplot()\n\np1\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-revealjs/unnamed-chunk-22-1.png){fig-alt='Example of a ggplot2 scatter plot with points colored by number of cylinders, using the cowplot theme' width=960}\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\np1 + scale_color_brewer(palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\np1 + scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n## Combining multiple plots into a figure? {.smaller}\n\nUse the [`{patchwork}` package](https://patchwork.data-imaginist.com/).\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n(p1 + p1) /\n  (p1 + p1) +\n  plot_annotation(tag_levels = 'A') +\n  plot_layout(guides = 'collect')\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-revealjs/unnamed-chunk-25-1.png){fig-alt='Example of combining multiple ggplot2 plots into a single figure using the patchwork package' width=960}\n:::\n:::\n\n\n## Saving plots\n\nSaves last plot as 5' x 5' file named `plot_final.png` in working directory.\n\nMatches file type to file extension (`*.png`, `*.jpeg`, `*.pdf`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# default is to save last plot in the buffer\n# can also specify with the `plot` argument\nggsave(\n  filename = here(\"img/plot_final.png\"),\n  plot = last_plot(),\n  width = 5,\n  height = 5\n)\n```\n:::\n\n",
    "supporting": [
      "slides-07_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}