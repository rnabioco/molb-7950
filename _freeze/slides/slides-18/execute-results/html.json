{
  "hash": "224911f63a47deeb41dce4296543a45f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chromatin accessibility II\"\nsubtitle: \"Meta-plots and heatmaps\"\nauthor: \"{{< var instructor.block.dna >}}\"\nformat: revealjs\n---\n\n## Genomewide chromatin analysis with meta-plots and heatmaps\n\nLast class we saw what the different methods to profile chromatin\naccessibility can tell us about general chromatin structure and possible regulation\nat specific regions in a small portion of a chromosome.\n\nWe also want to make sure these conclusions are valid throughout the genome.\nSince we want to keep the file sizes small, we will ask if they are valid across\nan entire chromosome.\n\n## Load libraries {.smaller}\n\nFirst we will plot the profiles of all our data sets relative to the\ntranscription start site (TSS), where all the action seems to be happening.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(cowplot)\n\n# `glue` is a handy library for plot annotations\nlibrary(glue)\n\nlibrary(valr)\nlibrary(ComplexHeatmap)\n```\n:::\n\n\n## Load data\n\nFirst, we need to load relevant files:\n\n-   `yeast_tss_chrII.bed.gz` contains transcription start sites (TSS) for genes on yeast chromosome 2.\n-   `sacCer3.chrom.sizes` contains the sizes of all yeast chromosomes, needed for some of the calculations we'll do. We'll grab this from the UCSC download site.\n\n`read_bed()` and `read_genom()` are valr functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyeast_tss <- read_bed(\n  here(\"data/block-dna/yeast_tss_chrII.bed.gz\")\n)\n\nurl <- \"https://hgdownload.soe.ucsc.edu/goldenPath/sacCer3/bigZips/sacCer3.chrom.sizes\"\ngenome <- read_genome(url)\n```\n:::\n\n\n## Load signals {.smaller}\n\nNext we'll load bigWigs for the ATAC and MNase experiments, containing either short or long fragments.\n\nRecall that the information encoded in short and long fragments should be reflected in our interpretations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_tbl <-\n  tibble(\n    file_name = c(\n      \"yeast_mnase_lt50.bw\",\n      \"yeast_mnase_134_160.bw\",\n      \"yeast_atac_lt120.bw\",\n      \"yeast_atac_gt120.bw\"\n    ),\n    sample_type = c(\n      \"MNase_Short\",\n      \"MNase_Long\",\n      \"ATAC_Short\",\n      \"ATAC_Long\"\n    )\n  ) |>\n  mutate(\n    file_path = here(\"data/block-dna\", file_name),\n    big_wig = purrr::map(\n      file_path,\n      \\(x) read_bigwig(x)\n    )\n  ) |>\n  select(sample_type, big_wig)\n```\n:::\n\n\n# Meta-plots\n\n## Setting up regions for a meta-plot\n\nNext, we need to set up some windows for analyzing signal relative to each TSS.\nThis is an important step that will ultimately impact our interpretations.\n\nIn genomic meta-plots, you first decide on a window size relevant to the\nfeatures you are measuring, and then make \"windows\" around a reference point,\nspanning some distance both up- and downstream. If the features involve gene\nfeatures, we also need to take strand into account.\n\n## Setting up regions for a meta-plot\n\nReference points could be:\n\n- transcription start or end sites\n- boundaries of exons and introns\n- enhancers\n- centromeres and telomeres\n\n## Setting up regions for a meta-plot\n\nThe window size should be relevant the reference points, such that small- or\nlarge-scale features are emphasized in the plot. Moreover, the window typically\nspans some distance both up- and downstream of the reference points.\n\n## Setting up regions for a meta-plot\n\nOnce the window size has been decided, the next step is to make \"sub-windows\"\naround a reference point. If gene features are involved, we also need to take\nstrand into account.\n\n(The state of genome annotation directly influences the quality of the meta-plot\nor heatmap.)\n\n## Setting up regions for a meta-plot\n\nFor small features like transcription factor binding sites (8-20 bp), you might\nset up smaller windows (maybe 1 bp) at a distance \\~20 bp up- and downstream of\na reference point.\n\nFor larger features like nucleosome positions or chromatin domains, you might\nset up larger windows (\\~200 bp) at distances up to \\~10 kbp up- and downstream\nof a set of reference points.\n\n## Metaplot workflow\n\n![Metaplot workflow overview](../img/block-dna/metaplot-workflow.png)\n\n## Chromatin accessibility around transcription start sites (TSSs) {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nregion_size_total <- 1500\nregion_size_half <- region_size_total / 2\nwin_size <- 10\n\n# need a function that generates a sequence of numbers\nwin_coords <- seq(\n  -region_size_half,\n  region_size_half,\n  win_size\n)\n\nwin_coords\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] -750 -740 -730 -720 -710 -700 -690 -680 -670 -660 -650\n [12] -640 -630 -620 -610 -600 -590 -580 -570 -560 -550 -540\n [23] -530 -520 -510 -500 -490 -480 -470 -460 -450 -440 -430\n [34] -420 -410 -400 -390 -380 -370 -360 -350 -340 -330 -320\n [45] -310 -300 -290 -280 -270 -260 -250 -240 -230 -220 -210\n [56] -200 -190 -180 -170 -160 -150 -140 -130 -120 -110 -100\n [67]  -90  -80  -70  -60  -50  -40  -30  -20  -10    0   10\n [78]   20   30   40   50   60   70   80   90  100  110  120\n [89]  130  140  150  160  170  180  190  200  210  220  230\n[100]  240  250  260  270  280  290  300  310  320  330  340\n[111]  350  360  370  380  390  400  410  420  430  440  450\n[122]  460  470  480  490  500  510  520  530  540  550  560\n[133]  570  580  590  600  610  620  630  640  650  660  670\n[144]  680  690  700  710  720  730  740  750\n```\n\n\n:::\n:::\n\n\n## Chromatin accessibility around transcription start sites (TSSs) {.smaller}\n\nNext, we'll use two valr functions to expand the window of the reference\npoint (`bed_slop()`) and then break those windows into evenly spaced intervals\n(`bed_makewindows()`).\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nyeast_tss |>\n  bed_slop(genome, both = region_size_half) |>\n  bed_makewindows(win_size = win_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,887 × 7\n   chrom start   end name    score strand .win_id\n   <chr> <int> <int> <chr>   <chr> <chr>    <int>\n 1 chrII  9800  9810 YBL107C .     -            1\n 2 chrII  9810  9820 YBL107C .     -            2\n 3 chrII  9820  9830 YBL107C .     -            3\n 4 chrII  9830  9840 YBL107C .     -            4\n 5 chrII  9840  9850 YBL107C .     -            5\n 6 chrII  9850  9860 YBL107C .     -            6\n 7 chrII  9860  9870 YBL107C .     -            7\n 8 chrII  9870  9880 YBL107C .     -            8\n 9 chrII  9880  9890 YBL107C .     -            9\n10 chrII  9890  9900 YBL107C .     -           10\n# ℹ 50,877 more rows\n```\n\n\n:::\n:::\n\n\n## Chromatin accessibility around transcription start sites (TSSs)\n\nAt this point, we also address the fact that the TSS data are stranded. Can someone describe what the issue is here, based on the figure above?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntss_win_tbl <-\n  yeast_tss |>\n  bed_slop(genome, both = region_size_half) |>\n  bed_makewindows(win_size = win_size) |>\n  mutate(\n    win_coord = case_when(\n      strand == \"-\" ~ rev(win_coords),\n      .default = win_coords\n    ),\n    .by = name\n  ) |>\n  select(-.win_id, -score, -strand)\n```\n:::\n\n\n## Chromatin accessibility around transcription start sites (TSSs) {.smaller}\n\nThis next step uses valr `bed_map()`, to calculate the total signal for each\nwindow by intersecting signals from the bigWig files.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nacc_tbl <-\n  acc_tbl |>\n  mutate(\n    tss_win_sum = purrr::map(\n      big_wig,\n      ~ {\n        bed_map(\n          tss_win_tbl,\n          .x,\n          win_signal = sum(value, na.rm = TRUE)\n        )\n      }\n    )\n  )\n\nacc_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  sample_type big_wig               tss_win_sum          \n  <chr>       <list>                <list>               \n1 MNase_Short <tibble [17,738 × 4]> <tibble [50,887 × 6]>\n2 MNase_Long  <tibble [69,120 × 4]> <tibble [50,887 × 6]>\n3 ATAC_Short  <tibble [44,852 × 4]> <tibble [50,887 × 6]>\n4 ATAC_Long   <tibble [51,906 × 4]> <tibble [50,887 × 6]>\n```\n\n\n:::\n:::\n\n\n## Chromatin accessibility around transcription start sites (TSSs) {.smaller}\n\nOnce we have the values from `bed_map()`, we can group by `win_coord` and\ncalculate a summary statistic for each window.\n\nRemember that `win_coord` is the same relative position for each TSS, so these\nnumbers represent a composite signal a the same position across all TSS.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntss_meta_tbl <-\n  select(acc_tbl, sample_type, tss_win_sum) |>\n  unnest(cols = c(tss_win_sum)) |>\n  summarize(\n    win_mean = mean(win_signal, na.rm = TRUE),\n    win_sd = sd(win_signal, na.rm = TRUE),\n    .by = c(win_coord, sample_type)\n  ) |>\n  replace_na(list(win_mean = 0, win_sd = 0))\n\ntss_meta_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 604 × 4\n   win_coord sample_type win_mean win_sd\n       <dbl> <chr>          <dbl>  <dbl>\n 1       750 MNase_Short     260.   301.\n 2       740 MNase_Short     264.   243.\n 3       730 MNase_Short     251.   218.\n 4       720 MNase_Short     244.   205.\n 5       710 MNase_Short     239.   231.\n 6       700 MNase_Short     238.   247.\n 7       690 MNase_Short     245.   231.\n 8       680 MNase_Short     255.   219.\n 9       670 MNase_Short     250.   282.\n10       660 MNase_Short     281.   360.\n# ℹ 594 more rows\n```\n\n\n:::\n:::\n\n\n## Meta-plot of signals around TSSs {.smaller}\n\nFinally, let's plot the data relative to TSS for each of the windows.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nn_tss <- length(unique(yeast_tss$name))\n\nggplot(\n  tss_meta_tbl,\n  aes(\n    x = win_coord,\n    y = win_mean\n  )\n) +\n  geom_line(linewidth = 1, color = \"red\") +\n  facet_wrap(\n    ~sample_type,\n    nrow = 2,\n    scales = \"free_y\"\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.x = element_text(\n      angle = 45,\n      vjust = 1,\n      hjust = 1\n    )\n  ) +\n  labs(\n    x = \"Position relative to TSS (bp)\",\n    y = \"Signal (mean of window sums)\",\n    title = \"Chromatin accessibility around transcription start sites\",\n    subtitle = glue(\"{n_tss} features on S. cerevisiae chrII\")\n  )\n```\n\n::: {.cell-output-display}\n![](slides-18_files/figure-revealjs/plot-meta-signals-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Interpreting the meta-plots\n\n- What is the direction of transcription in these meta-plots?\n\n- What are the features of chromatin near TSS measured by these different experimental conditions?\n\n- How do you interpret the increased signal of the +1 nucleosome in the \"MNase_Long\" condition, relative to e.g. -1, +2, +3, etc.?\n\n- What are the differences in ATAC and MNase treatments that lead to these distinctive patterns?\n\n# Heatmaps\n\n## Heatmap of signals around TSSs\n\nTo generate a heatmap, we need to reformat our data slightly.\n\nTake a look at `acc_tbl` and think about how you might reorganize the following way:\n\n- rows contain the data for individual loci (i.e., each TSS)\n- columns are ordered positions relative to the TSS (i.e., most upstream to most downstream)\n\n## Heatmap of signals around TSSs {.smaller}\n\nWe're going to plot a heatmap of the \"MNase_Long\" data. There are two ways\nto get these data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnase_tbl <- acc_tbl[acc_tbl$sample_type == \"MNase_Long\", ]$tss_win_sum[[1]]\n\nmnase_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,887 × 6\n   chrom start   end name    win_coord win_signal\n   <chr> <int> <int> <chr>       <dbl>      <dbl>\n 1 chrII  9800  9810 YBL107C       750       206.\n 2 chrII  9810  9820 YBL107C       740       410.\n 3 chrII  9820  9830 YBL107C       730       406.\n 4 chrII  9830  9840 YBL107C       720       406.\n 5 chrII  9840  9850 YBL107C       710       404.\n 6 chrII  9850  9860 YBL107C       700       370.\n 7 chrII  9860  9870 YBL107C       690       330.\n 8 chrII  9870  9880 YBL107C       680       269.\n 9 chrII  9880  9890 YBL107C       670       242.\n10 chrII  9890  9900 YBL107C       660       276.\n# ℹ 50,877 more rows\n```\n\n\n:::\n:::\n\n\n## Or, using dplyr / tidyr: {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmnase_tbl <-\n  filter(\n    acc_tbl,\n    sample_type == \"MNase_Long\"\n  ) |>\n  select(-big_wig) |>\n  unnest(cols = c(tss_win_sum))\n\nmnase_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,887 × 7\n   sample_type chrom start   end name   win_coord win_signal\n   <chr>       <chr> <int> <int> <chr>      <dbl>      <dbl>\n 1 MNase_Long  chrII  9800  9810 YBL10…       750       206.\n 2 MNase_Long  chrII  9810  9820 YBL10…       740       410.\n 3 MNase_Long  chrII  9820  9830 YBL10…       730       406.\n 4 MNase_Long  chrII  9830  9840 YBL10…       720       406.\n 5 MNase_Long  chrII  9840  9850 YBL10…       710       404.\n 6 MNase_Long  chrII  9850  9860 YBL10…       700       370.\n 7 MNase_Long  chrII  9860  9870 YBL10…       690       330.\n 8 MNase_Long  chrII  9870  9880 YBL10…       680       269.\n 9 MNase_Long  chrII  9880  9890 YBL10…       670       242.\n10 MNase_Long  chrII  9890  9900 YBL10…       660       276.\n# ℹ 50,877 more rows\n```\n\n\n:::\n:::\n\n\n## Heatmap of signals around TSSs {.smaller}\n\nEither way, now we need to reformat the data.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nmnase_tbl_wide <-\n  mnase_tbl |>\n  select(\n    name,\n    win_coord,\n    win_signal\n  ) |>\n  arrange(name, win_coord) |>\n  replace_na(\n    list(win_signal = 0)\n  ) |>\n  pivot_wider(\n    id_cols = name,\n    names_from = \"win_coord\",\n    values_from = \"win_signal\"\n  )\n\nmnase_tbl_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 337 × 152\n   name    `-750` `-740` `-730` `-720` `-710` `-700` `-690`\n   <chr>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 YBL001C   81.9   81.9   81.9   81.9   81.9   81.9  166. \n 2 YBL002W  368.   370.   364.   353.   175.   353.   349. \n 3 YBL003C  229.   459.   457.   452.   459.   465.   457. \n 4 YBL004W  284.   267.   269.   137.   259.   229.   208. \n 5 YBL005W  299.   314.   164.   164.   326.   322.   314. \n 6 YBL006C  173.   173.   339.   330.   333.   332.   353. \n 7 YBL009W  265.   265.   261.   250.   225.   213.   229. \n 8 YBL010C  225.   455.   459.   446.   427.   404.   381. \n 9 YBL011W  368.   328.   255.   196.   160.   141.   156. \n10 YBL014C   68.6  139.   133.   124.   124.   131.    68.6\n# ℹ 327 more rows\n# ℹ 144 more variables: `-680` <dbl>, `-670` <dbl>,\n#   `-660` <dbl>, `-650` <dbl>, `-640` <dbl>, `-630` <dbl>,\n#   `-620` <dbl>, `-610` <dbl>, `-600` <dbl>, `-590` <dbl>,\n#   `-580` <dbl>, `-570` <dbl>, `-560` <dbl>, `-550` <dbl>,\n#   `-540` <dbl>, `-530` <dbl>, `-520` <dbl>, `-510` <dbl>,\n#   `-500` <dbl>, `-490` <dbl>, `-480` <dbl>, …\n```\n\n\n:::\n:::\n\n\n## Heatmap of signals around TSSs\n\nOnce we have the data reformatted, we just convert to a matrix and feed it to\n`ComplexHeatmap::Heatmap()`.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nmnase_mtx <-\n  select(mnase_tbl_wide, -name) |>\n  as.matrix()\n\nComplexHeatmap::Heatmap(\n  mnase_mtx,\n  cluster_columns = FALSE,\n  show_row_dend = FALSE,\n  show_column_names = FALSE,\n  show_heatmap_legend = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](slides-18_files/figure-revealjs/heatmap-matrix-plot-1.png){width=960}\n:::\n:::\n\n\n## Interpreting meta-plots and heatmaps\n\nIt's worth considering what meta-plots and heatmaps *can* and *can't* tell you.\n\n1.  What are the similarities and differences between heatmaps and meta-plots?\n\n2.  What types of conclusions can you draw from each type of plot?\n\n3.  What are some features of MNase-seq and ATAC-seq that become more clear when\nlooking across many loci at the same time?\n\n4.  What are some hypotheses you can generate based on these plots?\n",
    "supporting": [
      "slides-18_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}