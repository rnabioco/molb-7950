{
  "hash": "636d67a165b6b3d15eaa7562de6f6265",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp - Day 4\"\nsubtitle: \"ggplot2\"\nauthor: \"{{< var instructor.block.bootcamp-r >}}\"\n---\n\n\n\n## Class 4 & 5 outline {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Introduce ggplot2 & today's data sets (Exercise 1)\n- Understand the basics of ggplot2 (Exercise 2, 3)\n- Geom functions (Exercise 4-8)\n- Geom_point properties (Exercise 9)\n- Position adjustments (Exercise 10)\n- Coordinate and Scale Functions (Exercise 11)\n- Zooming into a plot (Exercise 12)\n:::\n\n::: {.column width=\"50%\"}\n- Faceting (Exercise 13)\n- Themes (Exercise 14)\n- Labels & Legends (Exercise 15)\n- Adding lines to plots (Exercise 16)\n- Making multi-panel figures (Exercise 17)\n- Saving a plot (Exercise 18)\n:::\n\n::::\n\n## *ggplot2*\n\nggplot2 is based on the \"grammar of graphics\", the idea that you can build every graph from the same components: a data set, a coordinate system, and \"geoms\" - visual marks that represent data points.\n\n## Today's datasets\n\nIn this class, we will use a data set from ggplot2: `diamonds` contains thousands of gem prices and qualities.\n\nThere are many interesting data sets you can install as R packages for learning to manipulate and plot data:\n\n::: {.nonincremental}\n- [babynames](https://hadley.github.io/babynames/)\n- [gapminder](https://jennybc.github.io/gapminder/)\n- [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)\n:::\n\n## Getting familiar with the data - Exercise 1 {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     carat               cut        color        clarity          depth      \n Min.   :0.2000   Fair     : 1610   D: 6775   SI1    :13065   Min.   :43.00  \n 1st Qu.:0.4000   Good     : 4906   E: 9797   VS2    :12258   1st Qu.:61.00  \n Median :0.7000   Very Good:12082   F: 9542   SI2    : 9194   Median :61.80  \n Mean   :0.7979   Premium  :13791   G:11292   VS1    : 8171   Mean   :61.75  \n 3rd Qu.:1.0400   Ideal    :21551   H: 8304   VVS2   : 5066   3rd Qu.:62.50  \n Max.   :5.0100                     I: 5422   VVS1   : 3655   Max.   :79.00  \n                                    J: 2808   (Other): 2531                  \n     table           price             x                y         \n Min.   :43.00   Min.   :  326   Min.   : 0.000   Min.   : 0.000  \n 1st Qu.:56.00   1st Qu.:  950   1st Qu.: 4.710   1st Qu.: 4.720  \n Median :57.00   Median : 2401   Median : 5.700   Median : 5.710  \n Mean   :57.46   Mean   : 3933   Mean   : 5.731   Mean   : 5.735  \n 3rd Qu.:59.00   3rd Qu.: 5324   3rd Qu.: 6.540   3rd Qu.: 6.540  \n Max.   :95.00   Max.   :18823   Max.   :10.740   Max.   :58.900  \n                                                                  \n       z         \n Min.   : 0.000  \n 1st Qu.: 2.910  \n Median : 3.530  \n Mean   : 3.539  \n 3rd Qu.: 4.040  \n Max.   :31.800  \n                 \n```\n\n\n:::\n:::\n\n\n. . .\n\nAlso examine:\n\n```r\n?diamonds\nhead(diamonds)\nglimpse(diamonds)\nView(diamonds)\n```\n\n## The syntax of `ggplot()`\n\n`ggplot()` builds plots piece by piece.\n\nggplot divides a plot into three different fundamental parts:\n\nplot = _data_ + _coordinate-system_ + _geometry_.\n\n![](../img/ggplot2/ggplot-syntax.png)\n\n---\n\n**aesthetics** map variables in the data to visual\nproperties of the geom like `size`, `color`, and `x`\nand `y` locations.\n\n![](../img/ggplot2/ggplot-aesthetics.png)\n\n## Making a plot step-by-step (Exercise 2)\n\n---\n\nInitialize a plot with data.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(data = diamonds)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-3-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nNext, specify the coordinate system.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3-5\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    y = price\n  )\n)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-4-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nAdd a geom (`geom_point`).\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    y = price\n  )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-5-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nMap aesthetics to other variables.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"6-7\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut,\n    size = carat\n  )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-6-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nReduce overplotting by adjusting the transparency of points.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut,\n    size = carat\n  )\n) +\n  geom_point(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-7-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Looking under the hood of ggplot (Exercise 3) {.smaller}\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\np <- ggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut,\n    size = carat\n  )\n) +\n  geom_point(alpha = 0.2)\n\nsummary(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndata: carat, cut, color, clarity, depth, table, price, x, y, z\n  [53940x10]\nmapping:  x = ~carat, y = ~price, colour = ~cut, size = ~carat\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n-----------------------------------\ngeom_point: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n```\n\n\n:::\n:::\n\n\n## ggplot is powerfully simple for making complex plots\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds,\n  aes(x = carat)\n) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-9-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n. . .\n\nNote you can drop the `data` and `mapping` specifications, as `ggplot`\nexpects these as the first two arguments. See `?ggplot`.\n\n---\n\nWhy can't I just do this?\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nhist(diamonds$carat)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n. . .\n\nYou can. But the advantage of ggplot is that it is equally \"simple\" to make basic and complex plots.\n\nThe underlying grammar lets you exquisitely customize the appearance of your plot and easily generate *reproducible & publishable* figures.\n\n## Creating more complex plots\n\n![](../img/ggplot2/ggplot-layers.png)\n\n## Geom functions\n\n* Use a geom function to represent data points, use the geom aesthetic properties to represent variables.\n* Each function returns a plot layer.\n* There are many geoms in ggplot that are specific to plots with 1, 2, or 3 variables\n\n## Geom functions for one variable - Exercise 4\n\n![](../img/ggplot2/ggplot-1variable.png)\n\n---\n\nMake a bar plot.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut)\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-11-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nUpdate the bar plot aesthetics.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"3-6\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    fill = clarity\n  )\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-12-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nChange to a density plot.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat)\n) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-13-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nColor the density plot.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat)\n) +\n  geom_density(\n    fill = \"tomato1\"\n  )\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-14-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nPlot subsets by mapping `fill` to `cut`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    fill = cut\n  )\n) +\n  geom_density(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-15-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nUse `ggridges` to plot staggered subsets.\n\nhttps://wilkelab.org/ggridges/\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"9-10\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = carat,\n    y = cut,\n    fill = cut\n  )\n) +\n  # geom from `ggridges`\n  geom_density_ridges()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 0.0647\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-16-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## Geom functions for two variables\n\nWith two variables, depending on the nature of the data, you can have different\nkinds of geoms:\n\n  - discrete x, continuous y\n  - continuous x, continuous y\n  - continuous bivariate\n  - & others (check out the cheatsheet!)\n\n## discrete x, continuous y - Exercise 5\n\n![](../img/ggplot2/ggplot-geom-dx-cy.png)\n\n---\n\nMake a column plot.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    y = price\n  )\n) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-17-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nSame data with a box plot.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    y = price\n  )\n) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-18-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nBox plot, with fill color by cut.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    y = price,\n    fill = cut\n  )\n) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-19-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n. . .\n\nWhat about this plot is not ideal? (hint: how many ways is `cut` represented?)\n\n---\n\nViolin plot with fill color by cut.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    y = price,\n    fill = cut\n  )\n) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-20-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n## continuous x, continuous y - Exercise 6\n\n![](../img/ggplot2/ggplot-geom-cx-cy.png)\n\n---\n\nSubset diamonds to see points more clearly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds_subset <- diamonds |>\n  sample_n(size = 1000)\n```\n:::\n\n\n---\n\nMake a scatter plot.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-22-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\nNow add a smoothing line.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-23-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n---\n\nHere we can combine geoms to see points & the fit\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-24-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=960}\n:::\n:::\n\n\n# Class 4 End\n\n## continuous bivariate - Exercise 7\n\n![](../img/ggplot2/ggplot-geom-cont-bivar.png)\n\n---\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price\n  )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-25-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=288}\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price\n  )\n) +\n  geom_hex()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-26-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=288}\n:::\n:::\n\n\n## shape, size, fill, color, and transparency - Exercise 9\n\nR has 25 built in shapes that are identified by numbers.\n\nSome are similar: 0, 15, and 22 are all squares, but interact differently with `color` and `fill` aesthetics.\n\nHollow shapes have a border determined by `color`, solid shapes (15-18) are\nfilled with `color`, an the filled shapes (21-24) have `color` border and `fill`\ninside.\n\n![](../img/ggplot2/ggplot-shapes.png)\n\n---\n\nNote that aesthetics can also be defined *within* a geoms.\n\nThis is useful if you use two different geoms that share an aesthetic.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price\n  )\n) +\n  geom_point(\n    aes(\n      fill = cut,\n      size = depth\n    ),\n    alpha = 0.8,\n    shape = 24,\n    color = \"white\"\n  )\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-27-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n:::\n\n\n## Position adjustments - Exercise 10\n\nPosition adjustments determine how to arrange geoms that would otherwise occupy the same space.\n\n![](../img/ggplot2/ggplot-position.png)\n\n---\n\nA stacked bar chart.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    fill = clarity\n  )\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-28-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=480}\n:::\n:::\n\n\n---\n\nDodged bars are easier to read (proportions are clearer)\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, fill = clarity)\n) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-29-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=480}\n:::\n:::\n\n\n## Coordinate and Scale Functions - Exercise 11\n\nWe won't go into these functions too much today, but here is a brief overview:\n\n* The coordinate system determines how the x and y aesthetics combine to position elements in the plot. The default coordinate system is Cartesian ( coord_cartesian() ), which can be tweaked with coord_map() , coord_fixed() , coord_flip() , and coord_trans() , or completely replaced with coord_polar()\n\n* Scales control the details of how data values are translated to visual properties. There are 20+ scale functions. We will look at one; the ggplot2 cheatsheet is your friend for the rest.\n---\n\nLogarithmic axes - 1\n\nNote the difference between axis labels in these two examples.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(carat, price)\n) +\n  geom_point() +\n  coord_trans(x = \"log10\")\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-30-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=288}\n:::\n:::\n\n\n---\n\nLogarithmic axes - 2\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(carat, price)\n) +\n  geom_point() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-31-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=288}\n:::\n:::\n\n\n---\n\nFlipping coordinate system (swapping `x` and `y`)\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut)\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-32-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=480}\n:::\n:::\n\n\n---\n\nNow flip the axis.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut)\n) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-33-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=480}\n:::\n:::\n\n\n---\n\nBrief aside: ggplot can handle on-the-fly data transformations.\n\nHere we log-transform carat and convert USD to CAD.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  aes(\n    x = log10(carat),\n    y = price * 1.32\n  )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-34-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=288}\n:::\n:::\n\n\n## Zooming into a plot - Exercise 12\n\n---\n\nWe might want to change the limits of x or y axes to zoom in.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  diamonds_subset,\n  aes(carat, price)\n) +\n  geom_point(alpha = 0.5) +\n  xlim(0, 2) +\n  ylim(0, 5000)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 275 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-35-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=288}\n:::\n:::\n\n\n. . .\n\nYou can also use `coord_cartesian(xlim, ylim)`\n\n## Faceting to plot subsets of data into separate panels - Exercise 13\n\n\"Facets\" are a powerful tool to subdivide a plot based on the values of one or more discrete variables.\n\n![](../img/ggplot2/ggplot-facet.png)\n\n---\n\nDensity plot we've seen before. Which variables can we use to subdivide the data?\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, fill = cut)\n) +\n  geom_density(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-36-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=672}\n:::\n:::\n\n\n---\n\nFaceted by `cut`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = log(price), fill = cut)\n) +\n  geom_density(color = \"black\") +\n  facet_wrap(~cut, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-37-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=672}\n:::\n:::\n\n\n---\n\nScatter plot with facets.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = .05) +\n  facet_wrap(~cut, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-38-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=672}\n:::\n:::\n\n\n## Themes - Exercise 14\n\nThemes can significantly affect the appearance of your plot. Thanksfully, there are a lot to choose from.\n\n![](../img/ggplot2/ggplot-themes.png)\n\n---\n\nScatter plot with default theme.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-39-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n:::\n\n\n---\n\nChange the theme with `theme_bw()`.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-40-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n:::\n\n\n---\n\nMy go-to is `cowplot::theme_cowplot()`.\n\nIt implements much of the advice in the \"Dataviz\" book, e.g. YOUR LABELS ARE TOO\nSMALL.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8) +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-41-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n:::\n\n\n. . .\n\nWe're not going to cover it, but you can also customize pre-existing themes.\n\n## Labels & Legends - Exercise 15\n\n![](../img/ggplot2/ggplot-labels-legends.png)\n\n---\n\nUse `labs()` to add / change plot labels.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"10-17\"}\nggplot(\n  data = diamonds,\n  mapping = aes(\n    x = cut,\n    y = log(price),\n    fill = cut\n  )\n) +\n  geom_boxplot() +\n  labs(\n    x = \"Cut\",\n    y = \"Price (log)\",\n    color = \"Cut\",\n    title = \"Distribution of diamond prices by cut\",\n    subtitle = \"Data come from a random sample of 1000 diamonds\",\n    caption = \"Source: diamonds dataset from ggplot2\"\n  ) +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-42-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=480}\n:::\n:::\n\n\n# *Additional points*\n\n## How to add a line to a plot? (Exercise 16)\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  theme_cowplot()\n\np + geom_line()\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-43-1.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n\n```{.r .cell-code}\np + geom_hline(aes(yintercept = 5000))\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-43-2.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n\n```{.r .cell-code}\np + geom_vline(aes(xintercept = 2))\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-43-3.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n\n```{.r .cell-code}\np + geom_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-43-4.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n\n```{.r .cell-code}\np + geom_abline(aes(intercept = 0.5, slope = 5000))\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-43-5.png){fig-alt='Description of the plot - PLEASE FILL IN' width=384}\n:::\n:::\n\n\n## How to combine multiple plots into a figure? (Exercise 17)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1 <- p\nplot2 <- p + geom_hline(aes(yintercept = 5000))\nplot3 <- p + geom_vline(aes(xintercept = 2))\nplot4 <- p + geom_abline(aes(intercept = 0.5, slope = 5000))\n\nall_plots <- plot_grid(\n  plot1,\n  plot2,\n  plot3,\n  plot4,\n  labels = c(\"A\", \"B\", \"C\", \"D\"),\n  nrow = 2\n)\nall_plots\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-44-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# we have 4 legends, which is too many - can they be removed?\n# Yes, but it is not exactly straightforward\nlegend <- get_legend(plot1 + theme(legend.position = \"bottom\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in get_plot_component(plot, \"guide-box\"): Multiple components found;\nreturning the first one. To return all, use `return_all = TRUE`.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot1 <- p + theme(legend.position = \"none\")\nplot2 <- p +\n  geom_hline(aes(yintercept = 5000)) +\n  theme(legend.position = \"none\")\nplot3 <- p + geom_vline(aes(xintercept = 2)) + theme(legend.position = \"none\")\nplot4 <- p +\n  geom_abline(aes(intercept = 0.5, slope = 5000)) +\n  theme(legend.position = \"none\")\n\nall_plots <- plot_grid(\n  plot1,\n  plot2,\n  plot3,\n  plot4,\n  labels = c(\"A\", \"B\", \"C\", \"D\"),\n  nrow = 2\n)\nplot_final <- plot_grid(all_plots, legend, ncol = 1, rel_heights = c(1, .1))\nplot_final\n```\n\n::: {.cell-output-display}\n![](slides-04_files/figure-revealjs/unnamed-chunk-44-2.png){width=576}\n:::\n:::\n\n\nMore information on using plot_grid (from package `cowplot`) is [here](https://wilkelab.org/cowplot/articles/plot_grid.html)\n\n## Saving plots (Exercise 18)\n\nSaves last plot as 5’ x 5’ file named \"plot_final.png\" in working directory. Matches file type to file extension\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(here(\"img/plot_final.png\"), width = 5, height = 5)\n```\n:::\n\n",
    "supporting": [
      "slides-04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}