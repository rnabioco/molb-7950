{
  "hash": "2c60733319c5584027083ac3703356b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Improving your coding workflow with AI tools\"\nsubtitle: \"We welcome our AI overlords\"\nauthor: \"{{< var instructor.block.bootcamp-r >}}\"\ndate: last-modified\n---\n\n\n\n## Why do I want AI in my coding life?\n\n- Efficiency: Reduce time spent on repetitive tasks, debugging\n- Inspiration: Generate new approaches, solutions to problems\n- Learning tool: Explaining code patterns, best practices\n\n## AI Coding Assistant Landscape\n\n- Overview of major AI coding assistants (GitHub Copilot, Anthropic Claude, OpenAI tools)\n- Comparison of features and capabilities\n- Strengths and limitations\n\n### Examples\n\n- https://www.tidyverse.org/blog/2025/01/experiments-llm/\n- https://github.com/simonpcouch\n- https://github.com/hadley/workshop-llm-hackathon\n\n## Positron Overview\n\n- What is Positron? (RStudio's next-generation \"polyglot\" IDE)\n- Key features that differentiate it from RStudio\n- Benefits for R programmers\n\n## Setting up Positron\n\n- Where to download\n- Basic configuration\n- Key differences from RStudio interface\n\n## Continue Plugin ****Introduction****\n\n- What is Continue?\n- How it integrates with Positron\n- Basic functionality\n\n## Installing Continue in Positron\n\n- Step-by-step installation guide\n- Configuration options\n- Troubleshooting common issues\n\n## Setting up Anthropic API\n\n- Creating an Anthropic account\n- Generating and managing API keys\n- Security best practices\n\n## Connecting Continue to Anthropic API\n\n- Configuration steps\n- Testing the connection\n- Setting usage limits\n\n## Practical Use Cases\n\n- Code completion\n- Documentation generation\n- Refactoring assistance\n- Debugging help\n\n## Demo: Using AI for Code Completion\n\n- Live demonstration or screenshots\n- Example prompts and responses\n- Best practices\n\n## Demo: Using AI for Debugging\n\n- Example of a buggy code snippet\n- How to effectively ask for debugging help\n- Evaluating and implementing suggestions\n\n## Best Practices for AI Coding Assistance\n\n- Writing effective prompts\n- When to use (and when not to use) AI assistance\n- Validating AI-generated code\n\n## Ethical Considerations\n\n- Data privacy concerns\n- Over-reliance risks\n- Licensing and attribution issues\n\n## Resources and Next Steps\n\n- Documentation links\n- Community resources\n- Future developments to watch\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}