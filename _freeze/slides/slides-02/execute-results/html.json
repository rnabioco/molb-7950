{
  "hash": "cbf26d73ace3744275b66699211aeabd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp - Day 2\"\nsubtitle: \"Tidy data & tidyr\"\nauthor: \"{{< var instructor.block.bootcamp-r >}}\"\n---\n\n\n\n## Class 2 outline\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* Become familiar with \"tidyverse\" suite of packages\n* Introduce _readr_ (Exercise 1)\n* Introduce _tidyr_ (Exercise 2)\n* Tools for data exploration (Exercises 3-5)\n:::\n\n::: {.column width=\"50%\"}\n* Learn tidyr functions:\n* pivot_wider (Exercise 6)\n* pivot_longer (Exercise 7)\n* separate (Exercise 8 & 9)\n* unite (Exercise 10)\n* handling missing values\n:::\n\n::::\n\n# Tidying exercises\n\n## Data import with readr\n\n![](../img/readr/readr.png)\n\nN.B. note the difference between `readr::read_csv()` and the built-in `read.csv()`. Use the former.\n\n---\n\n![](../img/readr/readr-args.png)\n\n## finding files in a project with `here`\n\nThe `here` packages makes it easy to reference files in an R project.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nhere(\"data/syllabus.tsv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jayhesselberth/devel/rnabioco/molb-7950/data/syllabus.tsv\"\n```\n\n\n:::\n:::\n\n\n---\n\n### Paths identified by `here()` can be fed to e.g. `read_*` functions. {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_tsv(here(\"data/syllabus.tsv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 35 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (5): block, topic, instructor, location, title\ndttm (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 × 6\n   date                block    topic      instructor  location  title          \n   <dttm>              <chr>    <chr>      <chr>       <chr>     <chr>          \n 1 2025-08-25 00:00:00 Bootcamp R          Hesselberth AHSB 2201 Intro to R & R…\n 2 2025-08-26 00:00:00 Bootcamp R          Hesselberth AHSB 2201 Tidy data & ti…\n 3 2025-08-27 00:00:00 Bootcamp R          Hesselberth AHSB 2201 dplyr          \n 4 2025-08-28 00:00:00 Bootcamp R          Hesselberth AHSB 2201 ggplot2        \n 5 2025-08-29 00:00:00 Bootcamp R          Hesselberth AHSB 2201 ggplot2        \n 6 2025-09-01 00:00:00 <NA>     <NA>       <NA>        <NA>      NO CLASS - LAB…\n 7 2025-09-02 00:00:00 Bootcamp R          Hesselberth AHSB 2201 tidyverse odds…\n 8 2025-09-03 00:00:00 Bootcamp R          Hesselberth AHSB 2201 putting it all…\n 9 2025-09-04 00:00:00 Bootcamp R          Hesselberth AHSB 2201 putting it all…\n10 2025-09-05 00:00:00 Bootcamp Statistics Mukherjee   AHSB 2201 Stats intro an…\n# ℹ 25 more rows\n```\n\n\n:::\n:::\n\n\n## Data sets for tidying - Exercise 2\n\n* In this class, we will use the data sets that come with the tidyr package to explore all the functions provided by tidyr.\n\n* `table1`, `table2`, `table3`, `table4a`, `table4b`, and `table5` all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000.\n\n* Let's take a look at these data sets.\n\n## Getting familiar with the data - Exercise 3\n\nR provides many functions to examine features of data:\n\n  - `View()`: To open the table up in an excel-like interface - not recommended for large tables\n  - `class()`: what kind of object is it (high-level)?\n  - `typeof()`: what is an object data type (low-level)?\n  - `is_tibble()`: use `is` functions to query data type\n  - `str()`: what is the structure of the object?\n  - `attributes()`: does it have any metadata?\n\n. . .\n\nLet's use these to explore `table1`\n\n## Getting familiar with the data - Exercise 4 {.smaller}\n\nUseful functions for tibbles:\n\n- `head()` - shows first 6 rows\n- `tail()` - shows last 6 rows\n- `dim()` - returns the dimensions of data frame (i.e. number of rows and number of columns)\n- `nrow()` - number of rows\n- `ncol()` - number of columns\n- `names()` or `colnames()` - both show the names attribute for a data frame\n- `glimpse()`\n\n. . .\n\nUse these on `table1`\n\n## Exercise 5 - _summary_, _hist_, & _table_ {.smaller}\n\n`summary()`: A generic function used to produce result summaries of the results of various model fitting functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(table1) # summary of the whole table\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               year          cases          population       \n Length:6           Min.   :1999   Min.   :   745   Min.   :1.999e+07  \n Class :character   1st Qu.:1999   1st Qu.: 11434   1st Qu.:5.845e+07  \n Mode  :character   Median :2000   Median : 59112   Median :1.733e+08  \n                    Mean   :2000   Mean   : 91277   Mean   :4.901e+08  \n                    3rd Qu.:2000   3rd Qu.:179316   3rd Qu.:9.983e+08  \n                    Max.   :2000   Max.   :213766   Max.   :1.280e+09  \n```\n\n\n:::\n:::\n\n\n. . .\n\nyou can also summarize one variable, e.g. `summary(table1$cases)`\n\n---\n\n`hist()`: takes a vector and plots a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(table1$cases)\n```\n\n::: {.cell-output-display}\n![](slides-02_files/figure-revealjs/unnamed-chunk-5-1.png){width=384}\n:::\n:::\n\n\n---\n\n`table()`: uses classifying factors to build a contingency table of the counts for each factor combination.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(table2$year) # tally of one column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n1999 2000 \n   6    6 \n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(table2$year, table2$type) # two columns at a time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      \n       cases population\n  1999     3          3\n  2000     3          3\n```\n\n\n:::\n:::\n\n\n# Main verbs in tidyr\n\n## Tidying data\n\nThe four verbs (functions) to keep in mind for reshaping data with `tidyr` are:\n\n  - `pivot_wider()`\n  - `pivot_longer()`\n  - `separate()`\n  - `unite()`\n\n. . .\n\nThere are other verbs as well - look at the `tidyr` cheatsheet!\n\n## pivot function - visualized\n\n![](../img/tidyexplain/tidyr-pivoting.gif)\n::: aside\n[tidyexplain](https://github.com/gadenbuie/tidyexplain) from @gadenbuie\n:::\n\n---\n\n`pivot_wider()` \"widens\" data, increasing the number of columns and decreasing the number of rows.\n\n![](../img/tidyr/pivot.png)\n\n. . .\n\n**Is the left tibble tidy?**\n\n## `pivot_wider()` - Exercise 6 {.smaller}\n\nWhat will the output look like?\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <dbl> <chr>           <dbl>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\npivot_wider(\n  table2,\n  names_from = type,\n  values_from = count\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n---\n\nIf you want to save the output, assign it to a new variable. This new variable\nwill appear in your Environment tab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2_tidy <- pivot_wider(\n  table2,\n  names_from = type,\n  values_from = count\n)\n\ntable2_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n---\n\n`pivot_longer()` \"lengthens\" data, increasing the number of rows and decreasing the number of columns.\n\n![](../img/tidyr/pivot.png)\n\n**Is the left tibble tidy?**\n\n## `pivot_longer()` - Exercise 7 {.smaller}\n\nWhat will the output look like?\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\npivot_longer(\n  table4a,\n  2:3,\n  names_to = \"year\",\n  values_to = \"cases\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\npivot_longer(\n  table4a,\n  -country,\n  names_to = \"year\",\n  values_to = \"cases\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ntable4_tidy <- pivot_longer(\n  table4a,\n  -country,\n  names_to = \"year\",\n  values_to = \"cases\"\n)\n\ntable4_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n\n\n:::\n:::\n\n\n## separate - syntax\n\nGiven either a regular expression or a vector of character positions, `separate()` turns a single character column into multiple columns.\n\n![](../img/tidyr/separate.png)\n\n## `separate_wider_delim()` - Exercise 8 {.smaller}\n\nWhat will the output look like?\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  table3,\n  rate,\n  delim = \"/\",\n  names = c(\"cases\", \"population\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year cases  population\n  <chr>       <dbl> <chr>  <chr>     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n## `unite()` - syntax\n\n`unite()` combines multiple columns into a single column.\n\n![](../img/tidyr/unite.png)\n\n---\n\n### `unite()` syntax\n\n```r\nunite(\n  data,\n  col,\n  ..., # select columns to unite\n  sep = \"[^[:alnum:]]+\", #any sequence of non-alphanumeric values\n  remove = TRUE, #default is set to TRUE\n  na.rm = FALSE #default is set to FALSE\n)\n```\n\n## unite - Exercise 9 {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntable6 <- read_csv(\n  here(\"data/bootcamp/table6.csv\"),\n  show_col_types = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `` -> `...1`\n```\n\n\n:::\n\n```{.r .cell-code}\ntable6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n   ...1 country    century  year  cases\n  <dbl> <chr>        <dbl> <dbl>  <dbl>\n1     1 Afganistan      19    99    745\n2     2 Brazil          19    99  37737\n3     3 China           19    99 212258\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nunite(\n  table6,\n  \"new\",\n  century,\n  year,\n  sep = \"\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n   ...1 country    new    cases\n  <dbl> <chr>      <chr>  <dbl>\n1     1 Afganistan 1999     745\n2     2 Brazil     1999   37737\n3     3 China      1999  212258\n```\n\n\n:::\n:::\n\n\n## Handling missing values\n\n![](../img/tidyr/missing-values.png)\n\n## Handling missing values {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ndf <- tibble(\n  x = c(1, 2, NA),\n  y = c(\"a\", NA, \"b\")\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 <NA> \n3    NA b    \n```\n\n\n:::\n:::\n\n\n<br>\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndrop_na(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n```\n\n\n:::\n:::\n\n\n<br>\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nreplace_na(\n  df,\n  list(x = 0, y = \"unknown\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x y      \n  <dbl> <chr>  \n1     1 a      \n2     2 unknown\n3     0 b      \n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "slides-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}