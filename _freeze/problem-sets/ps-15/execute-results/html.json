{
  "hash": "a2d99940f98ea929c0e1b291fd5e5059",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Problem Set Stats Bootcamp - class 15\"\nsubtitle: \"Dealing with big data\"\nauthor: \"Neelanjan Mukherjee\"\neditor: visual\n---\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nAttaching package: 'rstatix'\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\n\nAttaching package: 'janitor'\n\n\nThe following object is masked from 'package:rstatix':\n\n    make_clean_names\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nang <- read_csv(here(\"data/bootcamp/edger.csv.gz\")) |>\n  clean_names() |>\n  filter(fdr < 0.05) |>\n  select(log_fc_time0_25:log_fc_time8) |>\n  as.matrix()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 17942 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): gene\ndbl (16): FDR, maxabsfc, logFC.Time0.25, logFC.Time0.5, logFC.Time0.75, logF...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(ang) <- gsub(pattern = \"log_fc_\", \"\", colnames(ang))\n```\n:::\n\n\n## Problem \\# 1\n\nMake sure to run the chunk above. The data represent the avg fold change in gene expression for an angiotensin II time course (.25, .5, .75, 1, 1.5, 2, 3, 4, 6, 8, 24 hrs) compared to unstimulated.\n\n## correlation --- (7 pts)\n\nCreate hierarchical clustering heatmap of pairwise pearson correlation coefficients. And provide 1-2 observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# scale ang (remember the transpose trick)\n\n# pairwise pearson correlation\n\n# make heatmap\n```\n:::\n\n\nTimepoints close to each other tend to correlate strongly with each other. The 4,6, and 8 hr time points are the most different from all others.\n\n## PCA --- (7 pts)\n\nPerform PCA and visualize PC1 vs PC2.Provide 1-2 observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npc_ang <- prcomp(ang)\n\n# gather info from summary\npca_data_info <- \n\npca_data_info <- round(x = pca_data_info, digits = 3)\n\n# we make a dataframe out of the rotations and will use this to plot\npca_plot_data <- \n\n# plot\n```\n:::\n\n\nThere is a a circular patter that seems to correspond to the timepoints. Interestingly, 24 appears to group back with 0.25 indicating the system is resetting w/respect to RNA levels.\n\n## Calculate the empirical p-value of the cluster most enriched for DUX4 targets by sampling --- (6 pts) {.smaller}\n\nstep 1:\n\n-   identify which cluster is the most enriched for DUX4 targets using `Geneoverlap`.\n-   assign the cluster number as a variable named `c` to use later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in data\ncd <- read_tsv(here(\"data\", \"dux4_clustering_results.csv.gz\"))\n\n# list of genes by dux4 targeting\nduxList <- split(cd$gene_symbol, cd$??)\n\n# list of genes by clustering\nclustList <- split(cd$gene_symbol, as.factor(cd$??))\n\n# calculate all overlaps between dux targets and clusters\ngom.duxclust <- newGOM(??List,\n                       ??List,\n                       genome.size = nrow(cd)\n                       )\n\n# retrieve p-values for each cluster and sort\ngetMatrix(gom.duxclust, \"pval\") |>\n  t() |>\n  as.data.frame() |>\n  rownames_to_column(var = \"clust\") |>\n  as.tibble() |>\n  arrange(target)\n\n# which cluster has the lowest p-value? 1 or 4 or 5...\nc <- ??\n```\n:::\n\n\nstep 2:\n\n-   determine the number of total genes in that cluster. save this as a variable named `cN` to use later. you will need to know this to figure out how many genes to sample from the whole data set. the size matching will make it so the random samples in your null distribution is better matched to your observation specific to the cluster of interest.\n\n-   determine the number of DUX4 targets in the cluster. save this as a variable named `cNt` to use later. this is the number that you are interested in comparing between the null distribution and your observation. remember, the p-value tells you the probability that the null hypothesis could generate an equal or more extreme observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many genes are in cluster 5?\ncN <- cd |>\n  filter(Cluster == c) |>\n  nrow()\n\n# how many dux targets are in cluster 5?\ncNt <- cd |>\n  filter(Cluster == c & target == \"target\") |>\n  nrow()\n```\n:::\n\n\nstep 3:\n\ngenerate 1000 random sample of the size `cN` from all genes in the data set, and for each random sample save the number of genes that are DUX4 targets. this is your null distribution.\n\nvisualize the distribution of the \\# of DUX4 targets in these 1000 random (your null distribution) and overlay the number of DUX4 targets you observed in the cluster that was most enriched for DUX4 targets, `cNt`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first simplify the problem by figuring out the # of DUX4 targets for 1 random sample\nsample_n(tbl = cd, size = ??) |>\n  filter(target == \"??\") |>\n  nrow()\n  \n\n# create an empty vector for storing the # dux targets for each iteration. call this `sampled_targets`\nsampled_targets <- vector()\n\n# then use a for loop to do it 1000 times and save the results in `sampled_targets`\n\nfor (i in 1:1000) {\n  sampled_targets[i] <- ??? # hint see simplification\n}\n\n# create a density plot using sampled targets and add a vertical line at `cNt`\nggplot(n, aes(x = ??)) +\n  geom_density() +\n  geom_vline(xintercept = ??, color = \"red\") +\n  theme_cowplot()\n\n# how many times did a simulation have more dux4 targets than `cNt`\nsampled_targets[sampled_targets > ??] |>\n  length()\n```\n:::\n\n\n### What is the p-value?\n\np \\< 0.001\n\n### What is your interpretation?\n\nThe null hypothesis that the number of DUX4 targets in cluster 5 IS NOT WELL SUPPORTED.\n\nThe number of DUX4 targets in c5 is very unlikely to be explained by chance.\n",
    "supporting": [
      "ps-15_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}