{
  "hash": "6cf1fb7a4854fcd18ee9a107410c3184",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercises 8: Gene Expression Analysis with Tidyverse\"\nsubtitle: \"Advanced Modeling and Functional Analysis\"\nauthor: \"Your Name\"\ndate: today\nformat:\n  html:\n    code-fold: true\n    toc: true\n    toc-depth: 3\n    number-sections: true\n---\n\n# Overview\n\nIn this problem set, you'll work with the Brauer gene expression dataset to practice comprehensive tidyverse skills including data tidying, transformation, joins, pivoting, string manipulation, and **statistical modeling using broom**. The dataset contains gene expression measurements for yeast genes under different nutrient limitations and growth rates.\n\n## Predictions\n\nBefore we start tidying and analyzing the data, take a moment to predict what you might find.\n\n- Question: What patterns do you expect to see in gene expression across different nutrients and growth rates?\n- Hypothesis: Genes involved in nutrient uptake and metabolism will show higher expression under their respective limiting conditions.\n- Hypohtesis: The different nutrient conditions will cause distinct gene expression profiles.\n\n# Setup and Data Loading\n\n## Load Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\n```\n:::\n\n\n## Load the Data\n\n**Task 1:** Load the raw Brauer gene expression data and examine its structure. What makes this data \"messy\" or untidy?\n\n*Breadcrumbs: Use `read_tsv()` to load the data from the URL. Examine column names and the first few rows. Think about tidy data principles - what issues do you see with the current format?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: data-loading-02\n\n# Load the Brauer gene expression data\nurl <- \"https://github.com/rnabioco/molb-7950/raw/refs/heads/main/data/bootcamp/brauer_gene_exp_raw.tsv.gz\"\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examine the structure of the data\n```\n:::\n\n\n# Part 1: Data Tidying (tidyr)\n\nWe want to create a tibble that looks like this:\n\n```r\n# A tibble: 199,296 × 4\n   systematic_name nutrient  rate exp_level\n   <chr>           <fct>    <dbl>     <dbl>\n 1 YPR204W         Glucose   0.05      1.17\n 2 YPR204W         Glucose   0.1       1\n 3 YPR204W         Glucose   0.15      0.86\n 4 YPR204W         Glucose   0.2       0.77\n 5 YPR204W         Glucose   0.25      0.53\n 6 YPR204W         Glucose   0.3       0.3\n 7 YPR204W         Ammonia   0.05      2.79\n 8 YPR204W         Ammonia   0.1       2\n 9 YPR204W         Ammonia   0.15      0.6\n10 YPR204W         Ammonia   0.2       0.16\n# ℹ 199,286 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n\n*Note the classes of each column - systematic_name is character, nutrient is a factor, rate is numeric, and exp_level is numeric.*\n\n## Create a Tidy Dataset\n\n**Task 3:** Transform the wide-format expression data into a long format suitable for analysis.\n\n*Breadcrumbs:*\n\n- First select the relevant columns (`systematic_name` and the expression columns (`G0.05`, etc))\n- Then use `pivot_longer()` to convert expression columns to rows\n- The column names contain both nutrient type (`G`) and growth rate (`0.05`) information - use `separate_wider_position()` to split the first character (nutrient abbreviation) from the numeric rate. The key here is to specify `widths = c(nutrient_abbr = 1, rate = 4)` to split after the first character, and put the rest into `rate`. Not all the rates have 4 characters, so use `too_few = \"align_start\"` to handle that.\n- Create a nutrient lookup table to convert abbreviations to full names. The lookup table should look like this:\n\n  ```r\n  # A tibble: 6 × 2\n    nutrient_abbr nutrient\n    <chr>         <chr>\n  1 G             Glucose\n  2 N             Ammonia\n  3 P             Phosphate\n  4 S             Sulfate\n  5 L             Leucine\n  6 U             Uracil\n  ```\n\n- Use that table with a `join` function to add full nutrient names to the tidied data.\n- Convert the `rate` column to numeric and select the final columns in the desired order\n- Remove any NA values from `systematic_name` and `exp_level` using `filter()`\n\n\n::: {.cell}\n\n:::\n\n\n\n# Part 2: Expression patterns\n\nThis is a \"cheat\" chunk to load the tidy data directly if you want to skip ahead. Otherwise, use the code above to create the tidy data from the raw data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrauer_tidy_tbl <- read_tsv(\n  \"https://github.com/rnabioco/molb-7950/raw/refs/heads/main/data/bootcamp/brauer_gene_exp_tidy.tsv.gz\"\n)\n\nyeast_gene_info_tbl <- read_tsv(\n  \"https://github.com/rnabioco/molb-7950/raw/refs/heads/main/data/bootcamp/yeast_go_terms.tsv.gz\"\n)\n\nyeast_protein_props_tbl <- read_tsv(\n  \"https://github.com/rnabioco/molb-7950/raw/refs/heads/main/data/bootcamp/yeast_prot_prop.tsv.gz\"\n)\n```\n:::\n\n\n## Explore Expression Patterns\n\n**Task 6:** Calculate summary statistics for gene expression by nutrient type.\n\n*Breadcrumbs:*\n- Use `group_by()` and `summarize()` to calculate mean, median, and standard deviation of expression values for each nutrient. Which nutrients show the highest variability in expression?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate summary statistics by nutrient\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find genes with extreme expression values\n```\n:::\n\n\nInspect the results and note any patterns you observe in high and low expression genes across different nutrient-rate combinations.\n\nNext, make a boxplot to visualize the distribution of expression levels for each nutrient condition. What insights can you draw from the plot?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|\n```\n:::\n\n\n## Identify High and Low Expression\n\n**Task 7:** Find genes with extreme expression values under different conditions.\n\n*Breadcrumbs: For each nutrient-rate combination, identify the top 5 highest and lowest expressing genes. Use `slice_max()` and `slice_min()` or ranking functions. What patterns do you notice?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find genes with extreme expression values\n```\n:::\n\n\n# Part 3: Statistical Modeling with broom\n\n## Linear Models for Individual Genes\n\n**Task 8:** Fit linear models to examine how each gene's expression responds to growth rate within each nutrient condition.\n\n*Breadcrumbs:*\n\n- Use `reframe()` with `broom::tidy(lm(exp_level ~ rate))` for each gene-nutrient combination\n- Use `.by = c(nutrient, systematic_name)` to group the modeling\n- This creates a tidy data frame of model coefficients\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit linear models for each gene-nutrient combination\nbrauer_models_tbl <-\n  brauer_tidy_tbl |>\n  reframe(\n    broom::tidy(lm(exp_level ~ rate)),\n    .by = c(nutrient, systematic_name)\n  )\n```\n:::\n\n\nThe above should give you a tibble that looks like this:\n\n```r\n# A tibble: 66,430 × 7\n   nutrient  systematic_name term        estimate std.error statistic p.value\n   <chr>     <chr>           <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n 1 Glucose   YNL049C         (Intercept)   -0.263    0.0441    -5.98  0.00394\n 2 Glucose   YNL049C         rate           0.714    0.226      3.16  0.0343\n 3 Ammonia   YNL049C         (Intercept)    0.153    0.247      0.619 0.569\n 4 Ammonia   YNL049C         rate          -1.09     1.27      -0.862 0.437\n 5 Phosphate YNL049C         (Intercept)   -0.465    0.161     -2.89  0.0444\n 6 Phosphate YNL049C         rate           2.07     0.825      2.51  0.0657\n 7 Sulfate   YNL049C         (Intercept)   -0.419    0.157     -2.67  0.0558\n 8 Sulfate   YNL049C         rate           2.23     0.807      2.77  0.0503\n 9 Leucine   YNL049C         (Intercept)    0.193    0.0313     6.16  0.00352\n10 Leucine   YNL049C         rate          -0.177    0.161     -1.10  0.332\n# ℹ 66,420 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n\n## Analyze Slope Coefficients\n\n**Task 9:** Examine the slope terms to identify genes that significantly respond to growth rate changes.\n\n*Breadcrumbs: Filter for slope terms (not intercepts). Use q-value correction for multiple testing. Create histograms of p-values by nutrient. Which genes show the strongest positive or negative relationships with growth rate?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze slope coefficients\n```\n:::\n\n\n## Analyze Intercept Terms\n\n**Task 10:** Use intercept terms to identify genes with unusual baseline expression under specific nutrient limitations.\n\n*Breadcrumbs: Filter for intercept terms. Center intercepts around each gene's mean across nutrients using `group_by()` and `mutate()`. Use `top_n()` to find genes with extreme centered intercepts.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze intercept terms\n```\n:::\n\n\n# Your assignment\n\nUse this above data to try to ask and answer your own biological question.\n\n## Hypothesis\n\nState one or more hypotheses you want to test using this data.\n\n## Explore / Analyze\n\nGenerate some tables or plots to explore your hypothesis.\n\n## Interpreation\n\nInterpret your results. What do they mean in the context of your hypothesis? Were you able to support or refute your hypothesis?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}