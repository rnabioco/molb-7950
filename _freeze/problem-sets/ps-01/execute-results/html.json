{
  "hash": "b3f771fbc6da72c74d3d2fb5c5608ab0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Problem Set 1 Key\"\nauthor: \"JH\"\nformat:\n    html:\n        embed-resources: true\n---\n\n## Problem Set\n\nEach problem below is worth **5 points**.\n\n**The problem set is due 12pm on Aug 26.**\n\n### Grading rubric\n\n- Everything is good: 5 points\n- Partially correct answers: 3-4 points\n- Reasonable attempt: 2 points\n\n## Setup\n\nStart by loading libraries you need analysis below. When in doubt, start by loading the `tidyverse` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(___)\n```\n:::\n\n\n## Question 1\n\nCreate 3 different vectors called `x`, `y`, and `z`:\n\n- `x` should be character vector of length 5 (hint: use `LETTERS` or `letters`)\n- `y` should be a numeric vector of length 5 (hint: try `1:5` or `c(1, 2, 3, 4, 5)`)\n- `z` should be a logical vector of length 5 (hint: use `TRUE` and `FALSE` values)\n\nUse `length()` to calculate the length of each vector.\n\n\n::: {.cell}\n\n:::\n\n\n## Question 2\n\nUsing the vectors you created above, create a new tibble with column names\n`x`, `y`, and `z`. Use the `tibble()` function to combine your vectors into a data frame.\n\nUse `nrow()` and `ncol()` to calculate the number of rows and columns, both with and without the pipe operator.\n\nUse `glimpse()` to get a quick overview of your tibble - this shows data types and first few values.\n\nWhat do you notice about the length of the vectors and the number of rows?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- tibble(___)\n\nnrow(___)\nncol(___)\n\n# Get a quick overview\nglimpse(___)\n```\n:::\n\n\n### Answer\n\nThe length of the vectors and the number of rows are the same, because\ntibble columns are simply the vectors we started with.\n\n## Question 3\n\nLet's explore the `penguins` dataset that we loaded.\n\n1. Look at the number of rows with `nrow()` - this tells us how many penguins are in the dataset\n2. Look at the number of columns with `ncol()` - this tells us how many variables we measured\n3. Look at the column names with `names()` - this shows us what variables we have\n4. Get a glimpse of the data with `glimpse()` - this shows data types and sample values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore the penguins dataset\nnrow(___)\nncol(___)\nnames(___)\nglimpse(___)\n```\n:::\n\n\n## Question 4\n\nNext we will think about data tidying. Let's start by analyzing the `penguins` dataset.\n\n**Part A**: Is the `penguins` dataset tidy? To determine this, we need to think about the three principles of tidy data:\n\n1. Each variable forms a column\n2. Each observation forms a row\n3. Each type of observational unit forms a table\n\nLook at the `penguins` dataset and answer:\n\n- What are the variables in the dataset? (Hint: use `names(penguins)` to see them)\n- Does each column represent a single variable?\n- Does each row represent a single penguin observation?\n\n\n::: {.cell}\n\n:::\n\n\n**Part B**: Now let's examine some datasets that are NOT tidy. Use `data()` to see available datasets, then look at these two examples:\n\n**Example 1: `anscombe`** - This is a classic statistics dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the anscombe dataset. Start by reading the help page with `?anscombe`\n```\n:::\n\n\nIs `anscombe` tidy? Think about:\n\n- What are the actual variables? (Hint: x and y coordinates for different datasets)\n- How many different datasets are encoded in the column names?\n- What would a tidy version look like?\n\n**Example 2: Choose another dataset** - Pick one more dataset from `data()` and analyze whether it's tidy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at available datasets\ndata()\n```\n:::\n\n\nIs this other data set tidy? Think about:\n\n- What are the actual variables? (Hint: x and y coordinates for different datasets)\n- How many different datasets are encoded in the column names?\n- What would a tidy version look like?\n\n**Part C**: Write a brief explanation (2-3 sentences) for each dataset about:\n\n1. Whether it's tidy or not\n2. What makes it tidy/untidy\n3. What the variables actually represent\n\n### Your Analysis:\n\n**penguins**: [Your answer here]\n\n**anscombe**: [Your answer here]\n\n**[Your chosen dataset]**: [Your answer here]\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output.\n\nThen paste the URL of the **Posit Cloud project** (NOT the HTML link) into the problem set on Canvas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}