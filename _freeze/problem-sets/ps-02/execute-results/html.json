{
  "hash": "dc735ed9b70fd4a5a8fd5b46fea15a97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Problem Set 2 Key\"\nauthor: \"JH\"\n---\n\n## Problem Set\n\nEach problem below is worth **4 points**.\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\n\n**The problem set is due 5pm on Aug 27.**\n\n### Grading rubric\n\n-   Everything is good: 5 points\n-   Partially correct answers: 3-4 points\n-   Reasonable attempt: 2 points\n\n## Question 1\n\nStart by loading the libraries you need for analysis below. When in doubt, start by loading the tidyverse package. You should also load `here`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(___)\nlibrary(___)\n```\n:::\n\n\nNow import the dataset `data_transcript_exp_subset` using the *readr* package. Use `read_csv()` to import the file.\n\nThe file is located at `data/data_transcript_exp_subset.csv.gz` - use `here()` to create the complete path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl <- read_csv(___)\n\nexp_tbl\n```\n:::\n\n\n## Question 2\n\n**Explore the dataset. Is this dataset tidy? If not, why not?**\n\nThis data frame is a subset (100 lines) of transcript-level gene expression data where transcript abundance was measured at two different time points of a certain treatment conducted in triplicates. The column names have the format of `molecule_time_replicate`\n\nFirst, explore the structure of the dataset using some of the functions we learned in class. Try using `glimpse()`, `summary()`, and `names()` to understand the data structure.\n\n*Add more code chunks as needed to separate the different steps of your exploration.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(x)\n```\n:::\n\n\nComment on whether this dataset is tidy, and if not, list the reasons why.\n\nHint: In a tidy dataframe, every column represents a single variable and every row represents a single observation\n\n### Answer\n\n**\\[YOUR ANSWER HERE\\]**\n\n## Question 3\n\n**How will you reshape the data frame so that each row has only one experimental observation?**\n\nBefore we reshape, let's think about what we want:\n\n-   Which column should stay the same? (The transcript ID)\n-   Which columns contain the measurements? (All the others)\n-   What should we call the new column names?\n\nUse `pivot_longer()` to reshape the data. You'll want to:\n\n-   Keep the `ensembl_transcript_id` column as-is (`cols`)\n-   Create a new column for the condition names (`names_to`)\n-   Create a new column for the values (`values_to`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reshape the data so each row is one observation\nexp_tbl_long <-\n  pivot_longer(\n    x,\n    cols = ___,\n    names_to = ___,\n    values_to = ___\n  )\n\nexp_tbl_long\n```\n:::\n\n\n### Question 4\n\n**How will you modify the dataframe so that multiple variables are not present in a single column?**\n\nUse `separate_wider_delim()` to split the condition column into separate variables. You need to:\n\n-   Specify which column to separate (`cols`)\n-   Specify the delimiter character (`delim`)\n-   Provide the new column names (`names`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl_tidy <-\n  separate_wider_delim(\n    exp_tbl_long,\n    cols = ___,\n    delim = ___,\n    names = ___\n  )\n\nexp_tbl_tidy\n```\n:::\n\n\n### Question 5\n\n**How will you save your output as a TSV file?**\n\nUse `write_tsv()` from the readr package to save your tidy data. Provide the data object and a filename.\n\nHint: Use the *readr* cheatsheet at the bottom of [this page](https://readr.tidyverse.org/) to figure this out.\n\nAfter running your new code, you should have a new file called `transcripts.tidy.tsv` in your working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_tsv(exp_tbl_tidy, \"transcripts.tidy.tsv\")\n```\n:::\n\n\n### Question 6\n\n**Can you reverse the process? How would you go from tidy back to wide format?**\n\nUse `pivot_wider()` to go from the tidy format back to the original wide format. You need to:\n\n-   Specify where the new column names come from (`names_from`)\n-   Specify where the values come from (`values_from`)\n-   Specify how to combine the names (`names_sep`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_wider(\n  exp_tbl_tidy,\n  names_from = ___,\n  values_from = ___,\n  names_sep = ___\n)\n```\n:::\n\n\nAfter this, your new data should look like the original tibble you started with.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}