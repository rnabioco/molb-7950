{
  "hash": "7a71277c0d233112597a31b066c30e92",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp Problem Set 4\"\nauthor: \"Your name here\"\ndate: last-modified\nexecute:\n  eval: false\nformat:\n  html:\n    embed-resources: true\n---\n\n## Problem Set\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not\nallowed to post correct answers in slack.\n\n**The problem set is due 5pm on Aug 29**\n\n## Grading rubric\n\n- Everything is good: full points\n- Partially correct answer: depends on how many steps are correct\n- Reasonable attempt: half points\n\n## Question 1 **5 points**\n\n1. Load the tidyverse and here packages using `library()`.\n2. Import datasets: `data/data_rna_protein.csv.gz` using `read_csv()` and `here()`.\n\n`data_rna_protein.csv.gz`: This is a combined dataset from an RNAseq and SILAC\nproteomics experiment, where a transcription factor (TF) was differentially\nexpressed and the fold change in RNA and protein calculated between\nTF-expressing and non-expressing cells.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\nexp_tbl <- read_csv(\n  here(___)\n)\n```\n:::\n\n\n## Question 2 **5 points**\n\nLet's build a data processing workflow step by step. This teaches you how to build complex pipelines gradually - a key skill in data analysis.\n\n**Step 1**: First, explore the data so you know what you're working with. Use `glimpse()` to see column types and `summary()` to see distributions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Always explore your data first!\n```\n:::\n\n\n**Step 2**: Select only the columns we need:\n\n- `geneid`      (gene identifier)\n- `iDUX4_logFC` (RNA fold change)\n- `iDUX4_fdr`   (RNA pvalue)\n- `hl.ratio`    (protein fold change)\n- `pval`        (protein pvalue)\n\nUse `select()` and list the columns you want to keep:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl |>\n  select(___)\n```\n:::\n\n\n**Step 3**: Rename columns for clarity (this makes your code more readable).\n\nUse `dplyr::rename()` with the pattern `new_name = old_name, ...`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl |>\n  select(___) |>\n  rename(\n    ___ = ___,\n    # etc\n  )\n```\n:::\n\n\n**Step 4**: Clean the data by removing rows with missing values. Use `drop_na()` to remove rows with any missing values, and `distinct()` to remove duplicate rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl |>\n  select(___) |>\n  rename(\n    ___ = ___,\n    # etc\n  ) |>\n  ___() |> # Remove rows with any missing values\n  ___() # Remove duplicate rows\n```\n:::\n\n\n**Step 5**: Finally, arrange the data and save it. Use `arrange()` to sort by RNA fold change (high to low), then protein fold change (low to high):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl_subset <- exp_tbl |>\n  select(___) |>\n  rename(\n    ___ = ___,\n    # etc\n  ) |>\n  ___() |> # Remove rows with any missing values\n  ___() |> # Remove duplicate rows\n  # Sort by RNA fold change (high to low), then protein fold change (low to high)\n  ___(___, ___)\n\nexp_tbl_subset\n```\n:::\n\n\n## Question 3 **5 points**\n\nLet's practice good data analysis habits by checking for potential issues. Quality control is essential in real data analysis.\n\n**Check for duplicates and missing values**:\n\n1. Use `count()` to check for duplicate genes\n1. Use `summarize()` with `across()` to count missing values in all columns\n1. Use summary statistics to understand data distributions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicate genes (there shouldn't be any after distinct())\nexp_tbl_subset |>\n  count(___) |>\n  ___(n > 1) # Any genes appearing more than once?\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary of missing values by column\nexp_tbl_subset |>\n  summarize(\n    # first blank select variables\n    # second blank applies a function to count NA values\n    across(___, ___)\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the distribution of our main variables\nexp_tbl_subset |>\n  summarize(\n    across(\n      # specify the variables to summarize\n      ___,\n      list(\n        # mean\n        mean = ~ mean(., na.rm = TRUE),\n        # now do median\n        ___ = ~ ___(., na.rm = TRUE),\n        # and sd\n        ___ = ~ ___(., na.rm = TRUE)\n      )\n    ),\n    .groups = \"drop\"\n  )\n```\n:::\n\n\n## Question 4 **5 points**\n\nHow well do the overall `rna_FC` and `protein_FC` values correlate in this experiment? We'll explore this with visualization and statistics.\n\n**Step 1**: Create a scatter plot of `rna_FC` vs `protein_FC` using `ggplot()`. Use:\n\n- `aes()` to map x and y variables\n- `geom_point()` to create the scatter plot\n- `labs()` to add informative axis labels and title\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  ___,\n  aes(\n    x = ___,\n    y = ___\n  )\n) +\n  # ad points\n  ___() +\n  # add labels\n  labs(\n    x = \"___\",\n    y = \"___\",\n    title = \"___\"\n  )\n```\n:::\n\n\n**Step 2**: Add reference lines to help interpret the correlation. Use:\n\n- `geom_abline(slope = 1, intercept = 0)` for perfect correlation line\n- `geom_smooth(method = \"lm\", se = FALSE)` for the computed trend line\n- adjust the `geom_point()` aesthetic to `alpha = 0.6`, making points slightly transparent for better visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  ___,\n  aes(\n    x = ___,\n    y = ___\n  )\n) +\n  # Add transparent points (change the ???)\n  geom_???(alpha = 0.6) +\n  # Add the perfect correlation line (change the ???)\n  geom_???(slope = 1, intercept = 0, color = \"red\", linewidth = 1) +\n  # Add the computed trend line (change the ???)\n  geom_???(method = \"lm\", se = FALSE, color = \"blue\", linewidth = 1) +\n  labs(\n    x = \"___\",\n    y = \"___\",\n    title = \"___\"\n  )\n```\n:::\n\n\n**Step 3**: Calculate the correlation coefficient using `cor()`. Use Spearman correlation since it's robust to outliers. Use `?cor` to see the function documentation. You will need to specify two vectors for the calculation, and it's easiest to provide them using the `$` operator to extract columns from the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna_prot_cor <- cor(\n  # specify the first vector\n  ___,\n  # specify the second vector\n  ___,\n  method = \"spearman\"\n)\n\nrna_prot_cor\n```\n:::\n\n\n### Answer\n\n**[ YOUR ANSWER HERE ]**\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output.\n\nThen paste the URL of this Posit Cloud project into the problem set on Canvas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}