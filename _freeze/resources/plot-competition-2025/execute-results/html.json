{
  "hash": "bdcc6c10b5bba9d4ab25d5ed7d0eb2e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: aRt competition entries\nexecute:\n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: true\n---\n\n\n\n**Vote for your favorites at this [Google Form](https://forms.gle/WpYSNTptytum8UgV7).**\n\n### Plot 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(emo)\n\n# need length.out and sequence function to have enough data points to make smooth curved lines; here I create a tbl with values for theta and a corresponding r for my coordinate plot\ntbl <- tibble(\n  theta = seq(0, 2 * 3.14, length.out = 500),\n  r = (3 * sin(pi * theta))\n)\n\n# create a plot of each coordinate point and changed the aesthetics to adjust x and y to make an abstract plot. With different variations I came upon these aesthetic adjustments to create what looks like a squid\nggplot(tbl) +\n  geom_point(\n    aes(x = r * theta, y = r^2),\n    color = \"#613092\",\n    alpha = 0.75,\n    size = 0.25\n  ) +\n  coord_polar(start = 0) +\n  #added a face to my squid using annotate\n  annotate(\n    \"text\",\n    x = 0,\n    y = -4,\n    label = \"❁´◡`❁  \",\n    size = 7,\n    color = \"#452268\",\n    angle = 4\n  ) +\n\n  # added a title amd subtitle\n  labs(\n    title = \"Hugs From Miss Squid\",\n    subtitle = \"❤️  ❤️  ❤️ ❤️ ❤️ ❤️ ❤️ ❤️ ❤️ ❤️ ❤️\"\n  ) +\n  theme(\n    plot.subtitle = element_text(color = \"red\")\n  ) +\n\n  # used theme_void() to remove the coordinate plot background and axis labels so I was left with a white background behind my data points (squid body) and annotated text (face of squid)\n  theme_void()\n```\n:::\n\n\n![](img/miss-squid.png)\n\n### Plot 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(viridis)\n\nset.seed(42)\nx <- seq(-4 * pi, 4 * pi, length.out = 2000)\n\n# Mountain Layers\nmountain_data <- data.frame(\n  x = rep(x, 5),\n  layer = rep(1:5, each = length(x))\n) %>%\n  mutate(\n    # Base mountain shape\n    base_height = case_when(\n      layer == 1 ~ 3 * sin(x / 2) + 1.5 * sin(x / 1.3) + 0.8 * sin(x * 0.7),\n      layer == 2 ~ 2.5 * sin(x / 1.8) + 1.2 * sin(x / 1.1) + 0.6 * sin(x * 0.9),\n      layer == 3 ~ 2 * sin(x / 2.2) + sin(x / 0.9) + 0.4 * sin(x * 1.2),\n      layer == 4 ~ 1.5 * sin(x / 2.8) + 0.8 * sin(x / 1.5) + 0.3 * sin(x * 1.5),\n      layer == 5 ~ sin(x / 3.2) + 0.5 * sin(x / 2.1) + 0.2 * sin(x * 1.8)\n    ),\n    # Noise for texture\n    noise = rnorm(n(), 0, 0.1 * (6 - layer)),\n    y = pmax(base_height + noise, -layer * 0.5), # Ensure layers don't go below each other\n    # Color based on height and layer for atmospheric perspective\n    fill_color = layer + (y - min(y)) / (max(y) - min(y))\n  )\n\n# Plot each layer\np1 <- ggplot() +\n  # Layer 5 (background)\n  geom_ribbon(\n    data = filter(mountain_data, layer == 5),\n    aes(x = x, ymin = -2.5, ymax = y),\n    fill = \"#440154\",\n    alpha = 0.6\n  ) +\n  # Layer 4\n  geom_ribbon(\n    data = filter(mountain_data, layer == 4),\n    aes(x = x, ymin = -2, ymax = y),\n    fill = \"#31688e\",\n    alpha = 0.7\n  ) +\n  # Layer 3\n  geom_ribbon(\n    data = filter(mountain_data, layer == 3),\n    aes(x = x, ymin = -1.5, ymax = y),\n    fill = \"#26828e\",\n    alpha = 0.75\n  ) +\n  # Layer 2\n  geom_ribbon(\n    data = filter(mountain_data, layer == 2),\n    aes(x = x, ymin = -1, ymax = y),\n    fill = \"#35b779\",\n    alpha = 0.8\n  ) +\n  # Layer 1 (foreground)\n  geom_ribbon(\n    data = filter(mountain_data, layer == 1),\n    aes(x = x, ymin = -0.5, ymax = y),\n    fill = \"#fde725\",\n    alpha = 0.85\n  ) +\n  labs(title = \"The Rocky Mountains\", x = \"\", y = \"\") +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"black\", color = NA),\n    panel.background = element_rect(fill = \"black\", color = NA),\n    plot.title = element_text(color = \"white\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(color = \"white\", size = 12, hjust = 0.5),\n    legend.position = \"none\"\n  )\n\nprint(p1)\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p2-1.png){width=672}\n:::\n:::\n\n\n### Plot 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# aRt Title: Transcript City\n\n# Use transcriptomic data from ps-04.\n# Select for gene name & RNA_fc values only.\n# Drop NAs & remove duplicates.\n# Filter rna_fc within a positive range that is reasonable to display.\n\nlibrary(tidyverse)\nlibrary(here)\n\nart_tbl <- read_csv(\n  here(\"data/bootcamp/data_rna_protein.csv.gz\")\n)\n\nart_tbl_trim <- art_tbl |>\n  select(gene = geneid, rna_fc = iDUX4_logFC) |>\n  drop_na() |>\n  distinct(gene, .keep_all = TRUE) |>\n  filter(rna_fc > 0 & rna_fc <= 0.5) |>\n  # Mutate to assign `color_class` based on arbitrary rna_fc value; will be used to vary color in plot\n  mutate(\n    color_class = case_when(\n      rna_fc < 0.1 ~ \"A\",\n      rna_fc < 0.2 ~ \"B\",\n      rna_fc < 0.3 ~ \"C\",\n      rna_fc < 0.4 ~ \"D\",\n      .default = \"E\"\n    )\n  ) |>\n  # Mutate to assign `star_class` based on first letter of gene name. Use this stackoverflow post to understand partial strings: https://stackoverflow.com/questions/56993566/how-to-create-a-new-column-based-on-partial-string-of-another-column\n  mutate(\n    star_class = substr(gene, 1L, 1L)\n  )\n\ncity_palette <- c(\"#eeaf61\", \"#fb9062\", \"#ee5d6c\", \"#ce4993\", \"#6a0d83\")\n\nggplot(\n  art_tbl_trim,\n  aes(\n    x = gene,\n    y = rna_fc,\n    fill = color_class\n  )\n) +\n  geom_col() +\n  geom_point(\n    shape = 8,\n    color = \"white\",\n    size = 0.2\n  ) +\n  theme(\n    # Remove legend, axis titles, grid, & make background black\n    legend.position = \"none\",\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    panel.background = element_rect(fill = 'black')\n  ) +\n  scale_fill_manual(values = city_palette)\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p3-1.png){width=672}\n:::\n:::\n\n\n### Plot 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\npride_colors <- c(\n  \"maroon\",\n  \"purple\",\n  \"pink\",\n  \"lavender\",\n  \"steelblue\",\n  \"turquoise\",\n  \"springgreen\",\n  \"snow4\"\n)\n\nstripes_df <- data.frame(\n  ymin = seq(0, 7),\n  #Ymin needs to match the number of colors you've picked out\n  ymax = seq(1, 8),\n  #Ymax is setting the width of each rectangle to be 1 unit later on\n  color = pride_colors\n)\n\nbase_flag <- ggplot(stripes_df) +\n  geom_rect(\n    aes(xmin = 0, xmax = 15, ymin = ymin, ymax = ymax, fill = color),\n    color = NA\n  )\n\n#Create a triangle polygon df\n\ntriangle_df <- data.frame(\n  x = c(0, 0, 5),\n  y = c(0, 8, 4) # bottom, top, center\n)\n\ncombined_flag <- base_flag +\n  geom_polygon(\n    data = triangle_df,\n    aes(x = x, y = y),\n    fill = \"orange\",\n    alpha = 0.7\n  ) +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed()\n\ndots_df <- data.frame(\n  x = runif(400, 0, 15), # Random x across flag width\n  y = runif(400, 0, length(pride_colors)), # Random y across flag height\n  size = runif(400, 0.5, 2), # Dot sizes\n  alpha = runif(400, 0.1, 0.4), # Transparency\n  color = sample(pride_colors, 400, replace = TRUE) # Pride color for each dot\n)\n\n# Final plot\ncombined_flag +\n  geom_point(\n    data = dots_df,\n    aes(x = x, y = y, size = size, alpha = 0.7, color = color),\n    show.legend = FALSE\n  ) +\n  #scale_fill_identity() +\n  theme_void() +\n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p4-1.png){width=672}\n:::\n:::\n\n\n### Plot 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata(\"trees\")\ntrees_tibble <- as_tibble(trees)\n\nggplot_trees <- ggplot(\n  data = trees_tibble,\n  mapping = aes(\n    x = Girth,\n    y = Height,\n    size = Volume\n  )\n) +\n  geom_point(\n    alpha = 1.0,\n    shape = 8,\n    color = \"#FF0000\",\n    size = 10,\n    stroke = 1\n  ) +\n  geom_smooth(\n    alpha = 0.5,\n    color = \"#0000FF\",\n    fill = \"#8A00C4\",\n    linetype = \"dashed\",\n    size = 3\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"#FFFF00\"),\n    panel.background = element_rect(fill = \"#39FF14\"),\n    panel.grid.major = element_line(color = \"#FF0000\"),\n    panel.grid.minor.x = element_line(color = \"#0000FF\"),\n    panel.grid.minor.y = element_line(color = \"#FFAE42\"),\n    panel.grid.major.y = element_line(color = \"#FF13F0\")\n  ) +\n  labs(\n    x = \"how thick is it (in) ??\",\n    y = \"vertical dominance (ft)\",\n    title = \"cool facts about 31 black cherry trees\"\n  )\n\nggplot_trees\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p5-1.png){width=672}\n:::\n:::\n\n\n### Plot 6\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#generating histogram with labels and title\nugly_plant <- ggplot(PlantGrowth, aes(weight, fill = group, color = group)) +\n  geom_histogram() +\n  labs(x = \"PLANT WEIGHT\", y = \"PLANT COUNT\", title = \"green plants\")\n\n#Theme changes for colors and position/angle of labels\nugly_plant +\n  theme(\n    plot.background = element_rect(fill = \"lightgreen\"),\n    panel.background = element_rect(fill = \"darkgreen\"),\n    panel.grid.major = element_line(colour = \"white\"),\n    plot.title = element_text(color = \"#29AB87\", angle = 100, hjust = 6),\n    axis.title.x = element_text(\n      color = \"blue\",\n      angle = 145,\n      hjust = 1,\n      vjust = 1\n    ),\n    axis.title.y = element_text(\n      color = \"yellow\",\n      angle = 250,\n      hjust = 1,\n      vjust = 1\n    ),\n    legend.title = element_text(\n      color = \"green\",\n      angle = 170,\n      hjust = -1,\n      vjust = -1\n    ),\n    legend.text = element_text(color = \"darkgreen\", angle = 120)\n  ) +\n  scale_fill_brewer(palette = \"Light1\")\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p6-1.png){width=672}\n:::\n:::\n\n\n### Plot 7\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(gganimate)\nlibrary(ragg)\n\nstorms_sin <- storms |> drop_na()\n\nanim <- ggplot(\n  storms_sin,\n  aes(\n    x = cos(pressure),\n    y = sin(wind),\n  )\n) +\n  geom_point(alpha = 0.05, shape = 11, size = 8, color = \"#edf8b1\") +\n  theme_void() +\n  coord_flip() +\n  geom_point(\n    aes(x = cos(pressure), y = sin(lat)),\n    alpha = 0.3,\n    shape = 8,\n    size = 15,\n    color = \"#7fcdbb\"\n  ) +\n  geom_density_2d_filled(\n    aes(x = cos(pressure), y = sin(lat)),\n    alpha = 0.1,\n    linewidth = 12,\n    color = \"violet\"\n  ) +\n\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#91c7d8\"),\n    panel.background = element_rect(fill = \"#9c8080\")\n  ) +\n  transition_states(\n    transition_length = 0,\n    state_length = 0.001,\n    year\n  )\n\nspacestorm_plot <- animate(\n  anim,\n  device = \"ragg_png\",\n  renderer = gifski_renderer()\n)\n\nanim_save(\n  filename = \"spacestorm.gif\",\n  animation = spacestorm_plot,\n  path = here(\"img\")\n)\n```\n:::\n\n\n![](img/spacestorm.gif)\n\n### Plot 8\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(emo)\n# library(emojifont)\nlibrary(here)\nlibrary(gganimate)\nlibrary(ragg)\ndata(\"WorldPhones\")\n\nset.seed(42)\n\nworldphones_tidy <- WorldPhones %>%\n  as.data.frame() %>%\n  rownames_to_column(var = \"year\") %>%\n  pivot_longer(\n    cols = -year,\n    names_to = \"region\",\n    values_to = \"phones\"\n  ) %>%\n  mutate(\n    emoji = case_when(\n      region == \"N.Amer\" ~ emo::ji(\"eagle\"),\n      region == \"Europe\" ~ emo::ji(\"bear\"),\n      region == \"Asia\" ~ emo::ji(\"tiger\"),\n      region == \"S.Amer\" ~ emo::ji(\"monkey\"),\n      region == \"Oceania\" ~ emo::ji(\"penguin\"),\n      region == \"Africa\" ~ emo::ji(\"giraffe\"),\n      region == \"Mid.Amer\" ~ emo::ji(\"cow\")\n    )\n  ) %>%\n  select(\n    year,\n    emoji,\n    region,\n    phones\n  )\n\nggplot(\n  worldphones_tidy,\n  aes(\n    x = year,\n    y = phones,\n    color = region\n  )\n) +\n  geom_text(\n    aes(label = emoji),\n    size = 4,\n    show.legend = FALSE\n  ) +\n  labs(\n    x = \"BEST YEARS\",\n    y = \"TOO MANY PHONES\",\n    title = \"ANIMALS LOVE PHONES\",\n    caption = \"eagles are addicted to phones\"\n  ) +\n  scale_y_continuous(\n    limits = c(0, 100000),\n    breaks = seq(0, 100000, 10000),\n    labels = scales::comma\n  ) +\n  scale_x_discrete(position = \"top\") +\n  theme(\n    axis.text.x = element_text(\n      face = \"bold\",\n      color = \"#ffeda0\",\n      size = 13,\n      angle = 179\n    ),\n    axis.text.y = element_text(\n      face = \"bold\",\n      color = \"orange\",\n      size = 10,\n      angle = 180\n    ),\n    plot.background = element_rect(fill = \"pink\"),\n    plot.title = element_text(\n      face = \"bold.italic\",\n      color = \"green\",\n      size = 18,\n      angle = 183\n    ),\n    plot.caption = element_text(color = \"white\", size = 12),\n    axis.title.x = element_text(size = 22, color = \"dark blue\", angle = 12),\n    axis.title.y = element_text(color = \"orange\", angle = 181, size = 14),\n    panel.background = element_rect(fill = \"light blue\")\n  )\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p8-1.png){width=672}\n:::\n:::\n\n\n### Plot 9\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(emo)\nlibrary(ggplot2)\n\nexp_tbl <- read_csv(here(\"data/languages.csv\"))\n\nexp_tidy <-\n  exp_tbl |>\n  select(state, language, percent) |>\n  drop_na()\n\nggplot(\n  exp_tbl_tidy,\n  aes(x = state, y = language, size = percent, color = percent)\n) +\n  geom_point(alpha = 0.50, fill = \"tomato1\", color = \"red\")\n+labs(x = \"States\", y = \"Language\", title = \"Linguistics\")\n```\n:::\n\n\n### Plot 10\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Official ggplot for competition, emoji's where not working\nemojimap <- c(\n  \"Tiger\" = \"🐆\",\n  \"Cow\" = \"🐄\",\n  \"African elephant\" = \"🐘\",\n  \"Dog\" = \"🐕\",\n  \"Goat\" = \"🐐\",\n  \"Rabbit\" = \"🐇\",\n  \"Pig\" = \"🐖\",\n  \"Chimpanzee\" = \"🐒\"\n)\n\nsleep_long <- msleep |>\n  mutate(emoji = emojimap[name]) |>\n  filter(!is.na(emoji)) |>\n  select(emoji, name, brainwt, sleep_total, awake) |>\n  drop_na() |>\n  pivot_longer(\n    c(sleep_total, awake),\n    names_to = \"state\",\n    values_to = \"hours\"\n  ) |>\n  mutate(\n    factor(\n      state,\n      levels = c(\"awake\", \"sleep_total\"),\n      labels = c(\"Awake\", \"Sleep\")\n    )\n  ) |>\n  mutate(\n    emoji = case_when(\n      name == \"Tiger\" ~ emo::ji(\"tiger\"),\n      name == \"Cow\" ~ emo::ji(\"cow\"),\n      name == \"African elephant\" ~ emo::ji(\"elephant\"),\n      name == \"Goat\" ~ emo::ji(\"goat\"),\n      name == \"Rabbit\" ~ emo::ji(\"rabbit\"),\n      name == \"Pig\" ~ emo::ji(\"pig\"),\n      name == \"Chimpanzee\" ~ emo::ji(\"monkey\"),\n      name == \"Dog\" ~ emo::ji(\"dog\")\n    )\n  )\n\nggplot(\n  sleep_long,\n  aes(\n    x = name,\n    y = brainwt,\n    label = emoji,\n    size = hours,\n    color = state\n  )\n) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  geom_text(aes(label = emoji), size = 6) +\n  # scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_y_log10() +\n  #facet_wrap(~name) +\n  # Here comes the gganimate specific bits\n  labs(\n    title = 'Animal activity: {closest_state}',\n    x = \"Animal species\",\n    y = \"Brain weight\",\n    size = \"Hours\",\n    color = \"State\"\n  ) +\n  transition_states(state, transition_length = 2, state_length = 1) +\n  ease_aes('linear') +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_text(angle = 180),\n    plot.title = element_text(hjust = 0.5, size = 30),\n    axis.title = element_text(size = 30),\n    axis.text.x = element_text(size = 2),\n    axis.text.y = element_text(size = 2),\n    plot.background = element_rect(fill = \"#F0F8FF\"),\n    panel.background = element_rect(fill = \"#E6F2FF\"),\n    panel.grid.major = element_line(color = \"#D3D3D3\"),\n    panel.grid.minor = element_line(color = \"#96ceb4\")\n  )\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p10-1.gif)\n:::\n:::\n\n\n### Plot 11\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(viridisLite)\n\nbg <- \"#0b0c10\"\npal <- viridis(1000, option = \"plasma\")\n\na <- 4\nb <- 6\nphi <- pi / 6\nt <- seq(0, 3 * pi, length.out = 8000)\n\ndf <- tibble(\n  t = t,\n  x = sin(a * t + phi),\n  y = sin(b * t)\n)\nNC_modify_FINAL_PLOT_NOT_PENGUINS <- ggplot(df, aes(x, y, color = t)) +\n  geom_path(linewidth = 0.5, alpha = 0.9) +\n  scale_color_gradientn(colors = pal, guide = \"none\") +\n  coord_equal() +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = bg, color = NA),\n    plot.margin = margin(40, 40, 40, 40)\n  )\nNC_modify_FINAL_PLOT_NOT_PENGUINS\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p11-1.png){width=672}\n:::\n:::\n\n\n### Plot 12\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(emo)\nlibrary(gifski)\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(dplyr)\nlibrary(ragg)\nlibrary(here)\n\nlibrary(showtext)\n# Add the system font manually\n# font_add(\"emoji\", \"~/.local/share/fonts/NotoColorEmoji.ttf\")\n# showtext_auto()\n\n# Define x, y, and frames\n# -----------------------------\n# Define paths\nn <- 200\n# Plan path (straight line)\nx <- seq(0, 10, length.out = n)\nplan_y <- seq(0, 0, length.out = n)\n#Reality path (curvy line)\nreality_y <- sin(0.9 * x) + cos(3.8 * x)\nframe <- 1:length(x)\n\n# Determine student emoji: happy if y>0, sad if y<=0\nstudent <- ifelse(\n  reality_y > 0,\n  emo::ji(\"grinning_face\"),\n  emo::ji(\"anxious_face_with_sweat\")\n)\n\ndata <- data.frame(x = x, y = reality_y + 0.5, frame = frame, student = student)\ndata$student <- as.character(data$student)\n# -----------------------------\n# Obstacles (plateau points on Reality line)\n# -----------------------------\nobstacles <- data.frame(\n  x = c(\n    0.063,\n    0.779,\n    1.658,\n    2.520,\n    3.246,\n    4.185,\n    4.944,\n    5.759,\n    6.674,\n    7.382,\n    8.291,\n    9.115,\n    9.867\n  ),\n  y = c(\n    1.028,\n    -0.339,\n    1.997,\n    -0.222,\n    1.192,\n    -1.566,\n    0.032,\n    -1.886,\n    0.701,\n    -0.622,\n    1.920,\n    -0.057,\n    1.497\n  ),\n  label = c(\n    paste0(emo::ji(\"lab_coat\"), emo::ji(\"handshake\")),\n    emo::ji(\"books\"),\n    paste0(emo::ji(\"hundred_points\"), emo::ji(\"page_facing_up\")),\n    paste0(emo::ji(\"mouse_face\"), emo::ji(\"syringe\")),\n    paste0(emo::ji(\"skier\"), emo::ji(\"mountain\")),\n    paste0(emo::ji(\"test_tube\"), emo::ji(\"poo\")),\n    paste0(emo::ji(\"sparkles\"), emo::ji(\"brain\")),\n    emo::ji(\"exploding_head\"),\n    paste0(emo::ji(\"coffee\"), emo::ji(\"pizza\")),\n    paste0(\n      emo::ji(\"man_teacher\"),\n      emo::ji(\"woman_teacher\"),\n      emo::ji(\"angry_face\")\n    ),\n    paste0(emo::ji(\"money_bag\"), emo::ji(\"memo\")),\n    paste0(emo::ji(\"hourglass_not_done\"), emo::ji(\"zombie\")),\n    paste0(emo::ji(\"woman_scientist\"), emo::ji(\"man_scientist\"))\n  )\n)\n\nobstacles$label <- as.character(obstacles$label)\n\n# Build ggplot\np <- ggplot() +\n  geom_line(\n    aes(x, y = plan_y),\n    color = \"steelblue\",\n    linetype = \"dashed\",\n    linewidth = 1\n  ) +\n  geom_line(aes(x, y = reality_y), color = \"red\", linewidth = 1.5) +\n  geom_text(\n    data = data,\n    aes(x, y, label = student, family = \"emoji\"),\n    size = 10\n  ) +\n  geom_text(\n    data = obstacles,\n    aes(x, y, label = label),\n    size = 10,\n    family = \"emoji\"\n  ) +\n  theme_minimal(base_size = 16) +\n  annotate(\n    \"text\",\n    x = -0.5,\n    y = 0,\n    label = \"Plan\",\n    color = \"steelblue\",\n    size = 6\n  ) +\n  annotate(\n    \"text\",\n    x = -0.5,\n    y = 2,\n    label = \"Reality\",\n    color = \"red\",\n    size = 6\n  ) +\n  geom_text(\n    aes(x = 10.3, y = 0, label = as.character(emo::ji(\"graduation_cap\"))),\n    size = 10,\n    family = \"emoji\"\n  ) +\n  theme_void(base_size = 16) +\n  labs(title = \"PhD Journey: Plan vs Reality\")\n\n# -----------------------------\n# Animate along frames\n# -----------------------------\nanim <- p + transition_reveal(along = frame)\n\ngif_plot <- animate(\n  anim,\n  nframes = 200,\n  fps = 15,\n  width = 800,\n  height = 400,\n  device = \"ragg_png\",\n  renderer = gifski_renderer()\n)\n\n# -----------------------------\n# Save GIF\n# -----------------------------\nanim_save(\n  filename = \"phd_journey.gif\",\n  animation = gif_plot,\n  path = here()\n)\n```\n:::\n\n\n![](img/phd_journey.gif)\n\n### Plot 13\n\n\n::: {.cell}\n\n```{.r .cell-code}\naqtib <- as_tibble(airquality) |>\n  drop_na()\n\nggplot(\n  aqtib,\n  mapping = aes(\n    x = Day,\n    y = Ozone,\n    color = Temp\n  )\n) +\n  geom_point(shape = 8, alpha = 0.5) +\n  scale_x_reverse() +\n  scale_y_log10() +\n  scale_color_gradientn(colours = rainbow(9)) +\n  geom_smooth(method = lm, na.rm = FALSE, orientation = NA, se = FALSE) +\n  facet_wrap(\n    ~Month,\n    labeller = labeller(\n      Month = c(\n        \"5\" = \"yam\",\n        \"6\" = \"enuj\",\n        \"7\" = \"yulj\",\n        \"8\" = \"tsugua\",\n        \"9\" = \"rebmetpes\"\n      )\n    )\n  ) +\n  labs(\n    x = \"Month time (days) ->\",\n    y = \"OO O ( b  i  l  l  i    o   n    s   )\",\n    title = \"global warming in new york is in june and september\",\n    caption = \"(august seems to get cold. hard to tell, but seems like its still snowing)\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"yellow\"),\n    strip.background = element_blank(),\n    strip.text = element_text(size = 13, color = \"orange\"),\n    panel.border = element_rect(color = \"yellow3\", fill = NA, size = 1),\n    panel.background = element_rect(fill = \"yellow\"),\n    panel.grid.major = element_line(color = \"yellow\"),\n    panel.grid.minor = element_line(\n      color = \"blue\",\n      linetype = \"dotted\",\n      linewidth = 1\n    ),\n    axis.title.x = element_text(size = 13, color = \"yellow3\", angle = 180),\n    axis.title.y = element_text(size = 13, color = \"darkgreen\"),\n    legend.background = element_rect(fill = \"yellow\"),\n  ) +\n  geom_segment(\n    data = subset(aqtib, Month == \"6\"),\n    aes(x = 3, y = 3, xend = 12, yend = 15),\n    arrow = arrow(length = unit(0.2, \"inches\")),\n    color = \"red\"\n  ) +\n  geom_segment(\n    data = subset(aqtib, Month == \"7\"),\n    aes(x = 20, y = 2, xend = 16, yend = 6),\n    arrow = arrow(length = unit(0.2, \"inches\")),\n    color = \"blue\"\n  ) +\n  geom_segment(\n    data = subset(aqtib, Month == \"9\"),\n    aes(x = 27, y = 2, xend = 14, yend = 17),\n    arrow = arrow(length = unit(0.2, \"inches\")),\n    color = \"red\"\n  ) +\n  geom_text(\n    data = subset(aqtib, Month == \"6\"),\n    aes(x = 5, y = 3, label = \"blast off!\"),\n    color = \"purple\",\n    fontface = \"bold\"\n  ) +\n  geom_text(\n    data = subset(aqtib, Month == \"9\"),\n    aes(x = 25, y = 2, label = \"heat rises!\"),\n    color = \"purple\",\n    fontface = \"bold\"\n  ) +\n  geom_text(\n    data = subset(aqtib, Month == \"7\"),\n    aes(x = 20, y = 2, label = \"still snowing???\"),\n    color = \"grey\"\n  )\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p13-1.png){width=672}\n:::\n:::\n\n\n### Plot 14\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPattern <- read_csv(here(\"Cross-Stitch-Pattern_250901.csv\"))\n\nFloss_colors <- c(\n  \"Black\" = \"#000000\",\n  \"Cinnamon\" = \"#E69F00\",\n  \"Fern Green\" = \"#009E73\",\n  \"Raspberry - Light\" = \"#CC79A7\",\n  \"Stone Grey - Dark\" = \"#B0B0B0\",\n  \"Surf Blue - Light\" = \"#56B4E9\",\n  \"Topaz - Light\" = \"#D55E00\"\n)\n\nggplot(\n  Pattern,\n  aes(x = x, y = y, color = color_name)\n) +\n  geom_point(\n    shape = 4,\n    size = 1.6,\n    stroke = 1.3\n  ) +\n  scale_color_manual(values = Floss_colors) +\n  coord_fixed(ratio = 1) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Cross Stitch Pattern\"\n  ) +\n  theme(\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_blank(),\n    legend.position = \"none\",\n    plot.title = element_text(\n      size = 18,\n      face = \"bold\",\n      family = \"mono\",\n      hjust = 0.5\n    )\n  )\n```\n:::\n\n\n![](img/cross-stitch.png)\n\n### Plot 15\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(emo)\n# library(emojifont)\nlibrary(here)\nlibrary(gganimate)\nlibrary(ragg)\ndata(\"WorldPhones\")\n\nset.seed(42)\n\nworldphones_tidy <- WorldPhones %>%\n  as.data.frame() %>%\n  rownames_to_column(var = \"year\") %>%\n  pivot_longer(\n    cols = -year,\n    names_to = \"region\",\n    values_to = \"phones\"\n  ) %>%\n  mutate(\n    emoji = case_when(\n      region == \"N.Amer\" ~ emo::ji(\"eagle\"),\n      region == \"Europe\" ~ emo::ji(\"bear\"),\n      region == \"Asia\" ~ emo::ji(\"tiger\"),\n      region == \"S.Amer\" ~ emo::ji(\"monkey\"),\n      region == \"Oceania\" ~ emo::ji(\"penguin\"),\n      region == \"Africa\" ~ emo::ji(\"giraffe\"),\n      region == \"Mid.Amer\" ~ emo::ji(\"cow\")\n    )\n  ) %>%\n  select(\n    year,\n    emoji,\n    region,\n    phones\n  )\n\nggplot(\n  worldphones_tidy,\n  aes(\n    x = year,\n    y = phones,\n    color = region\n  )\n) +\n  geom_text(\n    aes(label = emoji),\n    size = 4,\n    show.legend = FALSE\n  ) +\n  labs(\n    x = \"BEST YEARS\",\n    y = \"TOO MANY PHONES\",\n    title = \"ANIMALS LOVE PHONES\",\n    caption = \"eagles are addicted to phones\"\n  ) +\n  scale_y_continuous(\n    limits = c(0, 100000),\n    breaks = seq(0, 100000, 10000),\n    labels = scales::comma\n  ) +\n  scale_x_discrete(position = \"top\") +\n  theme(\n    axis.text.x = element_text(\n      face = \"bold\",\n      color = \"#ffeda0\",\n      size = 13,\n      angle = 179\n    ),\n    axis.text.y = element_text(\n      face = \"bold\",\n      color = \"orange\",\n      size = 10,\n      angle = 180\n    ),\n    plot.background = element_rect(fill = \"pink\"),\n    plot.title = element_text(\n      face = \"bold.italic\",\n      color = \"green\",\n      size = 18,\n      angle = 183\n    ),\n    plot.caption = element_text(color = \"white\", size = 12),\n    axis.title.x = element_text(size = 22, color = \"dark blue\", angle = 12),\n    axis.title.y = element_text(color = \"orange\", angle = 181, size = 14),\n    panel.background = element_rect(fill = \"light blue\")\n  )\nprint(worldphones_tidy)\n```\n:::\n\n\n![](img/eagle-phones.png)\n\n### Plot 16\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyverse)\necho = TRUE\nsun_tib <- tibble(\n  year = as.numeric(time(sunspots)),\n  sunspots = as.numeric(sunspots)\n)\n\nggplot(\n  sun_tib,\n  aes(x = year, y = sunspots)\n) +\n  geom_bar(\n    stat = \"identity\",\n    fill = \"green\",\n    color = \"red\",\n    width = 100\n  ) +\n  geom_line(color = \"purple\", linewidth = 5, linetype = \"dotdash\") +\n  geom_point(color = \"yellow\", size = 2, alpha = 0.3, shape = 8) +\n  geom_smooth(\n    method = \"loess\",\n    span = .04,\n    color = \"white\",\n    fill = \"orange\",\n    formula = y ~ x,\n  ) +\n  scale_y_reverse() +\n  theme_void(base_size = 28) +\n  theme(\n    panel.background = element_rect(fill = \"pink\"),\n    plot.background = element_rect(fill = \"#FFDB58\"),\n    plot.title = element_text(\n      color = \"limegreen\",\n      face = \"bold\",\n      hjust = 0.5,\n      family = \"Comic Sans MS\",\n      angle = 2,\n      size = 35\n    ),\n    axis.text.x = element_text(\n      face = \"bold.italic\",\n      color = \"red\",\n      size = 4,\n      angle = 180\n    ),\n    axis.title.x = element_text(\n      size = 12,\n      color = \"orange\",\n      angle = 2\n    ),\n    plot.subtitle = element_text(\n      color = \"orange\",\n      face = \"bold\",\n      family = \"Comic Sans MS\",\n      size = 20,\n      hjust = \".4\"\n    ),\n    plot.caption = element_text(\n      color = \"white\",\n      face = \"italic\",\n      family = \"Comic Sans MS\",\n      size = 30,\n      hjust = \".5\"\n    )\n  ) +\n  labs(\n    title = \" SUNSPOTs\",\n    subtitle = \"Hotter  than  the hottest flame  on  earth\",\n    caption = \"Cant escape the sunspots\",\n    x = \"time is relative\",\n    y = \"spotty bois\"\n  )\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p16-1.png){width=672}\n:::\n:::\n\n\n### Plot 17\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(purrr)\nset.seed(1972)\nlibrary(gganimate)\n\nletters_df <- data.frame(\n  x = 1:4,\n  y = 0,\n  lab = c(\"A\", \"B\", \"B\", \"A\"),\n  col = c(\"#e91e63\", \"#ff8fc7\", \"#ff8fc7\", \"#e91e63\") # pinks\n)\n\n\nshape_pool <- c(8, 3, 4, 18, 17)\nn_sparkles <- 700\nsparkles <- data.frame(\n  x = runif(n_sparkles, 0.3, 4.7),\n  y = runif(n_sparkles, -1.2, 1.2),\n  size = runif(n_sparkles, 0.8, 3.0),\n  alpha = runif(n_sparkles, 0.80, 1),\n  col = sample(\n    c(\"#f72585\", \"#ff5fa2\", \"#ff8fc7\", \"#ffd1e8\", \"#ffd166\"),\n    n_sparkles,\n    TRUE\n  ),\n  shape = sample(shape_pool, n_sparkles, TRUE)\n)\n\nmake_bursts <- function(n_bursts = 40, min_rays = 6, max_rays = 10) {\n  centers <- data.frame(\n    x0 = runif(n_bursts, 0.4, 4.6),\n    y0 = runif(n_bursts, -1.1, 1.1)\n  )\n  bursts <- do.call(\n    rbind,\n    lapply(1:nrow(centers), function(i) {\n      k <- sample(min_rays:max_rays, 1)\n      th <- seq(0, 2 * pi, length.out = k + 1)[-(k + 1)]\n      L <- runif(k, 0.05, 0.12)\n      data.frame(\n        x = centers$x0[i],\n        y = centers$y0[i],\n        xend = centers$x0[i] + L * cos(th),\n        yend = centers$y0[i] + L * sin(th),\n        alpha = runif(1, 0.08, 0.18),\n        size = runif(1, 0.4, 0.9),\n        col = sample(c(\"#f72585\", \"#ff8fc7\", \"#ffd1e8\"), 1)\n      )\n    })\n  )\n  bursts\n}\nbursts <- make_bursts()\n\ngg <- ggplot() +\n  geom_segment(\n    data = bursts,\n    aes(\n      x = x,\n      y = y,\n      xend = xend,\n      yend = yend,\n      alpha = alpha,\n      size = size,\n      color = col\n    ),\n    lineend = \"round\",\n    show.legend = FALSE\n  ) +\n  geom_point(\n    data = sparkles,\n    aes(x, y, shape = shape, size = size, alpha = alpha, color = col),\n    show.legend = FALSE\n  ) +\n  geom_text(\n    data = letters_df,\n    aes(x, y, label = lab, color = col),\n    fontface = \"bold\",\n    size = 30\n  ) +\n  scale_shape_identity() +\n  scale_size_identity() +\n  scale_alpha_identity() +\n  scale_color_identity() +\n  coord_cartesian(xlim = c(0.2, 4.8), ylim = c(-1.4, 1.4), expand = FALSE) +\n  theme_void(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA),\n    plot.margin = margin(30, 30, 30, 30)\n  )\n\ngg\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p17-1.png){width=672}\n:::\n:::\n\n\n### Plot 18\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nmsleep_tbl <- drop_na(msleep)\n\nggplot(\n  msleep_tbl,\n  aes(\n    x = brainwt,\n    y = sleep_rem,\n    color = order,\n    shape = vore\n  )\n) +\n  geom_jitter(size = 10) +\n  theme(\n    plot.background = element_rect(fill = \"#c3cb6e\"),\n    plot.title = element_text(\n      size = 30,\n      hjust = 0.25,\n      color = \"#72601b\",\n      angle = 3\n    ),\n    plot.caption = element_text(size = 10, face = \"italic\", angle = 25),\n\n    panel.background = element_rect(fill = '#c6c58b', size = 4),\n    panel.border = element_rect(fill = 'NA', color = \"#818c3c\", size = 2),\n\n    axis.title.x = element_text(\n      face = \"bold.italic\",\n      size = 13,\n      color = \"#e4e6a8\",\n      angle = 70\n    ),\n    axis.title.y = element_text(\n      face = \"bold\",\n      size = 20,\n      color = \"#e4e6a8\",\n      angle = 115\n    ),\n    axis.text = element_text(face = \"italic\", size = 15),\n    axis.text.x.bottom = element_text(angle = 140),\n\n    legend.background = element_rect(fill = \"#fbff00\"),\n    legend.key = element_rect(fill = \"#b78b3c\"),\n    #legend.direction = \"vertical\",\n    legend.position = \"bottom\",\n    #legend.justification = \"left\",\n    legend.title = element_text(family = \"serif\", color = \"#ef9e3a\", size = 2),\n    legend.text = element_text(\n      family = \"mono\",\n      face = \"italic\",\n      color = \"#c89c45\",\n      size = 4\n    )\n  ) +\n  labs(\n    title = \"More sleeps = big brain?\",\n    x = \"Brain Weight\",\n    y = \"REM Cycles\",\n    col = \"Species Order\"\n  )\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p18-1.png){width=672}\n:::\n:::\n\n\n### Plot 19\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nset.seed(999)\nn_layers <- 50\nn_points <- 6\n\npolys <- tibble()\nfor (i in 1:n_layers) {\n  angle <- seq(0, 2 * pi, length.out = n_points + 1)[-1]\n  radius <- runif(n_points, min = i * 0.5, max = i * 1.5)\n  x <- radius * cos(angle) + rnorm(n_points, 0, 0.3)\n  y <- radius * sin(angle) + rnorm(n_points, 0, 0.3)\n\n  temp <- tibble(\n    layer = i,\n    x = x,\n    y = y,\n    fill = sample(c(\"#FF3C38\", \"#38FFDC\", \"#FFC738\", \"#8A38FF\"), 1)\n  )\n  polys <- bind_rows(polys, temp)\n}\n\nn_rows <- nrow(polys)\n\nggplot(polys, aes(x = x, y = y, group = layer, fill = fill)) +\n  geom_polygon(alpha = 0.5, color = \"white\", linewidth = 0.2) +\n  geom_point(\n    aes(\n      x = x + rnorm(n_rows, 0, 0.1),\n      y = y + rnorm(n_rows, 0, 0.1),\n      color = fill\n    ),\n    size = 1,\n    alpha = 0.7\n  ) +\n  scale_fill_identity() +\n  scale_color_identity() +\n  coord_fixed() +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"#000000\"),\n    panel.background = element_rect(fill = \"#000000\")\n  )\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p19-1.png){width=672}\n:::\n:::\n\n\n### Plot 20\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggforce)\nlibrary(RColorBrewer)\nlibrary(dplyr)\n\nhori_lines <- tibble(\n  x = seq(1, -1, by = -.08),\n  xend = seq(1, -1, by = -.08),\n  y = -1,\n  yend = 1\n)\n\ninner_circle <- tibble(\n  x = 0,\n  y = 0,\n  radius = 0.6\n)\n\narc <- tibble(\n  x = 0,\n  y = 0,\n  r = .5,\n  start = seq(0, 2 * pi, length.out = 9)[-9],\n  end = seq(0, 2 * pi, length.out = 9)[-1],\n  type = c(\"A\", \"B\", \"B\", \"A\", \"A\", \"B\", \"B\", \"A\")\n)\n\nneon_rain_palette <- c(\"#32faca\", \"#58d0cb\", \"#7fa5cb\", \"#a57bcc\", \"#cc51cd\")\n\np <- ggplot() +\n\n  geom_segment(\n    data = hori_lines,\n    aes(x = x, xend = xend, y = y, yend = yend, color = \"lines\"),\n    size = 1\n  ) +\n\n  geom_circle(\n    data = inner_circle,\n    aes(x0 = x, y0 = y, r = radius, fill = \"circle_fill\"),\n    size = 1,\n    alpha = 0.75,\n    color = \"#1A1A1A\" # Dark border to contrast with the neon colors\n  ) +\n\n  geom_arc(\n    data = arc,\n    aes(\n      x0 = x,\n      y0 = y,\n      r = r,\n      start = start,\n      end = end,\n      color = \"arc_lines\",\n      type = type\n    ),\n    size = 1\n  ) +\n\n  scale_color_manual(\n    values = c(\n      \"lines\" = neon_rain_palette[5], # A bright purple for the lines\n      \"arc_lines\" = neon_rain_palette[1] # A bright teal for the arc\n    )\n  ) +\n\n  scale_fill_manual(\n    values = c(\n      \"circle_fill\" = neon_rain_palette[3] # A muted blue for the circle fill\n    )\n  ) +\n\n  coord_fixed() +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#1A1A1A\")\n  )\n\nprint(p)\n```\n\n::: {.cell-output-display}\n![](plot-competition-2025_files/figure-html/p20-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "plot-competition-2025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}