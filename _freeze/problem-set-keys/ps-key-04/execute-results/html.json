{
  "hash": "3f064e8e30677f6ff2eab43841213a3a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp Problem Set 4\"\nauthor: \"Your name here\"\ndate: last-modified\nformat:\n  html:\n    embed-resources: true\n---\n\n## Problem Set\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not\nallowed to post correct answers in slack.\n\n**The problem set is due 12pm on Sept 1.**\n\n## Grading rubric\n\n- Everything is good: full points\n- Partially correct answer: depends on how many steps are correct\n- Reasonable attempt: half points\n\n## Question 1 **5 points**\n\n1. Load the tidyverse and here packages using `library()`.\n2. Import datasets: `data/data_rna_protein.csv.gz` using `read_csv()` and `here()`.\n\n`data_rna_protein.csv.gz`: This is a combined dataset from an RNAseq and SILAC\nproteomics experiment, where a transcription factor (TF) was differentially\nexpressed and the fold change in RNA and protein calculated between\nTF-expressing and non-expressing cells.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n```\n\n\n:::\n\n```{.r .cell-code}\nexp_tbl <- read_csv(\n  here(\"data/bootcamp/data_rna_protein.csv.gz\")\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 21282 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): geneid\ndbl (16): iDUX4_logFC, iDUX4_logCPM, iDUX4_LR, iDUX4_pval, iDUX4_fdr, hl.rat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Question 2 **5 points**\n\nLet's build a data processing workflow step by step. This teaches you how to build complex pipelines gradually - a key skill in data analysis.\n\n**Step 1**: First, explore the data so you know what you're working with. Use `glimpse()` to see column types and `summary()` to see distributions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Always explore your data first!\nexp_tbl |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 21,282\nColumns: 17\n$ geneid         <chr> \"RFPL1\", \"DUXA\", \"RFPL2\", \"LEUTX\", \"RFPL3S\", \"ZSCAN5C\",…\n$ iDUX4_logFC    <dbl> 9.366333, 8.728522, 8.582827, 8.136148, 8.031894, 7.837…\n$ iDUX4_logCPM   <dbl> 8.568344, 9.740241, 9.760915, 8.702694, 5.563714, 6.532…\n$ iDUX4_LR       <dbl> 2910.21184, 5195.45733, 4397.04659, 3276.44418, 392.901…\n$ iDUX4_pval     <dbl> 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 1.93e-87, 5.12e…\n$ iDUX4_fdr      <dbl> 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 8.64e-86, 5.76e…\n$ hl.ratio       <dbl> 4.415276, 8.919536, 3.032258, 7.151629, NA, 3.910093, N…\n$ area           <dbl> 222742.2, 3523464.3, 119468.9, 1579141.5, NA, 307343.6,…\n$ protein.length <dbl> 317, 204, 378, 168, NA, 496, NA, NA, 465, NA, 474, NA, …\n$ rep            <dbl> 3.760000, 3.500000, 3.888889, 3.333333, NA, 4.000000, N…\n$ IQR            <dbl> 1.952243, 6.435921, 1.694725, 5.303046, NA, 0.000000, N…\n$ QCoD           <dbl> 0.4421564, 0.7215533, 0.5588985, 0.7415158, NA, 0.00000…\n$ count          <dbl> 25, 32, 9, 6, NA, 1, NA, NA, 21, NA, 10, NA, 1, 80, NA,…\n$ mean           <dbl> 0.004465732, -0.003224870, 0.024341945, -0.009047206, N…\n$ sd             <dbl> 0.17197783, 0.13994973, 0.29149227, 0.38073424, NA, 2.0…\n$ zscore         <dbl> 25.647554, 63.756902, 10.319026, 18.807544, NA, 1.89808…\n$ pval           <dbl> 4.500000e-145, 0.000000e+00, 5.780000e-25, 6.550000e-79…\n```\n\n\n:::\n\n```{.r .cell-code}\nexp_tbl |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    geneid           iDUX4_logFC       iDUX4_logCPM       iDUX4_LR        \n Length:21282       Min.   :-3.4751   Min.   : 1.264   Min.   :    0.000  \n Class :character   1st Qu.:-0.9996   1st Qu.: 3.385   1st Qu.:    2.068  \n Mode  :character   Median :-0.3772   Median : 4.780   Median :    9.049  \n                    Mean   :-0.1574   Mean   : 4.801   Mean   :   53.971  \n                    3rd Qu.: 0.3977   3rd Qu.: 6.064   3rd Qu.:   30.949  \n                    Max.   : 9.3663   Max.   :14.915   Max.   :13648.327  \n                    NA's   :8950      NA's   :8950     NA's   :8950       \n   iDUX4_pval       iDUX4_fdr         hl.ratio             area          \n Min.   :0.0000   Min.   :0.0000   Min.   :-19.6540   Min.   :     7952  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.: -0.3842   1st Qu.:   290641  \n Median :0.0026   Median :0.0052   Median : -0.0529   Median :   545151  \n Mean   :0.1341   Mean   :0.1520   Mean   : -0.0306   Mean   :  1112496  \n 3rd Qu.:0.1504   3rd Qu.:0.2002   3rd Qu.:  0.2283   3rd Qu.:  1014351  \n Max.   :0.9976   Max.   :0.9980   Max.   : 19.3091   Max.   :878105037  \n NA's   :8950     NA's   :8950     NA's   :15969      NA's   :15969      \n protein.length        rep             IQR               QCoD          \n Min.   :  19.0   Min.   :3.000   Min.   : 0.0000   Min.   :-7521.713  \n 1st Qu.: 260.0   1st Qu.:3.333   1st Qu.: 0.3805   1st Qu.:   -2.960  \n Median : 433.0   Median :3.495   Median : 0.8014   Median :    0.000  \n Mean   : 603.4   Mean   :3.446   Mean   : 1.1079   Mean   :   -1.100  \n 3rd Qu.: 728.0   3rd Qu.:3.560   3rd Qu.: 1.1911   3rd Qu.:    2.122  \n Max.   :8797.0   Max.   :4.000   Max.   :26.1119   Max.   : 3618.200  \n NA's   :15969    NA's   :15969   NA's   :15969     NA's   :15969      \n     count             mean               sd             zscore        \n Min.   :   1.0   Min.   :-0.1496   Min.   :0.0152   Min.   :-77.7125  \n 1st Qu.:   2.0   1st Qu.:-0.0024   1st Qu.:0.1453   1st Qu.: -1.1955  \n Median :   8.0   Median : 0.0024   Median :0.3121   Median : -0.1833  \n Mean   :  42.1   Mean   : 0.0239   Mean   :0.6794   Mean   :  0.2260  \n 3rd Qu.:  31.0   3rd Qu.: 0.0315   3rd Qu.:1.3565   3rd Qu.:  0.7153  \n Max.   :2646.0   Max.   : 0.3272   Max.   :2.5400   Max.   :105.5495  \n NA's   :15969    NA's   :15969     NA's   :15969    NA's   :15969     \n      pval       \n Min.   :0.0000  \n 1st Qu.:0.0315  \n Median :0.3171  \n Mean   :0.3816  \n 3rd Qu.:0.7035  \n Max.   :1.0000  \n NA's   :15969   \n```\n\n\n:::\n:::\n\n\n**Step 2**: Select only the columns we need:\n\n- `geneid`      (gene identifier)\n- `iDUX4_logFC` (RNA fold change)\n- `iDUX4_fdr`   (RNA pvalue)\n- `hl.ratio`    (protein fold change)\n- `pval`        (protein pvalue)\n\nUse `select()` and list the columns you want to keep:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl |>\n  select(geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, pval)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21,282 × 5\n   geneid   iDUX4_logFC iDUX4_fdr hl.ratio       pval\n   <chr>          <dbl>     <dbl>    <dbl>      <dbl>\n 1 RFPL1           9.37 0             4.42  4.50e-145\n 2 DUXA            8.73 0             8.92  0        \n 3 RFPL2           8.58 0             3.03  5.78e- 25\n 4 LEUTX           8.14 0             7.15  6.55e- 79\n 5 RFPL3S          8.03 8.64e- 86    NA    NA        \n 6 ZSCAN5C         7.84 5.76e-169     3.91  5.77e-  2\n 7 USP29           7.71 4.48e- 36    NA    NA        \n 8 FAM189A2        7.68 1.46e- 41    NA    NA        \n 9 CCNA1           7.66 0             5.11  7.10e-169\n10 ZNF280A         7.55 2.35e- 54    NA    NA        \n# ℹ 21,272 more rows\n```\n\n\n:::\n:::\n\n\n**Step 3**: Rename columns for clarity (this makes your code more readable).\n\nUse `dplyr::rename()` with the pattern `new_name = old_name, ...`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl |>\n  select(geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, pval) |>\n  rename(\n    rna_FC = iDUX4_logFC,\n    rna_pval = iDUX4_fdr,\n    protein_FC = hl.ratio,\n    protein_pval = pval\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21,282 × 5\n   geneid   rna_FC  rna_pval protein_FC protein_pval\n   <chr>     <dbl>     <dbl>      <dbl>        <dbl>\n 1 RFPL1      9.37 0               4.42    4.50e-145\n 2 DUXA       8.73 0               8.92    0        \n 3 RFPL2      8.58 0               3.03    5.78e- 25\n 4 LEUTX      8.14 0               7.15    6.55e- 79\n 5 RFPL3S     8.03 8.64e- 86      NA      NA        \n 6 ZSCAN5C    7.84 5.76e-169       3.91    5.77e-  2\n 7 USP29      7.71 4.48e- 36      NA      NA        \n 8 FAM189A2   7.68 1.46e- 41      NA      NA        \n 9 CCNA1      7.66 0               5.11    7.10e-169\n10 ZNF280A    7.55 2.35e- 54      NA      NA        \n# ℹ 21,272 more rows\n```\n\n\n:::\n:::\n\n\n**Step 4**: Clean the data by removing rows with missing values. Use `drop_na()` to remove rows with any missing values, and `distinct()` to remove duplicate rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl |>\n  select(geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, pval) |>\n  rename(\n    rna_FC = iDUX4_logFC,\n    rna_pval = iDUX4_fdr,\n    protein_FC = hl.ratio,\n    protein_pval = pval\n  ) |>\n  drop_na() |> # Remove rows with any missing values\n  distinct() # Remove duplicate rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,931 × 5\n   geneid   rna_FC  rna_pval protein_FC protein_pval\n   <chr>     <dbl>     <dbl>      <dbl>        <dbl>\n 1 RFPL1      9.37 0               4.42    4.50e-145\n 2 DUXA       8.73 0               8.92    0        \n 3 RFPL2      8.58 0               3.03    5.78e- 25\n 4 LEUTX      8.14 0               7.15    6.55e- 79\n 5 ZSCAN5C    7.84 5.76e-169       3.91    5.77e-  2\n 6 CCNA1      7.66 0               5.11    7.10e-169\n 7 PRAMEF1    7.54 0               4.82    3.49e- 76\n 8 TPRX1      7.29 2.41e-132       7.35    2.85e-  4\n 9 PRAMEF12   7.25 0               7.55    0        \n10 RFPL4B     7.16 0               7.46    0        \n# ℹ 4,921 more rows\n```\n\n\n:::\n:::\n\n\n**Step 5**: Finally, arrange the data and save it. Use `arrange()` to sort by RNA fold change (high to low), then protein fold change (low to high):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl_subset <- exp_tbl |>\n  select(geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, pval) |>\n  rename(\n    rna_FC = iDUX4_logFC,\n    rna_pval = iDUX4_fdr,\n    protein_FC = hl.ratio,\n    protein_pval = pval\n  ) |>\n  drop_na() |>\n  distinct() |>\n  arrange(desc(rna_FC), protein_FC) # Sort by RNA fold change (high to low), then protein fold change (low to high)\n\nexp_tbl_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,931 × 5\n   geneid   rna_FC  rna_pval protein_FC protein_pval\n   <chr>     <dbl>     <dbl>      <dbl>        <dbl>\n 1 RFPL1      9.37 0               4.42    4.50e-145\n 2 DUXA       8.73 0               8.92    0        \n 3 RFPL2      8.58 0               3.03    5.78e- 25\n 4 LEUTX      8.14 0               7.15    6.55e- 79\n 5 ZSCAN5C    7.84 5.76e-169       3.91    5.77e-  2\n 6 CCNA1      7.66 0               5.11    7.10e-169\n 7 PRAMEF1    7.54 0               4.82    3.49e- 76\n 8 TPRX1      7.29 2.41e-132       7.35    2.85e-  4\n 9 PRAMEF12   7.25 0               7.55    0        \n10 RFPL4B     7.16 0               7.46    0        \n# ℹ 4,921 more rows\n```\n\n\n:::\n:::\n\n\n## Question 3 **5 points**\n\nLet's practice good data analysis habits by checking for potential issues. Quality control is essential in real data analysis.\n\n**Check for duplicates and missing values**:\n\n1. Use `count()` to check for duplicate genes\n1. Use `summarize()` with `across()` to count missing values in all columns\n1. Use summary statistics to understand data distributions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicate genes (there shouldn't be any after distinct())\ndup_tbl <-\n  exp_tbl_subset |>\n  count(geneid) |>\n  filter(n > 1) # Any genes appearing more than once?\n```\n:::\n\n\nThere are 14 duplicate genes in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary of missing values by column\nexp_tbl_subset |>\n  summarize(\n    across(everything(), ~ sum(is.na(.)))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  geneid rna_FC rna_pval protein_FC protein_pval\n   <int>  <int>    <int>      <int>        <int>\n1      0      0        0          0            0\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the distribution of our main variables\nexp_tbl_subset |>\n  summarize(\n    across(\n      c(rna_FC, protein_FC),\n      list(\n        mean = ~ mean(., na.rm = TRUE),\n        median = ~ median(., na.rm = TRUE),\n        sd = ~ sd(., na.rm = TRUE)\n      )\n    ),\n    .groups = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  rna_FC_mean rna_FC_median rna_FC_sd protein_FC_mean protein_FC_median\n        <dbl>         <dbl>     <dbl>           <dbl>             <dbl>\n1      -0.176        -0.309      1.12         -0.0376           -0.0543\n# ℹ 1 more variable: protein_FC_sd <dbl>\n```\n\n\n:::\n:::\n\n\nFor your reference, here are three different ways to write the same function inside `across()`. They all compute the mean while ignoring `NA` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_tbl_subset |>\n  summarize(\n    across(\n      c(rna_FC, protein_FC),\n      list(\n        # Three different ways to write the same function\n        mean1 = ~ mean(., na.rm = TRUE),\n        mean2 = function(x) mean(, na.rm = TRUE),\n        mean3 = \\(x) mean(x, na.rm = TRUE),\n      )\n    )\n  )\n```\n:::\n\n## Question 4 **5 points**\n\nHow well do the overall `rna_FC` and `protein_FC` values correlate in this experiment? We'll explore this with visualization and statistics.\n\n**Step 1**: Create a scatter plot of `rna_FC` vs `protein_FC` using `ggplot()`. Use:\n\n- `aes()` to map x and y variables\n- `geom_point()` to create the scatter plot\n- `labs()` to add informative axis labels and title\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  exp_tbl_subset,\n  aes(\n    x = rna_FC,\n    y = protein_FC\n  )\n) +\n  geom_point() +\n  labs(\n    x = \"RNA Fold Change (log2)\",\n    y = \"Protein Fold Change (log2)\",\n    title = \"RNA vs Protein Expression Changes\"\n  )\n```\n\n::: {.cell-output-display}\n![](ps-key-04_files/figure-html/q3-plot-1.png){width=672}\n:::\n:::\n\n\n**Step 2**: Add reference lines to help interpret the correlation. Use:\n\n- `geom_abline(slope = 1, intercept = 0)` for perfect correlation line\n- `geom_smooth(method = \"lm\", se = FALSE)` for the computed trend line\n- adjust the `geom_point()` aesthetic to `alpha = 0.6`, making points slightly transparent for better visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  exp_tbl_subset,\n  aes(\n    x = rna_FC,\n    y = protein_FC\n  )\n) +\n  geom_point(alpha = 0.6) + # Make points a bit transparent\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linewidth = 1) + # Perfect correlation line\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\", linewidth = 1) + # Actual relationship\n  labs(\n    x = \"RNA Fold Change (log2)\",\n    y = \"Protein Fold Change (log2)\",\n    title = \"RNA vs Protein Expression Changes\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ps-key-04_files/figure-html/q3-plot-lines-1.png){width=672}\n:::\n:::\n\n\n**Step 3**: Calculate the correlation coefficient using `cor()`. Use Spearman correlation since it's robust to outliers. Use `?cor` to see the function documentation. You will need to specify two vectors for the calculation, and it's easiest to provide them using the `$` operator to extract columns from the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna_prot_cor <- cor(\n  exp_tbl_subset$rna_FC,\n  exp_tbl_subset$protein_FC,\n  method = \"spearman\"\n)\n\nrna_prot_cor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3458433\n```\n\n\n:::\n:::\n\n\n### Answer\n\nThe green line shows perfect correlation (y = x), and the blue line shows the actual relationship in our data. The Spearman correlation is 0.346, indicating a strong positive correlation between RNA and protein changes, but not perfect correlation.\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output.\n\nThen paste the URL of this Posit Cloud project into the problem set on Canvas.\n",
    "supporting": [
      "ps-key-04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}