{
  "hash": "22fe16eba79e3f0bc2a0f823b730df76",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Problem Set 2 Key\"\nauthor: \"JH\"\n---\n\n## Problem Set\n\nEach problem below is worth **4 points**.\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\n\n**The problem set is due 5pm on Aug 27.**\n\n### Grading rubric\n\n-   Everything is good: 5 points\n-   Partially correct answers: 3-4 points\n-   Reasonable attempt: 2 points\n\n## Question 1\n\nStart by loading the libraries you need for analysis below. When in doubt, start by loading the tidyverse package. You should also load `here`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n```\n\n\n:::\n:::\n\n\nNow import the dataset `data_transcript_exp_subset` using the *readr* package. Use `read_csv()` to import the file.\n\nThe file is located at `data/data_transcript_exp_subset.csv.gz` - use `here()` to create the complete path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- read_csv(here(\"data/bootcamp/data_transcript_exp_subset.csv.gz\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ensembl_transcript_id\ndbl (6): rna_0h_rep1, rna_0h_rep2, rna_0h_rep3, rna_14h_rep1, rna_14h_rep2, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Question 2\n\n**Explore the dataset. Is this dataset tidy? If not, why not?**\n\nThis data frame is a subset (100 lines) of transcript-level gene expression data where transcript abundance was measured at two different time points of a certain treatment conducted in triplicates. The column names have the format of `molecule_time_replicate`\n\nFirst, explore the structure of the dataset using some of the functions we learned in class. Try using `glimpse()`, `summary()`, and `names()` to understand the data structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 7\n   ensembl_transcript_id        rna_0h_rep1 rna_0h_rep2 rna_0h_rep3 rna_14h_rep1\n   <chr>                              <dbl>       <dbl>       <dbl>        <dbl>\n 1 ENST00000327044.6_51_2298          243         322         303         177   \n 2 ENST00000338591.7_360_2034          19          17          15           9   \n 3 ENST00000379389.4_176_647           45          53          48          11   \n 4 ENST00000379370.6_1158_6186         42          50          52          32   \n 5 ENST00000379339.5_212_1352          17          19          25           3   \n 6 ENST00000263741.11_1328_1496        27.5        33.7        36.3        22.5 \n 7 ENST00000360001.10_285_1350        158         170.        171.        121   \n 8 ENST00000263741.11_315_1338        148.        162.        158.        116.  \n 9 ENST00000379198.3_138_1002          11          21          23           6   \n10 ENST00000347370.6_475_1096          27.3        23.8        28.5         7.33\n# ℹ 90 more rows\n# ℹ 2 more variables: rna_14h_rep2 <dbl>, rna_14h_rep3 <dbl>\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's explore the data more systematically\n# Look at the column names\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ensembl_transcript_id\" \"rna_0h_rep1\"           \"rna_0h_rep2\"          \n[4] \"rna_0h_rep3\"           \"rna_14h_rep1\"          \"rna_14h_rep2\"         \n[7] \"rna_14h_rep3\"         \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n ensembl_transcript_id  rna_0h_rep1       rna_0h_rep2        rna_0h_rep3      \n Length:100            Min.   :   0.00   Min.   :    0.00   Min.   :    0.00  \n Class :character      1st Qu.:  10.70   1st Qu.:   11.88   1st Qu.:   11.12  \n Mode  :character      Median :  27.41   Median :   31.05   Median :   31.91  \n                       Mean   : 173.31   Mean   :  196.08   Mean   :  186.10  \n                       3rd Qu.:  87.08   3rd Qu.:  105.00   3rd Qu.:   88.33  \n                       Max.   :9802.00   Max.   :11144.00   Max.   :10619.00  \n  rna_14h_rep1       rna_14h_rep2       rna_14h_rep3     \n Min.   :   0.000   Min.   :   0.000   Min.   :   0.000  \n 1st Qu.:   3.875   1st Qu.:   3.962   1st Qu.:   5.000  \n Median :  10.435   Median :   9.665   Median :   9.665  \n Mean   : 102.875   Mean   :  93.370   Mean   : 111.515  \n 3rd Qu.:  41.000   3rd Qu.:  38.750   3rd Qu.:  48.750  \n Max.   :5292.000   Max.   :5090.000   Max.   :6012.000  \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 100\nColumns: 7\n$ ensembl_transcript_id <chr> \"ENST00000327044.6_51_2298\", \"ENST00000338591.7_…\n$ rna_0h_rep1           <dbl> 243.00, 19.00, 45.00, 42.00, 17.00, 27.50, 158.0…\n$ rna_0h_rep2           <dbl> 322.00, 17.00, 53.00, 50.00, 19.00, 33.67, 169.6…\n$ rna_0h_rep3           <dbl> 303.00, 15.00, 48.00, 52.00, 25.00, 36.33, 171.3…\n$ rna_14h_rep1          <dbl> 177.00, 9.00, 11.00, 32.00, 3.00, 22.50, 121.00,…\n$ rna_14h_rep2          <dbl> 177.00, 5.00, 5.00, 31.00, 0.00, 29.17, 124.17, …\n$ rna_14h_rep3          <dbl> 239.00, 8.00, 14.00, 30.00, 2.00, 27.33, 155.33,…\n```\n\n\n:::\n:::\n\n\nComment on whether this dataset is tidy, and if not, list the reasons why.\n\nHint: In a tidy dataframe, every column represents a single variable and every row represents a single observation\n\n### Answer\n\nIt is not tidy because: 1. The time points and replicates are not in their own columns 2. Multiple variables (molecule type, time, replicate) are encoded in column names 3. Each row contains multiple observations (different time points and replicates)\n\n## Question 3\n\n**How will you reshape the data frame so that each row has only one experimental observation?**\n\nBefore we reshape, let's think about what we want:\n\n- Which column should stay the same? (The transcript ID)\n- Which columns contain the measurements? (All the others)\n- What should we call the new column names?\n\nUse `pivot_longer()` to reshape the data. You'll want to:\n\n- Keep the `ensembl_transcript_id` column as-is (use `cols = -ensembl_transcript_id`)\n- Create a new column for the condition names (use `names_to = \"condition\"`)\n- Create a new column for the values (use `values_to = \"count\"`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reshape the data so each row is one observation\nx_long <-\n  pivot_longer(\n    x,\n    cols = -ensembl_transcript_id, # everything except the ID column\n    names_to = \"condition\", # new column for the condition names\n    values_to = \"count\" # new column for the count values\n  )\n\nx_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 600 × 3\n   ensembl_transcript_id      condition    count\n   <chr>                      <chr>        <dbl>\n 1 ENST00000327044.6_51_2298  rna_0h_rep1    243\n 2 ENST00000327044.6_51_2298  rna_0h_rep2    322\n 3 ENST00000327044.6_51_2298  rna_0h_rep3    303\n 4 ENST00000327044.6_51_2298  rna_14h_rep1   177\n 5 ENST00000327044.6_51_2298  rna_14h_rep2   177\n 6 ENST00000327044.6_51_2298  rna_14h_rep3   239\n 7 ENST00000338591.7_360_2034 rna_0h_rep1     19\n 8 ENST00000338591.7_360_2034 rna_0h_rep2     17\n 9 ENST00000338591.7_360_2034 rna_0h_rep3     15\n10 ENST00000338591.7_360_2034 rna_14h_rep1     9\n# ℹ 590 more rows\n```\n\n\n:::\n:::\n\n\n### Question 4\n\n**How will you modify the dataframe so that multiple variables are not present in a single column?**\n\nUse `separate_wider_delim()` to split the condition column into separate variables. You need to:\n\n- Specify which column to separate (`condition`)\n- Specify the delimiter character (`delim = \"_\"`)\n- Provide the new column names (`names = c(\"molecule\", \"timepoint\", \"replicate\")`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_tidy <-\n  separate_wider_delim(\n    x_long,\n    condition,\n    delim = \"_\",\n    names = c(\"molecule\", \"timepoint\", \"replicate\")\n  )\n\nx_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 600 × 5\n   ensembl_transcript_id      molecule timepoint replicate count\n   <chr>                      <chr>    <chr>     <chr>     <dbl>\n 1 ENST00000327044.6_51_2298  rna      0h        rep1        243\n 2 ENST00000327044.6_51_2298  rna      0h        rep2        322\n 3 ENST00000327044.6_51_2298  rna      0h        rep3        303\n 4 ENST00000327044.6_51_2298  rna      14h       rep1        177\n 5 ENST00000327044.6_51_2298  rna      14h       rep2        177\n 6 ENST00000327044.6_51_2298  rna      14h       rep3        239\n 7 ENST00000338591.7_360_2034 rna      0h        rep1         19\n 8 ENST00000338591.7_360_2034 rna      0h        rep2         17\n 9 ENST00000338591.7_360_2034 rna      0h        rep3         15\n10 ENST00000338591.7_360_2034 rna      14h       rep1          9\n# ℹ 590 more rows\n```\n\n\n:::\n:::\n\n\n### Question 5\n\n**How will you save your output as a TSV file?**\n\nUse `write_tsv()` from the readr package to save your tidy data. Provide the data object and a filename.\n\nHint: Use the *readr* cheatsheet at the bottom of [this page](https://readr.tidyverse.org/) to figure this out.\n\nAfter running your new code, you should have a new file called `transcripts.tidy.tsv` in your working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_tsv(x_tidy, \"transcripts.tidy.tsv\")\n```\n:::\n\n\n### Question 6\n\n**Can you reverse the process? How would you go from tidy back to wide format?**\n\nUse `pivot_wider()` to go from the tidy format back to the original wide format. You need to:\n\n- Specify where the new column names come from (`names_from = c(molecule, timepoint, replicate)`)\n- Specify where the values come from (`values_from = count`)\n- Specify how to combine the names (`names_sep = \"_\"`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Going back to wide format\npivot_wider(\n  x_tidy,\n  names_from = c(molecule, timepoint, replicate),\n  values_from = count,\n  names_sep = \"_\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 7\n   ensembl_transcript_id        rna_0h_rep1 rna_0h_rep2 rna_0h_rep3 rna_14h_rep1\n   <chr>                              <dbl>       <dbl>       <dbl>        <dbl>\n 1 ENST00000327044.6_51_2298          243         322         303         177   \n 2 ENST00000338591.7_360_2034          19          17          15           9   \n 3 ENST00000379389.4_176_647           45          53          48          11   \n 4 ENST00000379370.6_1158_6186         42          50          52          32   \n 5 ENST00000379339.5_212_1352          17          19          25           3   \n 6 ENST00000263741.11_1328_1496        27.5        33.7        36.3        22.5 \n 7 ENST00000360001.10_285_1350        158         170.        171.        121   \n 8 ENST00000263741.11_315_1338        148.        162.        158.        116.  \n 9 ENST00000379198.3_138_1002          11          21          23           6   \n10 ENST00000347370.6_475_1096          27.3        23.8        28.5         7.33\n# ℹ 90 more rows\n# ℹ 2 more variables: rna_14h_rep2 <dbl>, rna_14h_rep3 <dbl>\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}