{
  "hash": "172eea43ecc36bec6f2f8f5ef1b5088b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Problem Set 1 Key\"\nauthor: \"JH\"\nformat:\n    html:\n        embed-resources: true\n---\n\n## Problem Set\n\nEach problem below is worth **8 points**.\n\n**The problem set is due 12pm on Aug 30.**\n\n### Grading rubric\n\n- Everything is good: 5 points\n- Partially correct answers: 3-4 points\n- Reasonable attempt: 2 points\n\n## Setup\n\nStart by loading libraries you need analysis below. When in doubt, start by loading the tidyverse package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n## Question 1\n\nCreate 3 different vectors called `x`, `y`, and `z`:\n\n- `x` should be character vector of length 5 (hint: use `LETTERS` or `letters`)\n- `y` should be a numeric vector of length 5 (hint: try `1:5` or `c(1, 2, 3, 4, 5)`)\n- `z` should be a logical vector of length 5 (hint: use `TRUE` and `FALSE` values)\n\nUse `length()` to calculate the length of each vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- LETTERS[1:5]\ny <- 1:5\nz <- c(TRUE, TRUE, FALSE, FALSE, FALSE)\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Traditional way\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n## Question 2\n\nUsing the vectors you created above, create a new tibble with column names\n`x`, `y`, and `z`. Use the `tibble()` function to combine your vectors into a data frame.\n\nUse `nrow()` and `ncol()` to calculate the number of rows and columns, both with and without the pipe operator.\n\nUse `glimpse()` to get a quick overview of your tibble - this shows data types and first few values.\n\nWhat do you notice about the length of the vectors and the number of rows?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- tibble(x = x, y = y, z = z)\n\n# Traditional way\nnrow(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get a quick overview\nglimpse(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5\nColumns: 3\n$ x <chr> \"A\", \"B\", \"C\", \"D\", \"E\"\n$ y <int> 1, 2, 3, 4, 5\n$ z <lgl> TRUE, TRUE, FALSE, FALSE, FALSE\n```\n\n\n:::\n:::\n\n\n### Answer\n\nThe length of the vectors and the number of rows are the same, because\ntibble columns are simply the vectors we started with.\n\n## Question 3\n\nLet's explore the `penguins` dataset that we loaded.\n\n1. Look at the number of rows with `nrow()` - this tells us how many penguins are in the dataset\n2. Look at the number of columns with `ncol()` - this tells us how many variables we measured\n3. Look at the column names with `names()` - this shows us what variables we have\n4. Get a glimpse of the data with `glimpse()` - this shows data types and sample values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore the penguins dataset\nnrow(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"species\"     \"island\"      \"bill_len\"    \"bill_dep\"    \"flipper_len\"\n[6] \"body_mass\"   \"sex\"         \"year\"       \n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species     <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Ad…\n$ island      <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Tor…\n$ bill_len    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, …\n$ bill_dep    <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, …\n$ flipper_len <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180,…\n$ body_mass   <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, …\n$ sex         <fct> male, female, female, NA, female, male, female, male, NA, …\n$ year        <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n:::\n\n\n## Question 4\n\nNext we will think about data tidying. Let's start by analyzing the `penguins` dataset.\n\n**Part A**: Is the `penguins` dataset tidy? To determine this, we need to think about the three principles of tidy data:\n\n1. Each variable forms a column\n2. Each observation forms a row\n3. Each type of observational unit forms a table\n\nLook at the `penguins` dataset and answer:\n\n- What are the variables in the dataset? (Hint: use `names(penguins)` to see them)\n- Does each column represent a single variable?\n- Does each row represent a single penguin observation?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the structure of penguins\npenguins |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species     <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Ad…\n$ island      <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Tor…\n$ bill_len    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, …\n$ bill_dep    <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, …\n$ flipper_len <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180,…\n$ body_mass   <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, …\n$ sex         <fct> male, female, female, NA, female, male, female, male, NA, …\n$ year        <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n\n```{.r .cell-code}\n# What are the variables?\nnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"species\"     \"island\"      \"bill_len\"    \"bill_dep\"    \"flipper_len\"\n[6] \"body_mass\"   \"sex\"         \"year\"       \n```\n\n\n:::\n\n```{.r .cell-code}\n# Look at a few rows\npenguins |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species    island bill_len bill_dep flipper_len body_mass    sex year\n1  Adelie Torgersen     39.1     18.7         181      3750   male 2007\n2  Adelie Torgersen     39.5     17.4         186      3800 female 2007\n3  Adelie Torgersen     40.3     18.0         195      3250 female 2007\n4  Adelie Torgersen       NA       NA          NA        NA   <NA> 2007\n5  Adelie Torgersen     36.7     19.3         193      3450 female 2007\n6  Adelie Torgersen     39.3     20.6         190      3650   male 2007\n```\n\n\n:::\n:::\n\n\n**Answer**: Yes, the `penguins` dataset is tidy because:\n\n- Each column represents one variable (species, island, bill_length_mm, etc.)\n- Each row represents one penguin observation\n- All observations are of the same type (penguin measurements)\n\n**Part B**: Now let's examine some datasets that are NOT tidy. Use `data()` to see available datasets, then look at these two examples:\n\n**Example 1: `anscombe`** - This is a classic statistics dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the anscombe dataset\nanscombe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   x1 x2 x3 x4    y1   y2    y3    y4\n1  10 10 10  8  8.04 9.14  7.46  6.58\n2   8  8  8  8  6.95 8.14  6.77  5.76\n3  13 13 13  8  7.58 8.74 12.74  7.71\n4   9  9  9  8  8.81 8.77  7.11  8.84\n5  11 11 11  8  8.33 9.26  7.81  8.47\n6  14 14 14  8  9.96 8.10  8.84  7.04\n7   6  6  6  8  7.24 6.13  6.08  5.25\n8   4  4  4 19  4.26 3.10  5.39 12.50\n9  12 12 12  8 10.84 9.13  8.15  5.56\n10  7  7  7  8  4.82 7.26  6.42  7.91\n11  5  5  5  8  5.68 4.74  5.73  6.89\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(anscombe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 11\nColumns: 8\n$ x1 <dbl> 10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5\n$ x2 <dbl> 10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5\n$ x3 <dbl> 10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5\n$ x4 <dbl> 8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8\n$ y1 <dbl> 8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68\n$ y2 <dbl> 9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74\n$ y3 <dbl> 7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73\n$ y4 <dbl> 6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89\n```\n\n\n:::\n:::\n\n\nIs `anscombe` tidy? Think about:\n- What are the actual variables? (Hint: x and y coordinates for different datasets)\n- How many different datasets are encoded in the column names?\n- What would a tidy version look like?\n\n**Example 2: Choose another dataset** - Pick one more dataset from `data()` and analyze whether it's tidy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at available datasets\ndata()\n\n# Choose one and examine it (examples: WorldPhones, UCBAdmissions, HairEyeColor)\n# Let's try WorldPhones as an example\nWorldPhones\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n1961  79831  43173 9053   3338    3224   2005     1076\n```\n\n\n:::\n:::\n\n`\n\n**Part C**: Write a brief explanation (2-3 sentences) for each dataset about:\n1. Whether it's tidy or not\n2. What makes it tidy/untidy\n3. What the variables actually represent\n\n### Your Analysis:\n\n**penguins**: The penguins dataset is tidy because each column represents a single variable (species, island, bill measurements, etc.), each row represents one penguin observation, and all data is the same type of observational unit (individual penguin measurements). The variables are clearly defined and there's no mixing of different types of information in single columns.\n\n**anscombe**: The anscombe dataset is NOT tidy because it violates multiple tidy data principles. The actual variables are x-coordinates, y-coordinates, and dataset identifier, but the dataset identifier is encoded in the column names (x1, y1, x2, y2, etc.). Four different datasets are stored in one table, with each dataset's x and y values spread across separate columns rather than being in rows with a dataset identifier column.\n\n**WorldPhones**: The WorldPhones dataset is NOT tidy because it has years as row names instead of a proper column, and regions are spread across columns rather than being values in a \"region\" variable. The actual variables should be year, region, and number of phones, but currently the year and region information is stored in the structure of the table rather than as data values. A tidy version would have one row per year-region combination.\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output.\n\nThen paste the URL of the **Posit Cloud project** (NOT the HTML link) into the problem set on Canvas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}