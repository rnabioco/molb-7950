---
title: "Single cell RNA-Seq"
subtitle: "Introduction and Quality Control"
author: "Kristen Wells"
---

```{r}
#| label: packages
#| echo: false
#| include: false
#| message: false
#| warning: false

library(here)
library(ggplot2)
#library(SingleCellExperiment)
#library(scater)
#library(AnnotationHub)
#library(Matrix)
#library(scran)
```


## Contact Info

Greetings experimentalist humans `r emo::ji("wave")`

<i class="fa fa-envelope"></i> &nbsp; [kristen.wells-wrasman@cuanschutz.edu](mailto:kristen.wells-wrasman@cuanschutz.edu) <br>

RBI Informatics Fellows [Office hours](https://medschool.cuanschutz.edu/rbi/training-and-education/rbi-office-hours)

<i class="fa fa-envelope"></i> &nbsp; [rbi.fellows@cuanschutz.edu](mailto:rbi.fellows@cuanschutz.edu)
<br>

## Learning key
* We will switch between lecture and your exercise `qmd`.
* To denote a slide that corresponds to your exercise, I will include `r emo::ji("keyboard")` in the slide title

## Learning Objectives

:::: {.columns}

::: {.column .nonincremental width="49%"}
### Lecture 1
- Identify key quality control issues with single cell RNA-seq data and perform filtering to exclude poor quality cells
- Interact with single cell data using Bioconductor tools

:::

::: {.column width="2%"}

:::

::: {.column .nonincremental width="49%"}
### Lecture 2
- Perform analysis to identify cell types in single cell data by using unsupervised clustering methods and comparing to public datasets
- Describe the importance and reasoning for conducting each step of the analysis

:::

::::

## Single cell or bulk? {.smaller}

:::: {.columns .incremental}

::: {.column .incremental width="49%"}
### Single cell
* High level overview of general transcriptomic landscape of genes that are expressed highly at the single cell level
  * Sequencing depth is low per cell so we only have confident detection of highly expressed genes
  * Differential expression is less well developed to compare different conditions
* Most techniques only capture the 5' or 3' end
* Good for identifying subpopulation of cells that change between conditions
  * Doesn't require prior knowledge of surface proteins to sort out a population
  * Doesn't average across all cells in the experiment

:::

::: {.column width="2%"}

:::

::: {.column .incremental width="49%"}
### Bulk
* Global overview of transcriptomic landscape of an entire sample using high to low expressed genes.
  * Sequencing depth is much deeper so there is higher confidence to detect mid to low range expression
  * Good for novel transcript identification and assessing how global transcriptome changes between conditions
* Captures full RNA molecule so can be used for RNA-splicing analysis
* Doesn't work for subpopulation analysis
  * All cells are averaged so determining what is happening to one cell type is challenging
  * Are your results because of a transcriptomic change or a change in cell type frequencies?

:::

::::

## Single cell sequencing {.smaller}

:::: {.columns}

::: {.column}

![](../img/block-rna/10x_bead_example.jpg)

![](../img/block-rna/cb-umi-scheme.jpg)
:::

::: {.column}

![](../img/block-rna/drop-generation.png)

:::

::::

## Where is the barcode and UMI?

* Below is the design for the 3' 10x genomics assay
![](../img/block-rna/cb-umi-scheme.jpg)

* Other assays may have different locations of there cell barcode and UMI.
* These may also be different lengths.
* Or even on read 2 (ex Parse bioscience).
* Be sure to check what kit was used to prep your data and always perform sanity checks throughout the analysis!

## Library prep

![](../img/block-rna/10x-library-scheme.jpg)



## Other single cell methods

   droplet-based scRNA-seq: e.g. 10x Genomics or Drop-Seq

Smart-seq based scRNA-seq: (bulk-RNA-seq on single cells in individual wells/tubes)

[CITE-Seq](http://cite-seq.com/): gene expression + cell surface protein abundance

[VDJ-Seq](https://www.10xgenomics.com/products/single-cell-immune-profiling): Gene expression + targeted sequencing of T-Cell and B-Cell receptors

Many others: ATAC, spatial transcriptomics, DNA sequencing, etc. (see [Integrative Single cell analysis](https://www.nature.com/articles/s41576-019-0093-7))

## Overview of analysis steps

```{mermaid}
flowchart TB
    %% Green nodes
    cr["Process FASTQ to UMI count matrix<br/>(Cellranger, Alevin, or STARsolo)"]

    %% Blue nodes
    cell_qc["QC cells<br/>(% mitochondrial UMIs,<br/># of UMIs/Genes,<br/>remove empty droplets)"]
    norm["Normalize UMI counts<br/>(Normalize by deconvolution)"]
    markers["Discover cell type markers"]
    annot["Annotate cell types"]

    %% Yellow nodes
    feature["Identify variable genes<br/>(a.k.a Feature selection)"]
    dim_red["Dimensionality reduction (PCA)"]
    cluster["Clustering<br/>(using Shared Nearest Neighbors)"]
    viz["Make 2D-Visualization<br/>(PCA, UMAP, tSNE<br/>Force-directed graph)"]
    traj["Trajectory Inference<br/>(Slingshot,<br/>PAGA, scVelo)"]

    %% Orange nodes
    downstream["Downstream analysis<br/>(Differential expression,<br/>Shifts in cell type composition,<br/>Find new cell-types/states)"]

    %% Main workflow connections
    cr --> cell_qc
    cell_qc --> norm
    norm --> feature
    norm --> markers
    feature --> dim_red
    dim_red --> cluster
    dim_red --> traj
    dim_red --> viz
    cluster --> markers
    markers --> annot

    %% Feedback loops (dashed grey)
    annot -.-> cell_qc
    annot -.-> feature
    annot -.-> dim_red
    annot -.-> cluster
    annot --> downstream

    %% Edge labels
    cr -.-|"Load into<br/>SingleCellExperiment"| cell_qc
    annot -.-|"Repeat<br/>as needed"| cell_qc

    %% Color styling
    classDef green fill:#009E73,stroke:#000,stroke-width:2px,color:#000
    classDef blue fill:#56B4E9,stroke:#000,stroke-width:2px,color:#000
    classDef yellow fill:#F0E442,stroke:#000,stroke-width:2px,color:#000
    classDef orange fill:#E69F00,stroke:#000,stroke-width:2px,color:#000

    class cr green
    class cell_qc,norm,markers,annot blue
    class feature,dim_red,cluster,viz,traj yellow
    class downstream orange
```

## From raw reads to a UMI count matrix

:::: {.columns}

::: {.column}

![](../img/block-rna/count-matrix.png)

:::


::: {.column .nonincremental}

- [`cellranger`](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger) from 10x Genomics (STAR)
- [`alevin`](https://salmon.readthedocs.io/en/latest/alevin.html) (Salmon)
- [`STAR-solo`](https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md) (From the STAR developers)

:::

::::

## Alevin

```bash
$ salmon -h
salmon v1.3.0

Usage:  salmon -h|--help or
        salmon -v|--version or
        salmon -c|--cite or
        salmon [--no-version-check] <COMMAND> [-h | options]

Commands:
     index      : create a salmon index
     quant      : quantify a sample
     alevin     : single cell analysis # <------
     swim       : perform super-secret operation
     quantmerge : merge multiple quantifications into a single file
```

## Alevin

```bash
$ salmon index ...
$ salmon alevin
   -l ISR                    # library type
   -1 read1.fastq.gz         # reads
   -2 read2.fastq.gz         # reads
   --chromiumv3              # chemistry
   -i /path/to/salmon/index  # index path
   -o /path/to/output        # output
   --tgMap transcript_to_gene.tsv
```

## Alevin output files

```bash
$ls alevin/
alevin.log          # run info
featureDump.txt     # info on each cell barcode
quants_mat.gz       # binary file with UMI counts
quants_mat_cols.txt # genes in count matrix
quants_mat_rows.txt # cell barcodes in count matrix
quants_tier_mat.gz  # info about mapping for each gene
whitelist.txt       # valid barcodes discovered by alevin
```

## AlevinQC

Can generate interactive QC reports using [alevinQC](https://csoneson.github.io/alevinQC/)

[PBMC QC report](../data/block-rna/scrna/qc/pbmc/alevinReport.html)

## QC: cell or empty droplet? {.smaller}

:::: {.columns}

::: {.column .nonincremental width="50%"}

- In a typical droplet scRNA-seq experiment 100k - 1M cell barcodes are
detected, but only 1-10k cells are loaded

- Most of these droplets are "empty" and contain very few reads.

- What is the source of these reads in the "empty" droplets?

- How do we determine if the data from a particular cell barcode is derived from a single cell?

:::

::: {.column width="50%"}

```{r}
#| label: cb-umi-plot
#| fig-width: 9
#| fig-height: 9
#| fig.alt: "Description of the plot - PLEASE FILL IN"
library(alevinQC)

alevin <- readAlevinQC(
  baseDir = here("data/block-rna/scrna/pbmc")
)

cell_counts <- alevin$cbTable

ggplot(
  cell_counts,
  aes(ranking, originalFreq)
) +
  geom_point(size = 0.1) +
  scale_x_log10(labels = scales::comma, breaks = c(10, 1000, 10000, 100000)) +
  scale_y_log10() +
  labs(
    x = "Barcode rank",
    y = "Barcode frequency"
  )
```

:::

::::

## QC: cell or empty droplet?  {.smaller}

:::: {.columns}

::: {.column width="50%"}

```{r}
#| fig-width: 9
#| fig-height: 9
#| fig.alt: "Description of the plot - PLEASE FILL IN"
frst_dev <- max(cell_counts$ranking[cell_counts$inFirstWhiteList])

ggplot(cell_counts, aes(ranking, originalFreq)) +
  geom_point(size = 0.1) +
  scale_x_log10(labels = scales::comma, breaks = c(10, 1000, 10000, 100000)) +
  scale_y_log10() +
  geom_vline(xintercept = frst_dev) +
  labs(
    x = "Barcode rank",
    y = "Barcode frequency"
  )
```

:::

::: {.column width="50%"}

- Fit a curve to the observed data and identify point where first derivative is minimized.

- Any barcodes less than the "knee", test sequences for off-by-one errors against the barcodes above the knee.

- Take top half of cells above the knee and train a classifier using multiple criteria (% mapping, % mitochondrial and rRNA reads, duplicate rate, ...)

- Classify ambiguous cells in lower half into likely cells or not.
:::

::::



## QC: Cell or empty droplet?

:::: {.columns}

::: {.column}

#### Good data

```{r}
#| label: plot-label
#| fig.alt: "Description of the plot - PLEASE FILL IN"
ggplot(cell_counts, aes(ranking, originalFreq)) +
  geom_point(aes(color = inFinalWhiteList), size = 0.1) +
  scale_x_log10(labels = scales::comma, breaks = c(10, 1000, 10000, 100000)) +
  scale_y_log10() +
  labs(
    x = "Barcode rank",
    y = "Barcode frequency",
    color = "Cell"
  )
```

:::

::: {.column}

#### Bad data

![](../img/block-rna/bad_data.png)

:::

::::

## Cell calling sanity check {.incremental}
* It's always a good think to sanity check your data
* After calling cells, how can we perform a sanity check?
* I once reanalyzed data from a *published* paper and found that they had treated two separate sequencing runs as two separate captures. If this happens to you, what is a quick and easy way to make sure you treated your data correctly at the cell calling step?

## Doublets and Multiplets {.smaller}

:::: {.columns}

::: {.column width="50%"}


![](../img/block-rna/10x-barnyard.png)

:::

::: {.column width="50%"}

- Doublets are not clearly identifiable using simple QC metrics, so cannot be reliably removed with filtering with # of UMIs or genes detected.

- `scran::doublet_cluster` : Compare each cluster to an in silico mix of two other clusters. Get per cluster score of likelihood of being a doublet.

- `scran::doublet_cell` : Compare each cell to a mix of two other randomly selected cells. Get per cell score of likelihood of being a doublet.

- Doublets can also arise due to sample prep, e.g. incomplete generations of a single cell suspension. These doublets are difficult to exclude from the data

:::

::::

## Turning to our exercise `r emo::ji("keyboard")`
Before jumping into the analysis, let's step back and start running through the exercise for today

Start by loading in the packages

```r
library(here)
library(scran)
library(scater)
library(SingleCellExperiment)
library(DropletUtils)
library(tximport)
library(Matrix)
library(AnnotationHub)
library(eds)
```

## Raw data: the UMI count matrix `r emo::ji("keyboard")`

:::: {.columns}

::: {.column .nonincremental width="50%"}

- scRNA-seq libraries produce reads from 100,000 - 1,000,000 cell barcodes

- A matrix of 20,000 genes x 1,000,000 barcodes is 20 billion values (!).

- \>95% are zeros due to empty droplets and the low efficiency of the library prep (< 10-20% of RNA captured).

:::

::: {.column}

```{r}
#| echo: true
vals <- c(
  0,
  0,
  0,
  2,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0
)
m <- matrix(vals, ncol = 5)
m
summary(m)
```

:::

::::

## Sparse matricies `r emo::ji("keyboard")` {.nonincremental .smaller}

* Use the `as` function to convert to a sparse matrix
```{r}
#| echo: true
sm <- as(m, "sparseMatrix")
# alternatively
# Matrix(vals, nrow = 5)
sm
```

* This only stores non-zero values
* Internally, values are stored as a row column value triplet

```{r}
#| echo: true
summary(sm)
```

## Sparse matricies `r emo::ji("keyboard")`
* Functions at manipulate matricies (`rowMeans`, `colSums`, `apply`, `[`) can be used on sparseMatricies as long as the `Matrix` package is loaded.

* How can we extract the first 2 rows and first 3 columns of the sparse matrix `sm` that we generated above?

## Sparse matricies `r emo::ji("keyboard")` {.nonincremental}
* Functions at manipulate matricies (`rowMeans`, `colSums`, `apply`, `[`) can be used on sparseMatricies as long as the `Matrix` package is loaded.

* How can we extract the first 2 rows and first 3 columns of the sparse matrix `sm` that we generated above?

```{r}
#| echo: true
# print subset of sm
sm[1:2, 1:3]
```

## Sparse matricies `r emo::ji("keyboard")`
How can we calculate the sum of the columns of `sm`?


## Sparse matricies `r emo::ji("keyboard")`
How can we calculate the sum of the columns of `sm`?

```{r}
#| echo: true
# find column sums of sparse
colSums(sm)
```

## Base R subsetting `r emo::ji("keyboard")` {.nonincremental}
* Basic R concepts for subsetting and referencing columns are important in single cell analysis
* Vectors can be subset by index (position), logical vector (`c(TRUE, FALSE)`) or name (if vector is named)
```{r}
#| echo: true
letters
```

```{r}
#| echo: true

# extract 2nd, 4th, and 6th entry
letters[c(2, 4, 6)]
```

## Base R subsetting `r emo::ji("keyboard")`

```{r}
#| echo: true
# subset by creating logical vector
vowels <- c("a", "e", "i", "o", "u")
is_a_vowel <- letters %in% vowels

letters[is_a_vowel]
```

## Base R subsetting `r emo::ji("keyboard")`

```{r}
#| echo: true
# name the letters vector with uppercase LETTERS
names(letters) <- LETTERS

# subset by name
letters[c("A", "Z")]
```

## Base R subsetting `r emo::ji("keyboard")`
* Matrices are 2 dimensional vectors and have similar subsetting rules except there are two dimensions, rows and columns.

`matrix[rows_to_subset, columns_to_subset]`

```{r}
#| echo: true
m <- matrix(1:24, nrow = 6)

# extract 2nd, 4th, and 6th row
m[c(2, 4, 6), ]
```

## Base R subsetting `r emo::ji("keyboard")`

```{r}
#| echo: true
# extract 2nd and 4th column
m[, c(2, 4)]
```

## Base R subsetting `r emo::ji("keyboard")`
```{r}
#| echo: true
# first 3 rows and 2nd and 4th column
m[1:3, c(2, 4)]
```

## Base R subsetting `r emo::ji("keyboard")`
```{r}
#| echo: true
# extract rows with totals > 50
m[rowSums(m) > 50, ]
```

## Base R subsetting `r emo::ji("keyboard")`

```{r}
#| echo: true
# extract columns with minimum values < 8
m[, colMins(m) < 8]
```

## Base R subsetting `r emo::ji("keyboard")`
The base R `data.frame` and Bioconductor `DataFrame` can also be subset with the `[` and we can reference individual vectors in a data.frame using `$`.

```{r}
#| echo: true
# first 3 rows and columns of mtcars data.frame
mtcars[1:3, 1:3]
```

## Base R subsetting `r emo::ji("keyboard")`

```{r}
#| echo: true

# columns can be referenced using $, which extracts a vector
mtcars$mpg
```

## Base R subsetting `r emo::ji("keyboard")`
```{r}
#| echo: true
# columns can be generated or overwritten using $ with assignment
mtcars$new_column_name <- "Hello!"
mtcars$wt <- mtcars$wt * 1000

# We can subset using logical vectors
# E.g. filter for rows (cars) with mpg > 20
mtcars[mtcars$mpg > 20, ]
```


## Read in Alevin output with tximport {.smaller}
* Now that we know how to work with a sparse matrix, let's read in our data
* `tximport` has methods for importing the binary data from alevin
* We need to supply a path to the `quants_mat.gz` file.
* If you want to load multiple samples use iteration approaches (e.g. `lapply`, `purrr::map`, a `for` loop).
* Also note that the [`eds`](https://bioconductor.org/packages/release/bioc/html/eds.html) package was installed which greatly speeds up the loading of the matrix.

We will load in data from a 10x Genomics scRNA-seq library generated from human periperhal blood mononuclear cells (PMBCS).

## Read in Alevin output with tximport `r emo::ji("keyboard")`

```{r}
#| echo: true
#| label: tximport
library(tximport)
tx <- tximport(
  here("data/block-rna/scrna/pbmc/alevin/quants_mat.gz"),
  type = "alevin"
)
names(tx)
```

`tx` is a list with 3 elements, `abundance`, `counts`, and `countsFromAbundance`. Let's look at the counts element

## Read in Alevin output with tximport `r emo::ji("keyboard")`
```{r}
#| echo: true
mat <- tx$counts
mat[5:10, 1:3]
```

Here you can see that `tx$counts` is a sparse matrix that is genes (rows) by cells (columns).

How many barcodes are in `tx$counts`? How many genes?

## Read in Alevin output with tximport `r emo::ji("keyboard")`

```{r}
#| echo: true
# TODO Find number of barcodes and genes in tx$counts
dim(mat)
```


What fraction of the matrix is non-zero? We can use the `nnzero` function from the `Matrix` package check

## Read in Alevin output with tximport `r emo::ji("keyboard")`
```{r}
#| echo: true
nnzero(mat) / length(mat) # (length = # of rows X # of columns)
# similarily
sum(mat > 0) / length(mat)
```

## Single cell analysis packages


Key resource for single cell analysis in Bioconductor:
[Orchestrating Single Cell Analysis](https://bioconductor.org/books/release/OSCA/)

[`SingleCellExperiment`](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) is the core datastructure for storing single cell data.

[`scran`](https://bioconductor.org/packages/release/bioc/html/scran.html) provides algorithms for low-level processing of single cell data.

[`scater`](https://bioconductor.org/packages/release/bioc/html/scater.html) provides plotting, data transformation, and quality control functionality


## SingleCellExperiment

![](../img/block-rna/sce.png)

## Create a SingleCellExperiment object `r emo::ji("keyboard")` {.smaller}
 A `SingleCellExperiment` object can be created from our sparse matrix using the `SingleCellExperiment()` function.


```{r}
#| echo: true
sce <- SingleCellExperiment(list(counts = mat))
sce
```

## Exploring the SingleCellExperiment object `r emo::ji("keyboard")` {.smaller}
The `SingleCellExperiment` object stores the gene x cell count matrix within `assays()`.

```{r}
#| echo: true
# get list of assays
assays(sce)

# extract single assay
assay(sce, "counts")[1:4, 1:4]
```

## Exploring the SingleCellExperiment object `r emo::ji("keyboard")`
```{r}
#| echo: true
assays(sce)$counts[1:4, 1:4]
```

## Exploring the SingleCellExperiment object `r emo::ji("keyboard")`

```{r}
#| echo: true
# convenience function for counts assay
counts(sce)[1:4, 1:4]
```

## Accessing cell metadata `r emo::ji("keyboard")`
* We generate cell-level information
 - such as quality control metrics, clustering results, and celltype assignments.
* This data is stored within a data frame called `colData`
* access using `colData()`
* Specialized Bioconductor specific data.frame class (`DataFrame`) which has similar semantics and functionality to a base R data.frame.

## Accessing cell metadata `r emo::ji("keyboard")` {.smaller}

```{r}
#| echo: true
# empty right now.
colData(sce)

# add a sample annotation
colData(sce)$cell_source <- "PBMC"

# equivalent approach using $
sce$cell_source <- "PBMC"

colData(sce)
```

## Accessing gene metadata `r emo::ji("keyboard")`
* Gene-level metadata is stored in a data.frame called `rowData()`.
* Use the rowData to store gene ids, symbols, and other information about genes.

```{r}
#| echo: true
# empty right now
rowData(sce)
```

## Manipulating a SingleCellExperiment `r emo::ji("keyboard")`

* Calculate the total number of counts in each cell and store these counts in the `colData().*

```{r}
#| echo: true
sce$total_counts <- colSums(counts(sce))
```

## Manipulating a SingleCellExperiment `r emo::ji("keyboard")` {.smaller}

* Calculate the total number of counts for each gene, summed across cells
* Calculate the number of cells with > 0 counts per gene
* store both of these values in the rowData().
```{r}
#| echo: true
rowData(sce)$total_gene_counts <- rowSums(counts(sce))
rowData(sce)$n_cells_expr <- rowSums(counts(sce) > 0)
rowData(sce)
```

## Manipulating a SingleCellExperiment `r emo::ji("keyboard")`
* We can subset the SingleCellExperiment using the same techniques as base R data.
* Note that `dplyr` verbs do not work with `SingleCellExperiment`

```r
data.frame[rows, columns]

sce[genes, cells]
```

## Manipulating a SingleCellExperiment `r emo::ji("keyboard")` {.smaller}
* We can subset the SingleCellExperiment using the same techniques as base R data.
* Note that `dplyr` verbs do not work with `SingleCellExperiment`

```r
# subset to data from first 4 genes and cells
sce[1:4, 1:4]

# subset to cells from PBMC cells
sce[, sce$cell_source == "PBMC"]


genes_to_keep <- c("ENSG00000223972", "ENSG00000210195", "ENSG00000210196")
sce[genes_to_keep, ]

cells_to_keep <- c("ACTATGGAGGTCCCTG", "GCTGCAGTCCGATCTC", "TCTCAGCTCGCCGAAC")
sce[, cells_to_keep]
```

## Manipulating a SingleCellExperiment
`ncol()`: # of cells
`nrow()`: # of gene
`dims()`: # of genes and cells
`rownames()`: rownames in matrices (e.g. genes)
`colnames()`: colnames in matrices (e.g. cells)
`cbind()`: combine multiple SingleCellExperiments by column
`rbind()`: combine multiple SingleCellExperiments by row

## Storing gene identifiers
* Ensembl gene ids are the rownames of our matrix (e.g. ENSG00000289576, ENSG00000221539).
* These identifiers are guaranteed to be unique and are more stable and reliable than gene symbols (e.g. ACTB, GAPDH).
* This becomes important if you want to compare to external datasets or ensure that your data can be easily used by others in the future.
* But they aren't easy to interpret


## Storing gene identifiers `r emo::ji("keyboard")` {.smaller}

```{r}
#| echo: true
ah <- AnnotationHub()
# download ensembl database
ens_db <- ah[["AH113665"]]

gene_names <- mapIds(
  ens_db,
  keys = rownames(sce),
  keytype = "GENEID",
  column = "SYMBOL"
)

rowData(sce)$gene <- gene_names
rowData(sce)$gene_id <- rownames(sce)
rowData(sce)
```

## Updating our rownames `r emo::ji("keyboard")` {.smaller}
* Goal rename rownames to symbols
* Problem, some are ` `, `NA`, or duplicated
* `uniquifyFeatureNames()` is a convenience function that will rename gene symbols that are `NA` or duplicated values to the ensembl ID or a combination of gene symbol and ensembl ID

```{r}
#| echo: true
rownames(sce) <- uniquifyFeatureNames(
  rowData(sce)$gene_id,
  rowData(sce)$gene
)
head(rownames(sce))
```

## Filtering low quality cells `r emo::ji("keyboard")` {.smaller}
Next we perform some filtering and quality control to remove low expression genes and poor quality cells.

Our SingleCellExperiment has `r nrow(sce)` genes in the matrix. Most of these are
not expressed. We want to exclude these genes as they won't provide any useful
data for the analysis.

```{r}
#| echo: true
# exclude genes expressed in fewer than 10 cells (~ 1% of cells)
rowData(sce)$n_cells <- rowSums(counts(sce) > 0)
sce <- sce[rowData(sce)$n_cells >= 10, ]
sce
```

## Filtering low quality cells
To exclude low-quality cells we will use the following metrics:

* Number of counts per cell barcode
* Number of genes detected per barcode
* The percentage of counts from mitochondrial genes per barcode

A low number of counts, a low number of detected genes, and a high percentage of mitochondrial counts suggests that the cell had a broken membrane and the cytoplasmic mRNA leaked out.


## Filtering low quality cells `r emo::ji("keyboard")` {.smaller}

To calculate these metrics we can use `addPerCellQCMetrics` from scater. Mitochondrial genes are named with a common "MT-" prefix (e.g. MT-CO2, MT-ATP6, MR-RNR2), which we can use to identify them.

```{r}
#| echo: true
# identify subset of genes that are from mitochondrial genome
is_mito <- startsWith(rowData(sce)$gene, "MT-")
sce <- addPerCellQCMetrics(sce, subsets = list(Mito = is_mito))
colData(sce)
```

## Filtering low quality cells `r emo::ji("keyboard")`
We can use the `plotColData()` function from scater to plot various metrics (as a ggplot2 object).

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 9
plotColData(sce, y = "sum")
```

## Filtering low quality cells `r emo::ji("keyboard")`
We can use the `plotColData()` function from scater to plot various metrics (as a ggplot2 object).

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 9
plotColData(sce, y = "detected")
```

## Filtering low quality cells `r emo::ji("keyboard")`
We can use the `plotColData()` function from scater to plot various metrics (as a ggplot2 object).
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 9
plotColData(sce, y = "detected", x = "sum", colour_by = "subsets_Mito_percent")
```

## Filtering low quality cells `r emo::ji("keyboard")`
We can use the `plotColData()` function from scater to plot various metrics (as a ggplot2 object).
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 9
plotColData(sce, y = "subsets_Mito_percent", x = "sum") +
  labs(x = "# of counts")
```

## Filtering low quality cells `r emo::ji("keyboard")`
We can also extract `colData` as a dataframe to make custom `ggplot2` plots

```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 9
#| fig.alt: "Description of the plot - PLEASE FILL IN"
cell_info <- as.data.frame(colData(sce))
ggplot(cell_info, aes(sum, subsets_Mito_percent)) +
  geom_point()
```

## Filtering low quality cells `r emo::ji("keyboard")`

* Selecting an appropriate cutoff can be somewhat arbitrary
* Risk of excluding meaningful cell populations.
* Start with lenient cutoffs, then later increasing the stringency after examining the clustering and cell types.

 *How many cells pass these criteria?*

```{r}
#| echo: true
pass_qc <- sce$subsets_Mito_percent < 20 &
  sce$detected > 500 &
  sce$sum > 1000
```

*How many cells pass these criteria?*

## Filtering low quality cells `r emo::ji("keyboard")`


```{r}
#| echo: true
sum(pass_qc)
```

## Visualizing qc failed cells `r emo::ji("keyboard")`
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 9
sce$pass_qc <- sce$subsets_Mito_percent < 20 &
  sce$detected > 500 &
  sce$sum > 1000

plotColData(sce, y = "subsets_Mito_percent", x = "sum", colour_by = "pass_qc") +
  labs(x = "# of counts")
```

## Remove low quality cells `r emo::ji("keyboard")`
Lastly we can subset the `SingleCellExperiment` to exclude the low-quality cells.

```{r}
#| echo: true
sce <- sce[, sce$pass_qc]
sce
```

## Analysis workflow

```{mermaid}
flowchart LR
    %% Green nodes
    load["Import data<br/>tximport::tximport()<br/>SingleCellExperiment()<br/>counts()"]

    %% Blue nodes
    cell_qc["QC cells<br/>addPerCellQCMetrics()<br/>plotColData()"]
    norm["Normalize UMI counts<br/>quickCluster()<br/>computeSumFactors()<br/>logNormCounts()"]
    markers["Discover cell type markers<br/>scoreMarkers()"]
    annot["Annotate cell types<br/>clustifyr and SingleR"]

    %% Yellow nodes
    feature["Identify variable genes<br/>modelGeneVarByPoisson()<br/>getTopHVGs()"]
    dim_red["Dimensionality reduction via PCA<br/>runPCA()"]
    cluster["Clustering<br/>clusterCells()"]
    viz["Make 2D-Visualization<br/>runUMAP()"]

    %% Main workflow connections
    load --> cell_qc
    cell_qc --> norm
    norm --> feature
    norm --> markers
    feature --> dim_red
    dim_red --> cluster
    dim_red --> viz
    cluster --> markers
    markers --> annot

    %% Feedback loops (dashed grey)
    annot -.-> cell_qc
    annot -.-> feature
    annot -.-> dim_red
    annot -.-> cluster

    %% Styling
    classDef green fill:#009E73,stroke:#000,stroke-width:1px,color:#000
    classDef blue fill:#56B4E9,stroke:#000,stroke-width:1px,color:#000
    classDef yellow fill:#F0E442,stroke:#000,stroke-width:1px,color:#000

    class load green
    class cell_qc,norm,markers,annot blue
    class feature,dim_red,cluster,viz yellow
```

## Normalization `r emo::ji("keyboard")`
* Normalization attempts to correct for technical biases that will distort biological signal in the data.
* A large source of variation arises due to differences in sequencing depth between cells.
* This can be seen by performing PCA on the unnormalized counts.
* We will use `runPCA` from scater to perform PCA.

```{r}
#| echo: true
# set seed for functions with a randomized component
# to obtain the same result each execution
set.seed(42)
sce <- runPCA(sce, exprs_values = "counts", name = "count_PCA")
```

## Normalization `r emo::ji("keyboard")` {.smaller}

::: columns
::: {.column width="70%"}
* We can now visualize this PCA
```{r}
#| echo: true
#| fig-width: 7
#| fig-height: 7
plotReducedDim(sce, "count_PCA", colour_by = "sum")
```

:::

::: {.column width="3%"}

:::

::: {.column width="27%"}


Note that PC1 is correlated with the total UMI counts (`sum`), meaning that the largest source of variation is related to differences in sequencing depth rather than biological differences between cells.

:::
:::

## Normalization `r emo::ji("keyboard")`
```{r}
#| echo: true
#| fig.alt: "Description of the plot - PLEASE FILL IN"
plot_df <- makePerCellDF(sce, c("count_PCA", "sum"))

ggplot(plot_df, aes(count_PCA.1, sum)) +
  geom_point()
```

## Normalization `r emo::ji("keyboard")`
* Normalize with `scran`
1. Crude clustering to group related cells
2. Identifying a cell-specific normalization factor (size factor)
3. Scaling the counts by this factor
4. log transforming the data (base 2 with a pseudocount).


```{r}
#| echo: true
#| warning: false
set.seed(42)
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, clusters = clusters)
sce <- logNormCounts(sce)
```

::: footer
Description of algorithim:
Lun AT, Bach K, Marioni JC. Pooling across cells to normalize single-cell RNA sequencing data with many zero counts. Genome Biol. 2016 Apr 27;17:75. doi: 10.1186/s13059-016-0947-7. PMID: 27122128; PMCID: PMC4848819.
:::

## Normalization `r emo::ji("keyboard")`
Plot the PCA with normalization

```{r}
#| echo: true
set.seed(42)
sce <- runPCA(sce, exprs_values = "logcounts", name = "PCA")
plotReducedDim(sce, "PCA", colour_by = "sum")
```

## Normalization `r emo::ji("keyboard")`
```{r}
#| echo: true
#| fig.alt: "Description of the plot - PLEASE FILL IN"
plot_df <- makePerCellDF(sce, c("PCA", "sum"))
ggplot(plot_df, aes(PCA.1, sum)) +
  geom_point()
```

PC1 no longer correlates with UMI counts.

## Further Reading

eBook: Orchestrating single cell analyses with Bioconductor [eBook](https://osca.bioconductor.org/) [Publication](https://doi.org/10.1038/s41592-019-0654-x)

Review: [Current best practices for analysis](https://www.embopress.org/doi/full/10.15252/msb.20188746)

Blog: [Single Cell Thoughts](https://ltla.github.io/SingleCellThoughts/)

Blog: [What do you mean "heterogeneity"](http://www.nxn.se/)
