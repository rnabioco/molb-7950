---
title: "R Bootcamp - Day 3"
subtitle: "dplyr"
author: "{{< var instructor.block.bootcamp-r >}}"
---

```{r}
#| include: false
library(tidyverse)
library(here)
```


## Class 3 outline {.smaller}

* Introduce _dplyr_ & today's datasets (Exercise 1)
* Review basic functions of _dplyr_
  * core dplyr verbs:
  - `arrange` (Exercise 2)
  - `filter` (Exercise 3)
  - `select` (Exercise 4)
  - `mutate`  and the pipe (Exercise 5)
  - `summarise` (Exercise 6)
  * modify scope of verbs using: `group_by` (Exercise 7)
  * and many others! `rename`, `count`, `add_row`, `add_column`, `distinct`,
    `sample_n`, `sample_frac`, `slice`, `pull` (Exercise 8)

## dplyr overview

dplyr:

* provides a set of tools for efficiently manipulating data sets in R.
* is extremely fast even with large data sets.
* follows the tidyverse grammar and philosophy; human-readable and intuitive
* encourages linking of verbs together using pipes `|>` (or the older `%>%`)

## Today's datasets {.smaller}

* We will use a data set that comes with the `dplyr` package to explore its functions.

* `dplyr::starwars` contains data for characters from Star Wars.

. . .

```{r}
#| echo: true
starwars
```

. . .

Explore `starwars` in the console with `head()`, `View()`, and `summary()`.

## dplyr package {.smaller}

`dplyr` is a grammar of data manipulation, providing a consistent set of
verbs that help you solve the most common data manipulation challenges:

  - `arrange()` changes the ordering of the rows.
  - `filter()` picks cases based on their values.
  - `select()` picks variables based on their names.
  - `mutate()` adds new variables that are functions of existing variables
  - `summarise()` reduces multiple values down to a single summary.

. . .

- These all combine naturally with `group_by()` which allows you to perform
any operation "by group".

- Pipes `|>` allows different functions to be used together to create a
workflow. `x |> f(y)` turns into `f(x, y)`

## arrange - Syntax

- `arrange()` orders rows by values of one or more columns (low to high).
- The `desc()` helper orders high to low.

. . .

```r
arrange(data = ..., <colname>)
```

## arrange - Exercise 2 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# default is to arrange in ascending order
arrange(starwars, height)
```

## arrange - Exercise 2 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# arrange in descending order
arrange(starwars, desc(height))
```

## arrange - Exercise 2 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# arrange by multiple columns
arrange(starwars, height, mass)
```

## filter - Syntax

- `filter()` chooses rows/cases where conditions are true.

```r
filter(data = ..., <condition>)
```

## filter - Exercise 3 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
filter(starwars, skin_color == "light")
```

## filter - Exercise 3 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
filter(starwars, height < 150)
```

## filter - Exercise 3 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
filter(
  starwars,
  mass > mean(mass, na.rm = TRUE)
)
```

## filter - Exercise 3 {.smaller}

Filter out cases where `hair_color` is `NA`

```{r}
#| echo: true
#| output-location: fragment
filter(starwars, is.na(hair_color))
```

## filter - Exercise 3 {.smaller}

* The most frequently used comparison operators are:

- `>`, `<`, `>=`, `<=`, `==` (equal), `!=` (not equal)
- `is.na()`, `!is.na()`, and `%in%` (contained in a vector of cases).

. . .

```{r}
#| echo: true
#| output-location: fragment
filter(
  starwars,
  skin_color %in% c("light", "fair", "pale")
)
```

---

```{r}
#| echo: true
#| output-location: fragment
# can also store as a named vector and use %in% with the vector
color <- c("light", "fair", "pale")
filter(starwars, skin_color %in% color)
```

---

Conditions can be combined using `&` (and), `|` (or).

```{r}
#| echo: true
#| output-location: fragment
filter(
  starwars,
  skin_color == "light" | eye_color == "brown"
)
```

---

```{r}
#| echo: true
#| output-location: fragment
filter(
  starwars,
  skin_color == "light" & eye_color == "brown"
)
```

## select - Syntax

- `select` extracts one or more columns from a table

```r
select(data = ..., <colname>)
```

## select - Exercise 4 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# select *only* the variable `hair_color`
select(starwars, hair_color)
```

## select - Exercise 4 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# drop the variable `hair_color`
select(starwars, -hair_color)
```

## select - Exercise 4 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
select(starwars, hair_color, skin_color, eye_color)
```

## select - Exercise 4 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# select variables `hair_color` through `eye_color`
select(starwars, hair_color:eye_color)
```

## select - Exercise 4 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# drop variables `hair_color` through `eye_color`
select(starwars, !(hair_color:eye_color))
```

## select - Exercise 4 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# `starts_with`, `ends_with`, `contains`
select(starwars, ends_with("color"))
```

## mutate - Syntax

- `mutate()` to compute new columns

![](../img/dplyr/mutate.png)

---

```r
mutate(data = ..., <newcolname> =  funs(<oldcolname>))
mutate(data = ..., <colname>, funs(x))
```

. . .

or with the the pipe `|>`

Useful when multiple functions act sequentially on a dataframe.

```r
data |>
  mutate(<colname>, funs(x))
```

## mutate (& pipe |>)- Exercise 5 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# create a new column to display height in meters
mutate(starwars, height_m = height / 100)
```

## mutate (& pipe |>)- Exercise 5 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
# using the pipe to feed data into multiple functions sequentially
starwars |>
  mutate(height_m = height / 100) |>
  select(name, height_m, height, everything())
```

## mutate (& pipe |>)- Exercise 5 {.smaller}

Mutate allows you to refer to columns that youâ€™ve just created

```{r}
#| echo: true
#| output-location: fragment
starwars |>
  mutate(
    height_m = height / 100,
    BMI = mass / (height_m^2)
  ) |>
  select(name, BMI, everything())
```

---

Output needs to be saved into a new data frame since dplyr does not "change" the original dataframe.

```{r}
#| echo: true
#| output-location: fragment
starwars_bmi <- starwars |>
  mutate(
    height_m = height / 100,
    BMI = mass / (height_m^2)
  ) |>
  select(name, BMI, everything())
```

---

## Complex conditional logic with `case_when()`

```{r}
#| echo: true
#| output-location: column-fragment
starwars |>
  mutate(
    size_description = case_when(
      height < 100 ~ "very short",
      height < 150 ~ "short",
      height < 200 ~ "average",
      height >= 200 ~ "tall",
      .default = "unknown"
    )
  ) |>
  count(size_description)
```

---

Multiple conditions with `case_when()`

```{r}
#| echo: true
#| output-location: column-fragment
starwars |>
  mutate(
    character_type = case_when(
      species == "Human" & homeworld == "Tatooine" ~ "Tatooine Human",
      species == "Human" ~ "Other Human",
      mass > 100 ~ "Heavy non-human",
      height > 180 ~ "Tall non-human",
      .default = "Standard character"
    )
  ) |>
  count(character_type, sort = TRUE)
```

## `group_by()` & `summarise()` - Exercise 6

`group_by` creates a grouped copy of a table.

* This changes the unit of analysis from the complete data set to individual groups.
* dplyr verbs automatically detect grouped tables and calculate "by group".

. . .

```r
group_by(data = ..., <colname>)
```

## group_by - Syntax

* `group_by()` creates a grouped tibble.
* This changes the unit of analysis from the complete dataset to individual groups.
* Then, when you use the dplyr verbs on a grouped data frame they'll be automatically applied "by group".

. . .

```r
group_by(data = ..., <colname>)
```

## group_by + summarize - Exercise 7 {.smaller}

```{r}
#| echo: true
#| output-location: fragment
starwars |>
  group_by(species)
```

## summarize - syntax

* `summarize()` takes named expressions and calculates a summary based on group.

. . .

```r
summarize(data = ..., name = expression)
```

## Calculate a summary statistic *by species* {.smaller}

```{r}
#| echo: true
#| output-location: fragment
starwars |>
  group_by(species) |>
  summarise(
    height = mean(height, na.rm = TRUE)
  )
```

---

Calucate multiple summary statistics.

```{r}
#| echo: true
#| output-location: fragment
starwars |>
  group_by(species, gender) |>
  summarise(
    height = mean(height, na.rm = TRUE),
    mass = mean(mass, na.rm = TRUE)
  )
```

## `across()` - Apply functions to multiple columns

`across()` allows you to apply the same operations to multiple columns efficiently.

```{r}
#| echo: true
#| output-location: column-fragment
# Apply mean to multiple numeric columns
starwars |>
  summarise(
    across(c(height, mass), mean, na.rm = TRUE)
  )
```

---

Apply multiple functions with `across()`

```{r}
#| echo: true
#| output-location: column-fragment
# Apply multiple functions using list()
starwars |>
  summarise(
    across(
      c(height, mass),
      list(mean = mean, median = median),
      na.rm = TRUE
    )
  )
```

---

`across()` with grouping

```{r}
#| echo: true
#| output-location: column-fragment
# Combine across() with group_by()
starwars |>
  group_by(species) |>
  summarise(
    across(
      c(height, mass),
      list(mean = mean, median = median),
      na.rm = TRUE
    ),
    .groups = "drop"
  )
```
