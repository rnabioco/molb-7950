---
title: "R Bootcamp - Day 7"
subtitle: "tidyverse odds & ends"
author: "{{< var instructor.block.bootcamp-r >}}"
---

```{r}
#| include: false
library(tidyverse)
library(cowplot)
library(here)
```

## Class 7 outline

* Accessing data in vectors (Exercise)
* other tidyverse packages (stringr & forcats)
* dplyr table joins (Exercise)
* ggplot2 scale functions
* ggplot2 multi-panel figures (Exercise)
* ggplot2 saving figures

# Accessing data in vectors

## Using `[`, `[[`, and `$` {.smaller}

```{r}
#| echo: true
#| output-location: column-fragment
# `hp` vector from mtcars
mtcars$hp
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
# columns by name
mtcars[c("hp", "mpg")]
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
# first 10 items in hp
hp <- mtcars$hp
hp[1:10]
```

---

```{r}
#| eval: false
#| echo: true
#| output-location: column-fragment
# 2 ways to get the 10th value
hp[10]
hp[[10]]
```

. . .

```{r}
#| echo: true
#| error: true
#| output-location: column-fragment
# this is an error
hp[[1:10]]
```

. . .

`[` can return a range, `[[` returns a single value.

## vector selection with logic {.smaller}

one-step filtering.

```{r}
#| echo: true
#| output-location: column-fragment
hp[hp > 100]
```

. . .

two-step filtering. same result.

```{r}
#| echo: true
#| output-location: column-fragment
# get a vector of T/F values
x <- hp > 100
x
```

```{r}
#| echo: true
#| output-location: column-fragment
# use that vector to index the original
hp[x]
```

. . .

also can use with `is.na()` to identify / exclude `NA` values in a vector.

---

Use `sum()` to figure out how many are `TRUE`.

```{r}
#| echo: true
#| output-location: column-fragment
x <- hp > 100

# how many are TRUE?
sum(x)
```

```{r}
#| echo: true
#| output-location: column-fragment
length(hp[x])
```

# other tidyverse libraries

## string operations with stringr {.smaller}

stringr provides several useful functions for operating on strings.

See the [stringr cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)

```{r}
#| echo: true
#| output-location: column-fragment
str_c("letter: ", letters[1:5])
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
ids <- c("x-1", "x-2", "y-1", "y-2")
str_split(ids, "-")

# just the first parts
# str_split_i(ids, '-', 1)
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
str_detect("A", LETTERS[1:5])
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
str_pad(
  1:10,
  width = 2,
  side = "left",
  pad = 0
)
```

::: {.notes}
`str_c()` is similar to `paste` and `paste0` but the behavior is more consistent.
:::

## forcats operations for factors {.smaller}

forcats provides several utilities for working with factors.

See the [forcats cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/factors.pdf)

```{r}
#| echo: true
#| output-location: column-fragment
library(palmerpenguins)
penguins[1:3]
```

---

```{r}
#| echo: true
#| output-location: column-fragment
fct_count(penguins$species)
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
fct_lump_min(
  penguins$species,
  min = 150
) |>
  fct_count()
```

::: aside
`dplyr::count()` is a more flexible alternative to `forcats::fct_count()`
:::

---

## Use forcats to reorder data in plots {.smaller}

```{r}
#| echo: true
#| output-location: column-fragment
ggplot(
  mpg,
  aes(
    x = class,
    y = hwy
  )
) +
  geom_boxplot()
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
ggplot(
  mpg,
  aes(
    x = fct_reorder(
      class,
      hwy,
      .fun = median
    ),
    y = hwy
  )
) +
  geom_boxplot()
```

::: aside
[FAQ on rordering in ggplot2](https://ggplot2.tidyverse.org/articles/faq-reordering.html)
:::

# dplyr

## Combining tables by *variables* (i.e., columns)

  - `bind_cols()`
  - `left_join()`
  - `right_join()`
  - `inner_join()`
  - `full_join()`

## Combining tables by *cases* (i.e., rows)

  - `bind_rows()`
  - `intersect()`
  - `setdiff()`
  - `union()`

## dplyr cheatsheet

Look at "combine variables" and "combine cases" at the top.

![](../img/dplyr/combining-tables.png){fig-align="center"}

## tables for joining

```{r}
#| echo: true
#| output-location: column-fragment
band_members
```

```{r}
#| echo: true
#| output-location: column-fragment
band_instruments
```

## mutating joins - visualized

:::: {.columns}
::: {.column width="50%"}
![](../img/tidyexplain/left-join.gif)
:::

::: {.column width="50%"}
![](../img/tidyexplain/right-join.gif)
:::
::::

::: aside
[tidyexplain](https://github.com/gadenbuie/tidyexplain) from @gadenbuie
:::

## Joining tables by a variable - Exercise 1

```{r}
#| echo: true
#| output-location: column-fragment
band_members |>
  left_join(band_instruments)
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
band_members |>
  right_join(band_instruments)
```

## filtering joins - visualized

:::: {.columns}
::: {.column width="33%"}
![](../img/tidyexplain/semi-join.gif)
:::

::: {.column width="33%"}
![](../img/tidyexplain/inner-join.gif)
:::

::: {.column width="33%"}
![](../img/tidyexplain/full-join.gif)
:::
::::

::: aside
[tidyexplain](https://github.com/gadenbuie/tidyexplain) from @gadenbuie
:::

## Joining tables by a variable - Exercise 2

```{r}
#| echo: true
#| output-location: column-fragment
band_members |>
  semi_join(band_instruments)
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
band_members |>
  inner_join(band_instruments)
```

. . .

```{r}
#| echo: true
#| output-location: column-fragment
band_members |>
  full_join(
    band_instruments2,
    by = c("name" = "artist")
  )
```

## Other dplyr verbs

There are many other dplyr verbs.

-
We've used `rename`, `count`, `add_row`, `add_column`,
`distinct`, `sample_n`, `sample_frac`, `slice`, `pull`

Check out the [dplyr cheatsheet]() to learn more!

# ggplot2

## scale functions in ggplot2

- `scale_color_brewer()` and `scale_fill_brewer()` control `color` and `fill` aesthetics.
- See available [ggplot2 brewer palettes](https://ggplot2.tidyverse.org/reference/scale_brewer.html#palettes)

. . .

```{r}
#| echo: true
#| output-location: column
p <- ggplot(
  mtcars,
  aes(
    x = mpg,
    y = hp,
    color = factor(cyl)
  )
) +
  geom_point(size = 3) +
  theme_cowplot()

p
```

## scale functions in ggplot2 {.smaller}

```{r}
#| echo: true
#| output-location: column-fragment
p + scale_color_brewer(palette = "Set1")
```

```{r}
#| echo: true
#| output-location: column-fragment
p + scale_color_brewer(palette = "Dark2")
```

## Set up a points plot {.smaller}

```{r}
#| echo: true
#| output-location: column-fragment
diamonds_subset <- sample_n(diamonds, 1000)

p <- ggplot(
  diamonds_subset,
  aes(
    x = carat,
    y = price,
    color = cut
  )
) +
  geom_point(alpha = 0.8) +
  theme_cowplot()

p + geom_line()
```

## How to combine multiple plots into a figure? {.smaller}

```{r}
#| echo: true
#| output-location: slide
# `plot_grid()` is from `cowplot`
plot_grid(
  p,
  p,
  p,
  p,
  labels = c(
    "A",
    "B",
    "C",
    "D"
  ),
  nrow = 2
)
```

::: aside
[patchwork](https://github.com/thomasp85/patchwork) is a related library that uses arithmetic syntax (`a + b | c`)
:::

## We have 4 legends - can they be condensed? {.smaller}

Yes, but it is not exactly straightforward.

```{r}
#| echo: true
#| output-location: slide
# fetch the legend for `p1`
legend <- get_legend(
  p + theme(legend.position = "bottom")
)

p <- p + theme(legend.position = "none")

# first `plot_grid` builds the panels
panels <- plot_grid(
  p,
  p,
  p,
  p,
  labels = c(
    "A",
    "B",
    "C",
    "D"
  ),
  nrow = 2
)

# second `plot_grid` adds the legend to the panels
plot_grid(
  panels,
  legend,
  ncol = 1,
  rel_heights = c(1, .1)
)
```

## Saving plots (Exercise 18)

Saves last plot as 5' x 5' file named `plot_final.png` in working directory.

Matches file type to file extension.

```{r}
#| echo: true
#| eval: false
# default is to save last plot in the buffer
# can also specify with the `plot` argument
ggsave(
  here("img/plot_final.png"),
  width = 5,
  height = 5
)
```
