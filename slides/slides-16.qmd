---
title: "Mapping chromatin structure and transactions"
author: "{{< var instructor.block.dna >}}"
date: last-modified
---

## Final Projects

Throughout the DNA and RNA blocks we will refer to several data sets that might
be good starting points for your final project (worth 20% of your grade).

We will ask for a sketch of the rough plan for a final project by the end of
week 7 (Wed Oct 8). In addition, if you plan to work in a group, we'd like
to know who you will be working with.

**Final projects will be due Monday Oct 27. We will schedule short (5 minute) talks by each group on Oct 27 and Oct 29.**

::: nonincremental
-   [Final project overview](https://rnabioco.github.io/molb-7950/course-info/final-projects.html)
-   [DNA block resources](https://rnabioco.github.io/molb-7950/resources/block-dna-resources.html)
:::

# Gene regulation by chromatin

## Chromatin organization regulates genome compaction and gene expression

::: {layout-ncol="3" layout-valign="center"}
![Genome organization](../img/block-dna/ctcf.jpg)

![Cell signaling](../img/block-dna/promoter.png)

![Organism development](../img/block-dna/org-dev.jpg)
:::

## DNA accessibility drives all biochemical transactions on the genome

::: columns
::: {.column width="50%"}
-   Transcription Initiation
-   Transcription Elongation
-   DNA Repair
-   Initiation of DNA Replication
-   Recombination
-   Viral Integration
:::

::: {.column width="50%"}
![](../img/block-dna/domino.gif)
:::
:::

## Mapping & measurement are first steps toward understanding. {.smaller}

::: columns
::: {.column width="60%"}
Before genome-wide DNA accessibility measurements, we knew about chromatin transactions at only a handful of loci.

This was a classic "keys under the lamppost" situation, leading to general models of chromatin-based gene regulation.
:::

::: {.column width="40%"}
![](../img/block-dna/street-lamp.jpg){width="100%"}
:::
:::

::: aside
Photo by [Justus Menke](https://unsplash.com/@justusmenke?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/PvQtCNm4teI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
:::

## Using micrococcal nuclease (MNase) to map chromatin {.smaller}

::: columns
::: {.column .nonincremental width="50%"}
-   Micrococcal nuclease is an endo/exonuclease from *Staphylococcus aureus*
-   Efficient, **multiple turnover** enzyme that digests accessible DNA (& RNA)
-   Dependent on calcium ions
:::

::: {.column width="50%"}
![](../img/block-dna/mnase-overview.png){fig-align="center"}
:::
:::

## Using ATAC to map chromatin {.smaller}

::: columns
::: {.column .nonincremental width="50%"}
-   Tn5 transposase catalyzes "cut-and-paste" insertion of DNA into a target
-   In ATAC ("Assay for Transposase-Accessible Chromatin"), the transposase enzymes are loaded with DNA sequencing adaptors (blue and red in the image), so the products of transposition are ready to PCR.
-   **Single turnover enzyme** that acts on accessible DNA.
-   Requires about \~60 bp of accessible for transposition.
:::

::: {.column width="50%"}
![](../img/block-dna/atac-explain.png){fig-align="center"}
:::
:::

## **Chromatin mapping experimental summary** {.smaller}

|                           |                     DNase-seq                     |                                             ATAC-seq                                              |             MNase-seq              |
|---------------------------|:-------------------------------------------------:|:-------------------------------------------------------------------------------------------------:|:----------------------------------:|
| **Genome representation** |                Most active regions                |                                        Most active regions                                        |            Whole genome            |
| **Ease of experiment**    |                  Very difficult                   |                                            Easy peasy                                             |           One day's work           |
| **What is profiled?**     | Accessible DNA, "footprints" at low cut frequency | Accessible DNA. Not really "footprints", single turnover enzyme, so fragments are not informative | Protections of TFs and nucleosomes |

# Experimental details

##

![](../img/block-dna/footprinting-exp-overview.png)

##

![](../img/block-dna/atac-input-comparison.png)

# Data structures and tools used for analysis of chromatin mapping experiments

## Experimental workflow

![](../img/block-dna/acc-workflow.png)

## BED format {.smaller}

::: columns
::: {.column .nonincremental width="50%"}
-   Contains information about genomic intervals.
-   Used to represent genomic features (exons, introns, transcription start sites)
-   First 3 columns are: `chrom`, `start`, `end`
-   Next 3 are: `name`, `score`, `strand`. Strand can be `+`, `-`, or `.` (no strand)
:::

::: {.column width="50%"}
```
chr7 127473530 127474697 Pos3 0  +
chr7 127474697 127475864 Pos4 0  +
chr7 127475864 127477031 Neg1 0  -
chr7 127477031 127478198 Neg2 0  -
```
:::
:::

## WIG / bedGraph {.smaller}

::: columns
::: {.column .nonincremental width="50%"}
- WIG and bedGraph store interval *signals*.

    * Genome sequencing coverage
    * Coverage of reads from MNase / ATAC-seq

- Many studies will provide genome-scale data in these formats
:::

::: {.column width="50%"}
```
chr19 49302000 49302300 -1.0
chr19 49302300 49302600 -0.75
chr19 49302600 49302900 -0.50
chr19 49302900 49303200 -0.25
```
:::
:::

::: {.callout-note}
bigWig is a binary form of WIG, used to store large amounts of signal in a compressed, indexed format.
:::

## Interval analysis {.smaller}

::: columns
::: {.column width="50%"}
The primary tool in the genome interval analysis is [BEDtools](https://bedtools.readthedocs.io/en/latest/) -- it's the Swiss-army knife of internal analysis.

We will use an R package called [valr](https://rnabioco.github.io/valr/) that provides the same tools, but you don't need to leave RStudio. valr provides the same tools for reading and manipulating genome intervals.

`bed_intersect()` is a fundamental operation. It identifies intervals from two tibbles that intersect and reports their overlaps.

Let's take a look at that it does.
:::

::: {.column width="50%"}
![](../img/block-dna/intersect-glyph.png)
:::
:::

## `bed_intersect()` example {.smaller}

First, we'll define some example intervals in `x` and `y`.

```{r}
#| label: bed-intersect
#| echo: true
#| message: false
library(valr)
library(dplyr)

x <- tribble(
  ~chrom, ~start, ~end,
  "chr1", 25, 50,
  "chr1", 100, 125
)

y <- tribble(
  ~chrom, ~start, ~end,
  "chr1", 30,     75
)
```

---

Visual representation of the intersecting intervals.

```{r}
#| label: bed_intersect-glyph
#| echo: false
bed_glyph(
  bed_intersect(x, y)
)
```

---

Tibble of the intersecting intervals.

```{r}
#| label: bed-intersect-tbl
bed_intersect(x, y)
```

::: {.callout-note}
Note the addition of `.x` and `.y` suffixes to disamguate the input sources.
:::

## `read_bed()` example

Rse `read_bed()` to load genome annotations and signals.

```{r}
#| label: valr-example
#| echo: true
#| warning: false
snps <- read_bed(
  valr_example("hg19.snps147.chr22.bed.gz")
)

genes <- read_bed(
  valr_example("genes.hg19.chr22.bed.gz")
)
```

::: {.callout-note}
You'll also use `read_bedgraph()` and `read_bigwig()` on your problem set.
:::

## What is in `snps` and `genes`? {.smaller}

```{r}
#| label: valr-snps
#| echo: true
snps
```

```{r}
#| label: valr-genes
#| echo: true
genes
```

## Interval manipulation {.smaller}

Let's find and characterize intergenic SNPs. We'll use the tools [`bed_substract()`](https://rnabioco.github.io/valr/reference/bed_subtract.html) and [`bed_closest()`](https://rnabioco.github.io/valr/reference/bed_closest.html). Take a look and their examples in the valr documentation to see what they do.

Here, we'll ask the question: **"Which SNPs are intergenic, and how far are they from the nearest gene?"**

```{r}
#| label: valr-ints
#| echo: true
# find snps in intergenic regions
intergenic <- bed_subtract(snps, genes)

# find distance from intergenic snps to nearest gene
nearby <- bed_closest(intergenic, genes)
```

Take a look at the `intergenic` and `nearby` objects in the console.

---

```{r}
#| label: inspect-intergenic
intergenic
```

---

```{r}
#| label: inspect-nearby
nearby
```

## Interval manipulation {.smaller}

Now that you have overlaps and distances between SNPs and genes, you can go back to dplyr tools to generate reports.

```{r}
#| label: valr-dplyr
#| echo: true
#| output-location: column-fragment
nearby |>
  select(
    starts_with("name"),
    .overlap,
    .dist
  ) |>
  filter(abs(.dist) < 5000)
```

## `bed_map()` example

::: columns
::: {.column width="50%"}
`bed_map()` does two things in order:

::: nonincremental
1.  It identifies intersecting intervals between `x` and `y`
2.  Calculates summary statistics based on the intersection
:::

:::

::: {.column width="50%"}
![](../img/block-dna/map-glyph.png)
:::
:::

A typical use is to count up signals (e.g., coverage from an MNase-seq experiment) over specific regions (e.g., promoter regions).

## `bed_map()` example {.smaller}

Let's setup some example data.

```{r}
#| label: bed-map-setup
#| echo: true
x <- tribble(
  ~chrom, ~start, ~end,
  "chr1", 100,    250,
  "chr1", 250,    500
)

y <- tribble(
  ~chrom, ~start, ~end, ~value,
  "chr1", 100,    250,  10,
  "chr1", 150,    250,  20,
  "chr1", 250,    500,  500
)
```

## `bed_map()` example continued {.smaller}

First examine the intersecting intervals.

```{r}
#| label: bed-intersect-2
#| echo: true
bed_intersect(x, y)
```

---

Visual representation of `bed_map()`

```{r}
#| label: bed-map-glyph
#| echo: false
bed_glyph(
  bed_map(
    x, y,
    value = sum(value)
  ),
  label = "value"
)
```

---

Computing multiple summaries with `bed_map()`

```{r}
#| label: bed-map-tbl
#| echo: true
bed_map(
  x, y,
  .sum = sum(value),
  .count = length(value)
)
```

# Review problem set
